<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="Reflection function class. Can be used to call global functions.">
	<meta property="og:title" content="Function">
	<meta property="og:description" content="Reflection function class. Can be used to call global functions.">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>Function</title>
</head>
<body>
	<h1>Function</h1>
	<p><b>Namespace:</b>&nbsp;Reflection</p>
	<p>Reflection function class. Can be used to call global functions.</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Callable@ opImplCast()</td>
			<td>Implicitly casts to base type.</td>
		</tr>
		<tr>
			<td>string GetNamespace() const</td>
			<td>Gets this instance's namespace.</td>
		</tr>
		<tr>
			<td>string GetName() const</td>
			<td>Gets this instance's name.</td>
		</tr>
		<tr>
			<td>bool Equals(const Callable@ pCallable) const</td>
			<td>Returns whether the given callable type is identical to this one.</td>
		</tr>
		<tr>
			<td>bool IsCompatible(const Callable@ pCallable) const</td>
			<td>Returns whether the given object type is compatible with this one.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(Arguments@ pArguments)</td>
			<td>Calls this function. pArguments must be valid.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call()</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
		<tr>
			<td>ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Calls this function.</td>
		</tr>
	</table>
	</div>
</body>
</html>
