<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="This class can hold arguments for a function or method call.">
	<meta property="og:title" content="Arguments">
	<meta property="og:description" content="This class can hold arguments for a function or method call.">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>Arguments</title>
</head>
<body>
	<h1>Arguments</h1>
	<p><b>Namespace:</b>&nbsp;Reflection</p>
	<p>This class can hold arguments for a function or method call.</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Arguments@ Arguments()</td>
			<td>Default constructor</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(const Arguments& in other)</td>
			<td>Copy constructor</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments()</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Constructs a Arguments instance with the given arguments.</td>
		</tr>
		<tr>
			<td>Arguments& opAssign(const Arguments& in other)</td>
			<td>Assignment operator</td>
		</tr>
		<tr>
			<td>size_t GetCount() const</td>
			<td>Gets number of arguments.</td>
		</tr>
		<tr>
			<td>bool HasArguments() const</td>
			<td>Returns whether this instance holds any arguments.</td>
		</tr>
		<tr>
			<td>void Clear()</td>
			<td>Clears this instance's data.</td>
		</tr>
		<tr>
			<td>bool SetArguments()</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
		<tr>
			<td>bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)</td>
			<td>Sets the arguments this instance contains.</td>
		</tr>
	</table>
	</div>
</body>
</html>
