<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="Represents a regular expression">
	<meta property="og:title" content="Regex">
	<meta property="og:description" content="Represents a regular expression">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>Regex</title>
</head>
<body>
	<h1>Regex</h1>
	<p><b>Namespace:</b>&nbsp;Regex</p>
	<p>Represents a regular expression</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Regex@ Regex()</td>
			<td>Default Constructor</td>
		</tr>
		<tr>
			<td>Regex@ Regex(const Regex@ pOther)</td>
			<td>Copy Constructor</td>
		</tr>
		<tr>
			<td>Regex@ Regex(const string& in szExpression, FlagType flags = Regex::ECMAScript)</td>
			<td>Initialization Constructor</td>
		</tr>
		<tr>
			<td>Regex& Assign(const Regex@ pOther)</td>
			<td>Assigns the given regular expression to this one.</td>
		</tr>
		<tr>
			<td>Regex& Assign(const string& in szExpression, FlagType flags = Regex::ECMAScript)</td>
			<td>Assigns the given regular expression to this one.</td>
		</tr>
		<tr>
			<td>uint GetMarkCount() const</td>
			<td>Gets the mark count</td>
		</tr>
		<tr>
			<td>FlagType GetFlags() const</td>
			<td>Gets this regex's flags</td>
		</tr>
		<tr>
			<td>void Swap(Regex@ other)</td>
			<td>Swaps this regular expression's contents with the given expression</td>
		</tr>
	</table>
	</div>
</body>
</html>
