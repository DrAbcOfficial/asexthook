export const database = [{P:"Arguments",D:"This class can hold arguments for a function or method call.",W:"Arguments",C:"Class"},{P:"Arguments",D:"Default constructor",W:"Arguments",C:"Arguments",J:1},{P:"opAssign",D:"Assignment operator",W:"Arguments",C:"Arguments",J:1},{P:"GetCount",D:"Gets number of arguments.",W:"Arguments",C:"Arguments",J:1},{P:"HasArguments",D:"Returns whether this instance holds any arguments.",W:"Arguments",C:"Arguments",J:1},{P:"Clear",D:"Clears this instance's data.",W:"Arguments",C:"Arguments",J:1},{P:"SetArguments",D:"Sets the arguments this instance contains.",W:"Arguments",C:"Arguments",J:1},{P:"BaseEntity",D:"Baseclass for CBaseEntity.\nAllows calling of the base implementation of certain methods.",W:"BaseEntity",C:"Class"},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BaseEntity",C:"BaseEntity",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BaseEntity",C:"BaseEntity",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BaseEntity",C:"BaseEntity",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BaseEntity",C:"BaseEntity",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BaseEntity",C:"BaseEntity",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BaseEntity",C:"BaseEntity",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BaseEntity",C:"BaseEntity",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BaseEntity",C:"BaseEntity",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BaseEntity",C:"BaseEntity",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BaseEntity",C:"BaseEntity",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BaseEntity",C:"BaseEntity",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BaseEntity",C:"BaseEntity",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BaseEntity",C:"BaseEntity",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BaseEntity",C:"BaseEntity",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BaseEntity",C:"BaseEntity",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BaseEntity",C:"BaseEntity",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"BaseEntity",C:"BaseEntity",J:1},{P:"BaseItem",D:"Baseclass for CItem.\nAllows calling of the base implementation of certain methods.",W:"BaseItem",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BaseItem",C:"BaseItem",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BaseItem",C:"BaseItem",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BaseItem",C:"BaseItem",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BaseItem",C:"BaseItem",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BaseItem",C:"BaseItem",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BaseItem",C:"BaseItem",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BaseItem",C:"BaseItem",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BaseItem",C:"BaseItem",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BaseItem",C:"BaseItem",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BaseItem",C:"BaseItem",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BaseItem",C:"BaseItem",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BaseItem",C:"BaseItem",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BaseItem",C:"BaseItem",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BaseItem",C:"BaseItem",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BaseItem",C:"BaseItem",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BaseItem",C:"BaseItem",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BaseItem",C:"BaseItem",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BaseItem",C:"BaseItem",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BaseItem",C:"BaseItem",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BaseItem",C:"BaseItem",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BaseItem",C:"BaseItem",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BaseItem",C:"BaseItem",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BaseItem",C:"BaseItem",J:1},{P:"BaseMonster",D:"Baseclass for CBaseMonster.\nAllows calling of the base implementation of certain methods.",W:"BaseMonster",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BaseMonster",C:"BaseMonster",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BaseMonster",C:"BaseMonster",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BaseMonster",C:"BaseMonster",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BaseMonster",C:"BaseMonster",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BaseMonster",C:"BaseMonster",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BaseMonster",C:"BaseMonster",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BaseMonster",C:"BaseMonster",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BaseMonster",C:"BaseMonster",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BaseMonster",C:"BaseMonster",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BaseMonster",C:"BaseMonster",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BaseMonster",C:"BaseMonster",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BaseMonster",C:"BaseMonster",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BaseMonster",C:"BaseMonster",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BaseMonster",C:"BaseMonster",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BaseMonster",C:"BaseMonster",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BaseMonster",C:"BaseMonster",J:1},{P:"SetupFriendly",D:"Calls the base class implementation of SetupFriendly",W:"BaseMonster",C:"BaseMonster",J:1},{P:"Classify",D:"Calls the base class implementation of Classify",W:"BaseMonster",C:"BaseMonster",J:1},{P:"IgnoreConditions",D:"Calls the base class implementation of IgnoreConditions",W:"BaseMonster",C:"BaseMonster",J:1},{P:"AlertSound",D:"Calls the base class implementation of AlertSound",W:"BaseMonster",C:"BaseMonster",J:1},{P:"PainSound",D:"Calls the base class implementation of PainSound",W:"BaseMonster",C:"BaseMonster",J:1},{P:"DeathSound",D:"Calls the base class implementation of DeathSound",W:"BaseMonster",C:"BaseMonster",J:1},{P:"ISoundMask",D:"Calls the base class implementation of ISoundMask",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckRangeAttack1",D:"Calls the base class implementation of CheckRangeAttack1",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckRangeAttack1_Move",D:"Calls the base class implementation of CheckRangeAttack1_Move",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckRangeAttack2",D:"Calls the base class implementation of CheckRangeAttack2",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckRangeAttack2_Move",D:"Calls the base class implementation of CheckRangeAttack2_Move",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckMeleeAttack1",D:"Calls the base class implementation of CheckMeleeAttack1",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckMeleeAttack1_Move",D:"Calls the base class implementation of CheckMeleeAttack1_Move",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckMeleeAttack2",D:"Calls the base class implementation of CheckMeleeAttack2",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckMeleeAttack2_Move",D:"Calls the base class implementation of CheckMeleeAttack2_Move",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CheckAmmo",D:"Calls the base class implementation of CheckAmmo",W:"BaseMonster",C:"BaseMonster",J:1},{P:"SetYawSpeed",D:"Calls the base class implementation of SetYawSpeed",W:"BaseMonster",C:"BaseMonster",J:1},{P:"StartTask",D:"Calls the base class implementation of StartTask",W:"BaseMonster",C:"BaseMonster",J:1},{P:"RunTask",D:"Calls the base class implementation of RunTask",W:"BaseMonster",C:"BaseMonster",J:1},{P:"HandleAnimEvent",D:"Calls the base class implementation of HandleAnimEvent",W:"BaseMonster",C:"BaseMonster",J:1},{P:"GetScheduleOfType",D:"Calls the base class implementation of GetScheduleOfType",W:"BaseMonster",C:"BaseMonster",J:1},{P:"GetSchedule",D:"Calls the base class implementation of GetSchedule",W:"BaseMonster",C:"BaseMonster",J:1},{P:"ScheduleFromName",D:"Calls the base class implementation of ScheduleFromName",W:"BaseMonster",C:"BaseMonster",J:1},{P:"RunAI",D:"Calls the base class implementation of RunAI",W:"BaseMonster",C:"BaseMonster",J:1},{P:"CallGibMonster",D:"Calls the base class implementation of CallGibMonster",W:"BaseMonster",C:"BaseMonster",J:1},{P:"GibMonster",D:"Calls the base class implementation of GibMonster",W:"BaseMonster",C:"BaseMonster",J:1},{P:"BasePlayerAmmo",D:"Baseclass for CBasePlayerAmmo.\nAllows calling of the base implementation of certain methods.",W:"BasePlayerAmmo",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BasePlayerAmmo",C:"BasePlayerAmmo",J:1},{P:"BasePlayerItem",D:"Baseclass for CBasePlayerItem.\nAllows calling of the base implementation of certain methods.",W:"BasePlayerItem",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"AddToPlayer",D:"Calls the base class implementation of AddToPlayer",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"AddDuplicate",D:"Calls the base class implementation of AddDuplicate",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Materialize",D:"Calls the base class implementation of Materialize",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"GetItemInfo",D:"Calls the base class implementation of GetItemInfo",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"CanDeploy",D:"Calls the base class implementation of CanDeploy",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Deploy",D:"Calls the base class implementation of Deploy",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"CanHolster",D:"Calls the base class implementation of CanHolster",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Holster",D:"Calls the base class implementation of Holster",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"UpdateItemInfo",D:"Calls the base class implementation of UpdateItemInfo",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"ItemPreFrame",D:"Calls the base class implementation of ItemPreFrame",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"ItemPostFrame",D:"Calls the base class implementation of ItemPostFrame",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"InactiveItemPreFrame",D:"Calls the base class implementation of InactiveItemPreFrame",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"InactiveItemPostFrame",D:"Calls the base class implementation of InactiveItemPostFrame",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"Kill",D:"Calls the base class implementation of Kill",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"AttachToPlayer",D:"Calls the base class implementation of AttachToPlayer",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"PrimaryAmmoIndex",D:"Calls the base class implementation of PrimaryAmmoIndex",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"SecondaryAmmoIndex",D:"Calls the base class implementation of SecondaryAmmoIndex",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"UpdateClientData",D:"Calls the base class implementation of UpdateClientData",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"GetRespawnTime",D:"Calls the base class implementation of GetRespawnTime",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"DropItem",D:"Calls the base class implementation of DropItem",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"CanHaveDuplicates",D:"Calls the base class implementation of CanHaveDuplicates",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"BasePlayerItem",C:"BasePlayerItem",J:1},{P:"BasePlayerWeapon",D:"Baseclass for CBasePlayerWeapon.\nAllows calling of the base implementation of certain methods.",W:"BasePlayerWeapon",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"AddToPlayer",D:"Calls the base class implementation of AddToPlayer",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"AddDuplicate",D:"Calls the base class implementation of AddDuplicate",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Materialize",D:"Calls the base class implementation of Materialize",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"GetItemInfo",D:"Calls the base class implementation of GetItemInfo",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"CanDeploy",D:"Calls the base class implementation of CanDeploy",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Deploy",D:"Calls the base class implementation of Deploy",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"CanHolster",D:"Calls the base class implementation of CanHolster",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Holster",D:"Calls the base class implementation of Holster",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"UpdateItemInfo",D:"Calls the base class implementation of UpdateItemInfo",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ItemPreFrame",D:"Calls the base class implementation of ItemPreFrame",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ItemPostFrame",D:"Calls the base class implementation of ItemPostFrame",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"InactiveItemPreFrame",D:"Calls the base class implementation of InactiveItemPreFrame",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"InactiveItemPostFrame",D:"Calls the base class implementation of InactiveItemPostFrame",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Kill",D:"Calls the base class implementation of Kill",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"AttachToPlayer",D:"Calls the base class implementation of AttachToPlayer",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"PrimaryAmmoIndex",D:"Calls the base class implementation of PrimaryAmmoIndex",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"SecondaryAmmoIndex",D:"Calls the base class implementation of SecondaryAmmoIndex",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"UpdateClientData",D:"Calls the base class implementation of UpdateClientData",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"GetRespawnTime",D:"Calls the base class implementation of GetRespawnTime",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"DropItem",D:"Calls the base class implementation of DropItem",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"CanHaveDuplicates",D:"Calls the base class implementation of CanHaveDuplicates",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ExtractAmmo",D:"Calls the base class implementation of ExtractAmmo",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"AddWeapon",D:"Calls the base class implementation of AddWeapon",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"PlayEmptySound",D:"Calls the base class implementation of PlayEmptySound",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ResetEmptySound",D:"Calls the base class implementation of ResetEmptySound",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"SendWeaponAnim",D:"Calls the base class implementation of SendWeaponAnim",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"BulletAccuracy",D:"Calls the base class implementation of BulletAccuracy",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"IsUseable",D:"Calls the base class implementation of IsUseable",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"PrimaryAttack",D:"Calls the base class implementation of PrimaryAttack",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"SecondaryAttack",D:"Calls the base class implementation of SecondaryAttack",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"TertiaryAttack",D:"Calls the base class implementation of TertiaryAttack",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"Reload",D:"Calls the base class implementation of Reload",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"FinishReload",D:"Calls the base class implementation of FinishReload",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ShouldReload",D:"Calls the base class implementation of ShouldReload",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"WeaponIdle",D:"Calls the base class implementation of WeaponIdle",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"RetireWeapon",D:"Calls the base class implementation of RetireWeapon",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"ShouldWeaponIdle",D:"Calls the base class implementation of ShouldWeaponIdle",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"UseDecrement",D:"Calls the base class implementation of UseDecrement",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"BurstSupplement",D:"Calls the base class implementation of BurstSupplement",W:"BasePlayerWeapon",C:"BasePlayerWeapon",J:1},{P:"BaseTank",D:"Baseclass for CBaseTank.\nAllows calling of the base implementation of certain methods.",W:"BaseTank",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"BaseTank",C:"BaseTank",J:1},{P:"KeyValue",D:"Calls the base class implementation of KeyValue",W:"BaseTank",C:"BaseTank",J:1},{P:"Precache",D:"Calls the base class implementation of Precache",W:"BaseTank",C:"BaseTank",J:1},{P:"PreSpawn",D:"Calls the base class implementation of PreSpawn",W:"BaseTank",C:"BaseTank",J:1},{P:"Spawn",D:"Calls the base class implementation of Spawn",W:"BaseTank",C:"BaseTank",J:1},{P:"PostSpawn",D:"Calls the base class implementation of PostSpawn",W:"BaseTank",C:"BaseTank",J:1},{P:"Think",D:"Calls the base class implementation of Think",W:"BaseTank",C:"BaseTank",J:1},{P:"Touch",D:"Calls the base class implementation of Touch",W:"BaseTank",C:"BaseTank",J:1},{P:"Use",D:"Calls the base class implementation of Use",W:"BaseTank",C:"BaseTank",J:1},{P:"Blocked",D:"Calls the base class implementation of Blocked",W:"BaseTank",C:"BaseTank",J:1},{P:"UpdateOnRemove",D:"Calls the base class implementation of UpdateOnRemove",W:"BaseTank",C:"BaseTank",J:1},{P:"ObjectCaps",D:"Calls the base class implementation of ObjectCaps",W:"BaseTank",C:"BaseTank",J:1},{P:"TraceAttack",D:"Calls the base class implementation of TraceAttack",W:"BaseTank",C:"BaseTank",J:1},{P:"TakeDamage",D:"Calls the base class implementation of TakeDamage",W:"BaseTank",C:"BaseTank",J:1},{P:"TakeHealth",D:"Calls the base class implementation of TakeHealth",W:"BaseTank",C:"BaseTank",J:1},{P:"TakeArmor",D:"Calls the base class implementation of TakeArmor",W:"BaseTank",C:"BaseTank",J:1},{P:"Killed",D:"Calls the base class implementation of Killed",W:"BaseTank",C:"BaseTank",J:1},{P:"BloodColor",D:"Calls the base class implementation of BloodColor",W:"BaseTank",C:"BaseTank",J:1},{P:"TraceBleed",D:"Calls the base class implementation of TraceBleed",W:"BaseTank",C:"BaseTank",J:1},{P:"GetPointsForDamage",D:"Calls the base class implementation of GetPointsForDamage",W:"BaseTank",C:"BaseTank",J:1},{P:"IsRevivable",D:"Calls the base class implementation of IsRevivable",W:"BaseTank",C:"BaseTank",J:1},{P:"BeginRevive",D:"Calls the base class implementation of BeginRevive",W:"BaseTank",C:"BaseTank",J:1},{P:"EndRevive",D:"Calls the base class implementation of EndRevive",W:"BaseTank",C:"BaseTank",J:1},{P:"Fire",D:"Calls the base class implementation of Fire",W:"BaseTank",C:"BaseTank",J:1},{P:"UpdateTargetPosition",D:"Calls the base class implementation of UpdateTargetPosition",W:"BaseTank",C:"BaseTank",J:1},{P:"BulletCount",D:"Calls the base class implementation of BulletCount",W:"BaseTank",C:"BaseTank",J:1},{P:"BLOB",D:"Binary Large OBject class used for storing arbitrary amounts of binary data.",W:"BLOB",C:"Class"},{P:"HasAllocatedBuffer",D:"Returns whether this instance has allocated a buffer.",W:"BLOB",C:"BLOB",J:1},{P:"GetSizeInBytes",D:"Gets the size of this BLOB, in bytes.",W:"BLOB",C:"BLOB",J:1},{P:"GetReadOffset",D:"Gets the read offset, in bytes.",W:"BLOB",C:"BLOB",J:1},{P:"ReadReachedEnd",D:"Returns whether the last read operation reached the end of data that was written to this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadSizeValid",D:"Returns whether the given amount of bytes can be read from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"GetWriteOffset",D:"Gets the write offset, in bytes. This is the number of bytes written to this buffer.",W:"BLOB",C:"BLOB",J:1},{P:"CanWriteSize",D:"Returns whether the given amount of bytes can be written to this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"GetWriteBytesLeft",D:"Gets the number of bytes left that can be written to. This may change if a write operation causes the buffer to be resized.",W:"BLOB",C:"BLOB",J:1},{P:"CanResize",D:"Returns whether this BLOB is allowed to resize its buffer.",W:"BLOB",C:"BLOB",J:1},{P:"SetCanResize",D:"Sets whether this BLOB is allowed to resize its buffer.",W:"BLOB",C:"BLOB",J:1},{P:"ReadInt8",D:"Reads an int8 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadInt16",D:"Reads an int16 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadInt32",D:"Reads an int32 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadInt64",D:"Reads an int64 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadUInt8",D:"Reads a uint8 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadUInt16",D:"Reads a uint16 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadUInt32",D:"Reads a uint32 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadUInt64",D:"Reads a uint64 from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadFloat",D:"Reads a float from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadDouble",D:"Reads a double from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"ReadString",D:"Reads a fixed length string from this BLOB.",W:"BLOB",C:"BLOB",J:1},{P:"WriteBytes",D:"Writes a given value a number of bytes to this BLOB. Returns true if the write succeeded.",W:"BLOB",C:"BLOB",J:1},{P:"WriteBytesUntil",D:"Writes a given value until the given end offset to this BLOB. Returns true if the write succeeded.",W:"BLOB",C:"BLOB",J:1},{P:"Write",D:"Writes an int8 to this BLOB. Returns true if the write succeeded.",W:"BLOB",C:"BLOB",J:1},{P:"Resize",D:"Resizes this BLOB. Data may be lost because of this.",W:"BLOB",C:"BLOB",J:1},{P:"Reserve",D:"Reserves the given amount of space, if needed.",W:"BLOB",C:"BLOB",J:1},{P:"ShrinkToFit",D:"Shrinks this BLOB to fit the data that was written to it.",W:"BLOB",C:"BLOB",J:1},{P:"Clear",D:"Clears this BLOB of all data and allocated memory. All flags are reset to their default values.",W:"BLOB",C:"BLOB",J:1},{P:"CActivityMap",D:"Activity map",W:"CActivityMap",C:"Class"},{P:"GetName",D:"Gets the name of the given activity",W:"CActivityMap",C:"CActivityMap",J:1},{P:"CAdminControl",D:"Admin control panel.",W:"CAdminControl",C:"Class"},{P:"SetReservedSlots",D:"Sets the number of reserved slots.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"GetReservedSlots",D:"Gets the number of reserved slots.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"KillPlayer",D:"Kills the given player. Killing player must have admin rights. Target player cannot be an admin.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"KickPlayer",D:"Kicks the given player. Kicking player must have admin rights. Target player cannot be an admin.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"BanPlayer",D:"Bans the given player. Banning player must have admin rights Target player cannot be an admin.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"SlapPlayer",D:"Slaps the given player. Slapping player must have admin rights. Target player cannot be an admin.",W:"CAdminControl",C:"CAdminControl",J:1},{P:"Callable",D:"Reflection base class for callable objects.",W:"Callable",C:"Class"},{P:"GetNamespace",D:"Gets this instance's namespace.",W:"Callable",C:"Callable",J:1},{P:"GetName",D:"Gets this instance's name.",W:"Callable",C:"Callable",J:1},{P:"Equals",D:"Returns whether the given callable type is identical to this one.",W:"Callable",C:"Callable",J:1},{P:"IsCompatible",D:"Returns whether the given object type is compatible with this one.",W:"Callable",C:"Callable",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"Callable",C:"Callable",J:1},{P:"CAngelscript",D:"Angelscript debugging functions",W:"CAngelscript",C:"Class"},{P:"GetAngelscriptDescription",D:"Returns a brief description of Angelscript",W:"CAngelscript",C:"CAngelscript",J:1},{P:"GetAngelscriptVersionString",D:"Gets the current version of Angelscript as a string",W:"CAngelscript",C:"CAngelscript",J:1},{P:"GetAngelscriptVersion",D:"Gets the current version of Angelscript",W:"CAngelscript",C:"CAngelscript",J:1},{P:"GetMajorVersion",D:"Gets the major version of the Angelscript Sven Co-op implementation",W:"CAngelscript",C:"CAngelscript",J:1},{P:"GetMinorVersion",D:"Gets the minor version of the Angelscript Sven Co-op implementation",W:"CAngelscript",C:"CAngelscript",J:1},{P:"CBaseAnimating",D:"All entities that can animate derive from this",W:"CBaseAnimating",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"pev",D:"Entity variables",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBaseAnimating",C:"CBaseAnimating",J:1},{P:"CBaseButton",D:"Button entity base class",W:"CBaseButton",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseButton",C:"CBaseButton",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseButton",C:"CBaseButton",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonActivate",D:"Activates the button.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonTouch",D:"Button Touch function.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonSpark",D:"Makes the button start sparking. The button will spark randomly after this.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"TriggerAndWait",D:"Button has reached the \"in/up\" position.  Activate its \"targets\", and pause before \"popping out\".",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonReturn",D:"Starts the button moving \"out/down\"",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonBackHome",D:"Button has returned to start state.  Quiesce it.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonUse",D:"Button Use function.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"ButtonResponseToTouch",D:"Gets the button response to a touch event.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"pev",D:"Entity variables",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseButton",C:"CBaseButton",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flTWidth",D:"For plats.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flTLength",D:"For plats.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_flHeight",D:"Height.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fStayPushed",D:"button stays pushed in until touched again?",W:"CBaseButton",C:"CBaseButton",J:1},{P:"m_fRotating",D:"a rotating button?  default is a sliding button.",W:"CBaseButton",C:"CBaseButton",J:1},{P:"CBaseDelay",D:"All entities that can trigger with a delay derive from this",W:"CBaseDelay",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"pev",D:"Entity variables",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseDelay",C:"CBaseDelay",J:1},{P:"CBaseDoor",D:"Door entity base class",W:"CBaseDoor",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DoorTouch",D:"Door touch function.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DoorGoUp",D:"Makes the door go up.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DoorGoDown",D:"Makes the door go down.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"DoorChangeDirection",D:"If the door is moving, changes the movement direction. Returns true if the door was moving.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"pev",D:"Entity variables",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flTWidth",D:"For plats.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flTLength",D:"For plats.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_flHeight",D:"Height.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CBaseDoor",C:"CBaseDoor",J:1},{P:"CBaseEntity",D:"All entities derive from this",W:"CBaseEntity",C:"Class"},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"pev",D:"Entity variables",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseEntity",C:"CBaseEntity",J:1},{P:"CBaseMonster",D:"Monster entity base class",W:"CBaseMonster",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_Route",D:"Positions of movement. Index must be between 0 and ROUTE_SIZE",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_rgbTimeBasedDamage",D:"time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MonsterUse",D:"Will make a monster angry at whomever activated it.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Look",D:"Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker's m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent's m_pLink field)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"RunAI",D:"Runs this monster's AI.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Listen",D:"Listens for anything that is within audible distance.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShouldFadeOnDeath",D:"Returns whether this monster should fade on death.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ChangeYaw",D:"turns a monster towards its ideal_yaw",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"VecToYaw",D:"turns a directional vector into a yaw value that points down that vector.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FlYawDiff",D:"returns the difference ( in degrees ) between monster's current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DamageForce",D:"Returns the amount of force applied to this monster when the given amount of damage is done.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetupFriendly",D:"use this overridden to make some other friendly monsters",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MonsterInit",D:"Initializes the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MonsterInitDead",D:"Call after animation/pose is set up",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BecomeDead",D:"Makes the monster become dead",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Revive",D:"Revives the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StartMonster",D:"Starts the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"BestVisibleEnemy",D:"finds best visible enemy for attack",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FInViewCone",D:"see if pEntity is in monster's view cone",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckLocalMove",D:"finds best visible enemy for attack",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Move",D:"Starts the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MoveExecute",D:"Starts the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShouldAdvanceRoute",D:"Returns whether this monster should advance its route",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetStoppedActivity",D:"Gets the stopped activity",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Stop",D:"Stops this monster moving",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StopAnimation",D:"This will stop animation until you call ResetSequenceInfo() at some point in the future",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckRangeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckRangeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckRangeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckRangeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckMeleeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckMeleeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckMeleeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckMeleeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckTankUsage",D:"Checks whether the monster can use a func_tank. Return true if possible.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FHaveSchedule",D:"Returns whether this monster has a schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FScheduleValid",D:"Returns whether this monster's schedule is valid.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ClearSchedule",D:"Clears this monster's schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FScheduleDone",D:"Returns whether this monster's schedule is done.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ChangeSchedule",D:"Changes this monster's schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"NextScheduledTask",D:"Moves to the next scheduled task.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ScheduleInList",D:"Returns the schedule with name szName if it's in the list, NULL otherwise.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ScheduleFromName",D:"Returns the schedule with name szName if it exists, NULL otherwise.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MaintainSchedule",D:"Maintains the monster's schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StartTask",D:"Starts the given task.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"RunTask",D:"Runs the given task.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetScheduleOfType",D:"Gets one of the available schedules of the given type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetSchedule",D:"Gets the current schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ScheduleChange",D:"Called after the monster's schedule changes.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CanPlaySequence",D:"Returns whether this monster can play its sequence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CanPlaySentence",D:"Returns whether this monster can play its sentence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PlaySentence",D:"Plays the given sentence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PlayScriptedSentence",D:"Plays the given scripted sentence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SentenceStop",D:"Stops playing its current sentence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetTask",D:"Gets the current task.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetIdealState",D:"Gets the ideal monster state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetActivity",D:"Sets the current activity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetGaitActivity",D:"Sets the current gait activity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetSequenceByName",D:"Sets the current sequence by name.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetState",D:"Sets the current monster state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ReportAIState",D:"Reports the AI state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckAttacks",D:"Check attacks to the given enemy at the given distance.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckAttacks_Move",D:"Check attacks to the given enemy at the given distance while moving.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckAttacksFromPosition",D:"Check whether attacks are possible from the given position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckEnemy",D:"part of the Condition collection process, gets and stores data and conditions pertaining to a monster's enemy.\nReturns true if Enemy LKP was updated.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PushEnemy",D:"Remember the last few enemies, always remember the player.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PopEnemy",D:"Try remembering the last few enemies.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FGetNodeRoute",D:"tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists ).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TestFGetNodeRoute",D:"TEST FGetNodeRoute.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TaskComplete",D:"Sets the task status to complete.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MovementComplete",D:"Called when movement has completed.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TaskFail",D:"Sets the condition bit for a failed task.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TaskBegin",D:"Sets the task status to running.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TaskIsRunning",D:"Returns whether a task is running.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"TaskIsComplete",D:"Returns whether the task is complete.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MovementIsComplete",D:"Returns whether movement is complete.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IScheduleFlags",D:"Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule's Interrupt mask.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MakeIdealYaw",D:"gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster's\nideal_yaw.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetYawSpeed",D:"Allows different yaw_speeds for each activity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"RouteClassify",D:"Returns the MOVEGOAL for the given move flag.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CheckAttacker",D:"Determine if we should ignore damage.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"SetConditions",D:"Sets AI conditions.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ClearConditions",D:"Clears AI conditions.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasConditions",D:"Returns whether this monster has any of the given AI conditions.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasAllConditions",D:"Returns whether this monster has all of the given AI conditions.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PBestSound",D:"Returns a pointer to the sound the monster should react to.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FShouldEat",D:"Returns whether this monster should eat.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Eat",D:"Make the monster 'full' for a while.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FCheckAITrigger",D:"Checks and, if necessary, fires the monster's trigger target.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"NoFriendlyFire",D:"Returns whether attacking at this time would result in friendly fire",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"NoFriendlyFireToPos",D:"Returns whether attacking the target location at this time would result in friendly fire",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetEnemy",D:"Tries to find the best suitable enemy for this monster.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GibMonster",D:"Gibs the monster.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShouldGibMonster",D:"Returns whether the monster should be gibbed given the gib type.\nSee GIB enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CallGibMonster",D:"Determines whether to gib or fade this monster, and acts accordingly.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasHumanGibs",D:"Returns whether this monster has human gibs.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasAlienGibs",D:"Returns whether this monster has alien gibs.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FadeMonster",D:"Fades this monster.\nNote: does not kill the monster.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShootAtEnemy",D:"Shoots at the specified location.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"GetGunPosition",D:"",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DeathSound",D:"Plays this monster's death sound.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"AlertSound",D:"Plays this monster's alert sound.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IdleSound",D:"Plays this monster's idle sound.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"PainSound",D:"Plays this monster's pain sound.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StartPlayerFollowing",D:"Starts following its target.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"StopPlayerFollowing",D:"Stops following its target.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Remember",D:"Makes this monster remember the given memories.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"Forget",D:"Makes this monster forget the given memories.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasMemory",D:"Returns whether this monster remembers any of the given memories.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"HasAllMemories",D:"Returns whether this monster remembers all of the given memories.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ExitScriptedSequence",D:"Exits the scripted sequence this monster is currently in, if any.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CineCleanup",D:"Cleans up after a cinematic event.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"DropItem",D:"Drops the given item from the given position at the given angle.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ShockGlowEffect",D:"Turns the shock glow effect on or off.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"FollowerPlayerUse",D:"Use method for following players (set only if friendly)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"IsPlayerFollowing",D:"Returns whether this monster is following a player.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CanPlayerFollow",D:"Returns whether this monster can follow a player.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_szTextureName",D:"Current texture name we're standing on.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"MedicCallSound",D:"Medic call sound.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"get_m_pInventory",D:"The inventory items this monster has",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ClearEnemyList",D:"Clears this monster's list of enemies",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ApplyEffects",D:"Re-calculate compounded effect modifiers and apply to the monster",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"ResetEffects",D:"Reset all effect modifiers",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"pev",D:"Entity variables",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flTWidth",D:"For plats.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flTLength",D:"For plats.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flHeight",D:"Height.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hEnemy",D:"the entity that the monster is fighting.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hTargetEnt",D:"the entity that the monster is trying to reach.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hTargetTank",D:"Target tank to control.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flFieldOfView",D:"width of monster's field of view ( dot product ).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flWaitFinished",D:"if we're told to wait, this is the time that the wait will be over.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flMoveWaitFinished",D:"if we're told to wait before moving, this is the time that the wait will be over.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_Activity",D:"what the monster is doing (animation).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_IdealActivity",D:"monster should switch to this activity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_GaitActivity",D:"gaitsequence.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_LastHitGroup",D:"the last body region that took damage.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_MonsterState",D:"monster's current state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_IdealMonsterState",D:"monster should change to this state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iTaskStatus",D:"Task status.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_pSchedule",D:"Current schedule.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_pScheduleSaved",D:"For land_on_ground schedules (remember last schedule and continue).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iScheduleIndex",D:"Schedule index.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_movementGoal",D:"Goal that defines route.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iRouteIndex",D:"Index into m_Route[].",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_moveWaitTime",D:"How long I should wait for something to move.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_moveradius",D:"Minimum radius.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecMoveGoal",D:"Kept around for node graph moves, so we know our ultimate goal.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_movementActivity",D:"When moving, set this activity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iAudibleList",D:"first index of a linked list of sounds that the monster can hear.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_afSoundTypes",D:"Sound types that can be heard.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecLastPosition",D:"monster sometimes wants to return to where it started after an operation..",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iHintNode",D:"this is the hint node that the monster is moving towards or performing active idle on..",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_afMemory",D:"Monster memory.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_bloodColor",D:"color of blood particles.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iMaxHealth",D:"keeps track of monster's maximum health value (for re-healing, etc).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecEnemyLKP",D:"last known position of enemy. (enemy's origin).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_cAmmoLoaded",D:"how much ammo is in the weapon (used to trigger reload anim sequences).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_afCapability",D:"tells us what a monster can/can't do.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_afMoveShootCap",D:"tells us what a monster can/can't do, while moving.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flNextAttack",D:"cannot attack again until this time.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_bitsDamageType",D:"what types of damage has monster (player) taken.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_lastDamageAmount",D:"how much damage did monster (player) last take.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_tbdPrev",D:"Time-based damage timer.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"pevTimeBasedInflictor",D:"Time based damage inflictor.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_failSchedule",D:"Schedule type to choose if current schedule fails.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flHungryTime",D:"Time based damage inflictor.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flDistTooFar",D:"if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flDistLook",D:"distance monster sees (Default 2048).",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iTriggerCondition",D:"for scripted AI, this is the condition that will cause the activation of the monster's TriggerTarget.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iszTriggerTarget",D:"Name of target that should be fired.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_HackedGunPos",D:"HACK until we can query end of gun.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_scriptState",D:"internal cinematic state.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hCine",D:"Cinematic entity.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hCineBlocker",D:"Entity that is blocking cinematic execution.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_useTime",D:"Don't allow +USE until this time.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_FormattedName",D:"The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\".",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_chTextureType",D:"Current texture type.\nSee TextureType enum.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_fCanFearCreatures",D:"Whether this monster can fear creatures.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flAutomaticAttackTime",D:"How long an npc will attempt to fire full auto.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flFallVelocity",D:"Current fall speed.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_hGuardEnt",D:"Monster will guard this entity and turn down follow requests.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iszGuardEntName",D:"Guard entity name.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_vecEffectGlowColor",D:"Glow shell.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iEffectBlockWeapons",D:"Monster can't use weapons.",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iEffectInvulnerable",D:"is invulnerable (god mode)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iEffectInvisible",D:"is invisible (render + non-targetable)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_iEffectNonSolid",D:"is non-solid",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flEffectRespiration",D:"Extra/less breathing time underwater in seconds",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flEffectGravity",D:"Gravity modifier (%)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flEffectFriction",D:"Movement friction modifier (%)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flEffectSpeed",D:"Movement speed modifier (%)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"m_flEffectDamage",D:"Damage modifier (%)",W:"CBaseMonster",C:"CBaseMonster",J:1},{P:"CBasePlayer",D:"Player entity base class",W:"CBasePlayer",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_Route",D:"Positions of movement. Index must be between 0 and ROUTE_SIZE",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_rgbTimeBasedDamage",D:"time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MonsterUse",D:"Will make a monster angry at whomever activated it.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Look",D:"Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker's m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent's m_pLink field)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RunAI",D:"Runs this monster's AI.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Listen",D:"Listens for anything that is within audible distance.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShouldFadeOnDeath",D:"Returns whether this monster should fade on death.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ChangeYaw",D:"turns a monster towards its ideal_yaw",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"VecToYaw",D:"turns a directional vector into a yaw value that points down that vector.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FlYawDiff",D:"returns the difference ( in degrees ) between monster's current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DamageForce",D:"Returns the amount of force applied to this monster when the given amount of damage is done.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetupFriendly",D:"use this overridden to make some other friendly monsters",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MonsterInit",D:"Initializes the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MonsterInitDead",D:"Call after animation/pose is set up",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BecomeDead",D:"Makes the monster become dead",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Revive",D:"Revives the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartMonster",D:"Starts the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BestVisibleEnemy",D:"finds best visible enemy for attack",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FInViewCone",D:"see if pEntity is in monster's view cone",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckLocalMove",D:"finds best visible enemy for attack",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Move",D:"Starts the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MoveExecute",D:"Starts the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShouldAdvanceRoute",D:"Returns whether this monster should advance its route",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetStoppedActivity",D:"Gets the stopped activity",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Stop",D:"Stops this monster moving",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StopAnimation",D:"This will stop animation until you call ResetSequenceInfo() at some point in the future",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckRangeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckRangeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckRangeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckRangeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckMeleeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckMeleeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckMeleeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckMeleeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckTankUsage",D:"Checks whether the monster can use a func_tank. Return true if possible.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FHaveSchedule",D:"Returns whether this monster has a schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FScheduleValid",D:"Returns whether this monster's schedule is valid.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ClearSchedule",D:"Clears this monster's schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FScheduleDone",D:"Returns whether this monster's schedule is done.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ChangeSchedule",D:"Changes this monster's schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"NextScheduledTask",D:"Moves to the next scheduled task.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ScheduleInList",D:"Returns the schedule with name szName if it's in the list, NULL otherwise.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ScheduleFromName",D:"Returns the schedule with name szName if it exists, NULL otherwise.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MaintainSchedule",D:"Maintains the monster's schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartTask",D:"Starts the given task.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RunTask",D:"Runs the given task.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetScheduleOfType",D:"Gets one of the available schedules of the given type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetSchedule",D:"Gets the current schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ScheduleChange",D:"Called after the monster's schedule changes.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CanPlaySequence",D:"Returns whether this monster can play its sequence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CanPlaySentence",D:"Returns whether this monster can play its sentence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PlaySentence",D:"Plays the given sentence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PlayScriptedSentence",D:"Plays the given scripted sentence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SentenceStop",D:"Stops playing its current sentence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetTask",D:"Gets the current task.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetIdealState",D:"Gets the ideal monster state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetActivity",D:"Sets the current activity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetGaitActivity",D:"Sets the current gait activity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetSequenceByName",D:"Sets the current sequence by name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetState",D:"Sets the current monster state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ReportAIState",D:"Reports the AI state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckAttacks",D:"Check attacks to the given enemy at the given distance.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckAttacks_Move",D:"Check attacks to the given enemy at the given distance while moving.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckAttacksFromPosition",D:"Check whether attacks are possible from the given position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckEnemy",D:"part of the Condition collection process, gets and stores data and conditions pertaining to a monster's enemy.\nReturns true if Enemy LKP was updated.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PushEnemy",D:"Remember the last few enemies, always remember the player.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PopEnemy",D:"Try remembering the last few enemies.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FGetNodeRoute",D:"tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists ).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TestFGetNodeRoute",D:"TEST FGetNodeRoute.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TaskComplete",D:"Sets the task status to complete.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MovementComplete",D:"Called when movement has completed.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TaskFail",D:"Sets the condition bit for a failed task.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TaskBegin",D:"Sets the task status to running.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TaskIsRunning",D:"Returns whether a task is running.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"TaskIsComplete",D:"Returns whether the task is complete.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MovementIsComplete",D:"Returns whether movement is complete.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IScheduleFlags",D:"Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule's Interrupt mask.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MakeIdealYaw",D:"gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster's\nideal_yaw.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetYawSpeed",D:"Allows different yaw_speeds for each activity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RouteClassify",D:"Returns the MOVEGOAL for the given move flag.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckAttacker",D:"Determine if we should ignore damage.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetConditions",D:"Sets AI conditions.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ClearConditions",D:"Clears AI conditions.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasConditions",D:"Returns whether this monster has any of the given AI conditions.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasAllConditions",D:"Returns whether this monster has all of the given AI conditions.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PBestSound",D:"Returns a pointer to the sound the monster should react to.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FShouldEat",D:"Returns whether this monster should eat.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Eat",D:"Make the monster 'full' for a while.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FCheckAITrigger",D:"Checks and, if necessary, fires the monster's trigger target.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"NoFriendlyFire",D:"Returns whether attacking at this time would result in friendly fire",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"NoFriendlyFireToPos",D:"Returns whether attacking the target location at this time would result in friendly fire",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetEnemy",D:"Tries to find the best suitable enemy for this monster.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GibMonster",D:"Gibs the monster.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShouldGibMonster",D:"Returns whether the monster should be gibbed given the gib type.\nSee GIB enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CallGibMonster",D:"Determines whether to gib or fade this monster, and acts accordingly.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasHumanGibs",D:"Returns whether this monster has human gibs.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasAlienGibs",D:"Returns whether this monster has alien gibs.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FadeMonster",D:"Fades this monster.\nNote: does not kill the monster.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShootAtEnemy",D:"Shoots at the specified location.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetGunPosition",D:"",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DeathSound",D:"Plays this monster's death sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AlertSound",D:"Plays this monster's alert sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IdleSound",D:"Plays this monster's idle sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PainSound",D:"Plays this monster's pain sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartPlayerFollowing",D:"Starts following its target.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StopPlayerFollowing",D:"Stops following its target.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Remember",D:"Makes this monster remember the given memories.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Forget",D:"Makes this monster forget the given memories.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasMemory",D:"Returns whether this monster remembers any of the given memories.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasAllMemories",D:"Returns whether this monster remembers all of the given memories.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ExitScriptedSequence",D:"Exits the scripted sequence this monster is currently in, if any.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CineCleanup",D:"Cleans up after a cinematic event.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DropItem",D:"Drops the given item from the given position at the given angle.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShockGlowEffect",D:"Turns the shock glow effect on or off.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FollowerPlayerUse",D:"Use method for following players (set only if friendly)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsPlayerFollowing",D:"Returns whether this monster is following a player.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CanPlayerFollow",D:"Returns whether this monster can follow a player.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_szTextureName",D:"Current texture name we're standing on.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"MedicCallSound",D:"Medic call sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"get_m_pInventory",D:"The inventory items this monster has",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ClearEnemyList",D:"Clears this monster's list of enemies",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ApplyEffects",D:"Re-calculate compounded effect modifiers and apply to the monster",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetEffects",D:"Reset all effect modifiers",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_rgpPlayerItems",D:"Get player weapons. Index must be between 0 and MAX_ITEM_TYPES.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_rgAmmo",D:"Get player ammo amount.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Jump",D:"Makes the player jump.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"Duck",D:"Makes the player duck.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsConnected",D:"Returns whether this player is connected.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PackDeadPlayerItems",D:"Packs player weapons into a weapon box if possible.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RemoveAllItems",D:"Removes all items from the player's inventory.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SwitchWeapon",D:"Switches weapons to the given item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HolsterWeapon",D:"Holster weapon.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DeployWeapon",D:"Deploy weapon.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"BlockWeapons",D:"Hides active weapon and blocks weapon selection.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"UnblockWeapons",D:"Shows active weapon and unblocks weapon selection.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetWeaponsBlocked",D:"Returns whether the weapons are currently blocked.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetItemPickupTimes",D:"Sets all item pickup times the given absolute time.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"IsOnLadder",D:"Returns whether the player is on a ladder.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FlashlightIsOn",D:"Returns whether the flashlight is on.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FlashlightTurnOn",D:"Turns on the flashlight.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"FlashlightTurnOff",D:"Turns off the flashlight.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetAnimation",D:"Set the player's animation.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"get_m_szAnimExtension",D:"Gets the current animation extension.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"set_m_szAnimExtension",D:"Sets the current animation extension.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheatImpulseCommands",D:"Triggers the given impulse command.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartDeathCam",D:"Starts the death camera.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CanSpawn",D:"Returns whether this player can spawn.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"StartPlayerDeathView",D:"Sets the player's view to that of a dead person.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShowForcedRespawnMessage",D:"Shows the forced respawn message.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetObserver",D:"Gets the Observer instance that represents this player.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"DropAmmo",D:"Drops ammo used by the named item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasPlayerItem",D:"Returns whether this player has the given item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasNamedPlayerItem",D:"Returns the given item, or null if this player has no item by that name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasWeapons",D:"Returns whether this player has any weapons.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SelectPrevItem",D:"Selects the previous item relative to the given item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SelectNextItem",D:"Selects the next item relative to the given item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SelectLastItem",D:"Selects the last active item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SelectItem",D:"Selects the item with the given name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GiveNamedItem",D:"Gives this player the item with the given name.\nFlags are spawnflags passed to the item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"EnableControl",D:"Sets whether the player has control.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"PlayerUse",D:"Triggers the player's use behavior.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CheckSuitUpdate",D:"Check for suit update messages.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetSuitUpdate",D:"Set a suit update.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"AmmoInventory",D:"Returns the amount of ammo currently in inventory of the given ammo index.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetAutoaimVector",D:"Gets the autoaim vector for the given delta.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetMaxAmmo",D:"Gets the maximum ammo setting for this player for the ammo at the given index. Returns -1 if no ammo setting is present.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetMaxAmmo",D:"Sets the maximum ammo setting for this player for the ammo at the given index. Value must be >= 0.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetMaxAmmoToDefault",D:"Resets the ammo setting for this player at the given index to its default value.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetAllMaxAmmoToDefault",D:"Resets the ammo settings for this player for all ammo to their default values.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RemoveExcessAmmo",D:"Clamps this player's ammo at the given inex to the range 0 - MAX_AMMO.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"RemoveAllExcessAmmo",D:"Clamps all the player's ammo to their maximum amounts.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"HasSuit",D:"Returns whether the player has an HEV suit.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetHasSuit",D:"Sets whether the player has an HEV suit.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetViewMode",D:"Sets the player's view mode",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ShowOverheadSprite",D:"Creates a sprite above the player's head",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetVModelPos",D:"Set custom viewmodel position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetVModelPos",D:"Reset viewmodel position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetMaxSpeed",D:"Set player persistent max speed. default: sv_maxspeed",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetMaxSpeedOverride",D:"Override players max speed (temporarily) -1 will restore",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetMaxSpeed",D:"Get the player persistent max speed. default: sv_maxspeed",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetMaxSpeedOverride",D:"Get the player max speed override (-1 = not overriding)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"ResetOverriddenPlayerModel",D:"Reset an overriden player model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetOverriddenPlayerModel",D:"Set an overriden player model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SendScoreInfo",D:"Refresh the player's score information with one or all players.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"SetCheat",D:"Set a player's cheat bit. (Requires cheat permission. If requested by self a permission message will be shown/logged.)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetCheat",D:"Get a player's cheat bit.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"GetCheats",D:"Get a player's cheat bits.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"pev",D:"Entity variables",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flTWidth",D:"For plats.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flTLength",D:"For plats.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flHeight",D:"Height.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hEnemy",D:"the entity that the monster is fighting.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hTargetEnt",D:"the entity that the monster is trying to reach.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hTargetTank",D:"Target tank to control.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flFieldOfView",D:"width of monster's field of view ( dot product ).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flWaitFinished",D:"if we're told to wait, this is the time that the wait will be over.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flMoveWaitFinished",D:"if we're told to wait before moving, this is the time that the wait will be over.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_Activity",D:"what the monster is doing (animation).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_IdealActivity",D:"monster should switch to this activity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_GaitActivity",D:"gaitsequence.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_LastHitGroup",D:"the last body region that took damage.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_MonsterState",D:"monster's current state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_IdealMonsterState",D:"monster should change to this state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iTaskStatus",D:"Task status.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_pSchedule",D:"Current schedule.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_pScheduleSaved",D:"For land_on_ground schedules (remember last schedule and continue).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iScheduleIndex",D:"Schedule index.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_movementGoal",D:"Goal that defines route.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iRouteIndex",D:"Index into m_Route[].",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_moveWaitTime",D:"How long I should wait for something to move.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_moveradius",D:"Minimum radius.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecMoveGoal",D:"Kept around for node graph moves, so we know our ultimate goal.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_movementActivity",D:"When moving, set this activity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iAudibleList",D:"first index of a linked list of sounds that the monster can hear.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afSoundTypes",D:"Sound types that can be heard.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecLastPosition",D:"monster sometimes wants to return to where it started after an operation..",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iHintNode",D:"this is the hint node that the monster is moving towards or performing active idle on..",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afMemory",D:"Monster memory.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_bloodColor",D:"color of blood particles.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iMaxHealth",D:"keeps track of monster's maximum health value (for re-healing, etc).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecEnemyLKP",D:"last known position of enemy. (enemy's origin).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_cAmmoLoaded",D:"how much ammo is in the weapon (used to trigger reload anim sequences).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afCapability",D:"tells us what a monster can/can't do.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afMoveShootCap",D:"tells us what a monster can/can't do, while moving.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flNextAttack",D:"cannot attack again until this time.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_bitsDamageType",D:"what types of damage has monster (player) taken.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_lastDamageAmount",D:"how much damage did monster (player) last take.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_tbdPrev",D:"Time-based damage timer.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"pevTimeBasedInflictor",D:"Time based damage inflictor.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_failSchedule",D:"Schedule type to choose if current schedule fails.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flHungryTime",D:"Time based damage inflictor.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flDistTooFar",D:"if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flDistLook",D:"distance monster sees (Default 2048).",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iTriggerCondition",D:"for scripted AI, this is the condition that will cause the activation of the monster's TriggerTarget.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iszTriggerTarget",D:"Name of target that should be fired.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_HackedGunPos",D:"HACK until we can query end of gun.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_scriptState",D:"internal cinematic state.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hCine",D:"Cinematic entity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hCineBlocker",D:"Entity that is blocking cinematic execution.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_useTime",D:"Don't allow +USE until this time.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_FormattedName",D:"The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\".",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_chTextureType",D:"Current texture type.\nSee TextureType enum.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fCanFearCreatures",D:"Whether this monster can fear creatures.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flAutomaticAttackTime",D:"How long an npc will attempt to fire full auto.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flFallVelocity",D:"Current fall speed.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hGuardEnt",D:"Monster will guard this entity and turn down follow requests.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iszGuardEntName",D:"Guard entity name.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_vecEffectGlowColor",D:"Glow shell.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iEffectBlockWeapons",D:"Monster can't use weapons.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iEffectInvulnerable",D:"is invulnerable (god mode)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iEffectInvisible",D:"is invisible (render + non-targetable)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iEffectNonSolid",D:"is non-solid",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flEffectRespiration",D:"Extra/less breathing time underwater in seconds",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flEffectGravity",D:"Gravity modifier (%)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flEffectFriction",D:"Movement friction modifier (%)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flEffectSpeed",D:"Movement speed modifier (%)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flEffectDamage",D:"Damage modifier (%)",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"random_seed",D:"The player's random seed.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flNextClientCommandTime",D:"The next time this player can execute a vocal client command",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flTimeOfLastDeath",D:"Time of last death.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flRespawnDelayTime",D:"Gets added to the standard respawn delay time when killed, reset in spawn to 0.0.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hSpawnPoint",D:"Pointer for a spawn point to use.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flLastMove",D:"When did this player move or tried to move (with the IN_ keys) ?",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iWeaponVolume",D:"How loud the player's weapon is right now.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iExtraSoundTypes",D:"Additional classification for this weapon's sound.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iWeaponFlash",D:"Brightness of the weapon flash.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flStopExtraSoundTime",D:"When to stop the m_iExtraSoundTypes sounds.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iFlashBattery",D:"Player flashlight amount. 0 <= amount <= 100.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afButtonLast",D:"",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afButtonPressed",D:"",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afButtonReleased",D:"",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flPlayerFallVelocity",D:"Player fall velocity.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_afPhysicsFlags",D:"",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flSwimTime",D:"How long this player has been underwater.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_lastPlayerDamageAmount",D:"Last damage taken.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iDrownDmg",D:"Track drowning damage taken.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iDrownRestored",D:"Track drowning damage restored.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iTrain",D:"Train control position",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hTank",D:"the tank which the player is currently controlling, NULL if no tank",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fDeadTime",D:"the time at which the player died",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_fLongJump",D:"Does this player have the longjump module?",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iHideHUD",D:"The players hud weapon info is to be hidden.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iFOV",D:"Field of view.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_hActiveItem",D:"The active item.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iDeaths",D:"get player death count.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_flNextDecalTime",D:"Next time this player can spray a decal.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"m_iPlayerClass",D:"The player's class type.",W:"CBasePlayer",C:"CBasePlayer",J:1},{P:"CBasePlayerAmmo",D:"Player ammo class",W:"CBasePlayerAmmo",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"DefaultTouch",D:"Default touch",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"AddAmmo",D:"Adds ammo to the given entity.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"Materialize",D:"Makes this entity visible and tangible.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"pev",D:"Entity variables",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBasePlayerAmmo",C:"CBasePlayerAmmo",J:1},{P:"CBasePlayerItem",D:"Player item base class",W:"CBasePlayerItem",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AddToPlayer",D:"Returns true if this item wants itself added to the player's inventory.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AddDuplicate",D:"returns true if this item wants the duplicate removed from the world.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DestroyItem",D:"Think function. Destroys this item.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Collect",D:"Attempts to let pOther collect this item.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DefaultTouch",D:"Touch function. Default touch.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"ItemUse",D:"Default weapon use function.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FallThink",D:"Think function. When an item is first spawned, this think is run to determine when the object has hit the ground.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Materialize",D:"Make a weapon visible and tangible.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AttemptToMaterialize",D:"Think function. The weapon desires to become visible and tangible, if the game rules allow for it.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"RespawnItem",D:"Copy a weapon.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"FallInit",D:"Fall init.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CheckRespawn",D:"Check respawn.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetItemInfo",D:"Gets item info.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CanDeploy",D:"Returns whether this item can deploy.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Deploy",D:"Returns if deploy was successful.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CanHolster",D:"Can this weapon be put away right now?",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Holster",D:"Holsters this weapon.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"UpdateItemInfo",D:"Updates item info.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"LoadSprites",D:"Load item sprites.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"Kill",D:"Kills this item.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"AttachToPlayer",D:"Attach this item to the given player.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"PrimaryAmmoIndex",D:"Gets the primary ammo index, or -1 if this item doesn't use primary ammo.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"SecondaryAmmoIndex",D:"Gets the secondary ammo index, or -1 if this item doesn't use secondary ammo.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"UpdateClientData",D:"Updates client data.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetWeaponPtr",D:"Gets this item as a weapon. Returns null if this is not a weapon.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iItemSlot",D:"Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iItemPosition",D:"Gets the item position.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"pszAmmo1",D:"Gets the name of the primary ammo.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iMaxAmmo1",D:"Gets the primary ammo maximum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"pszAmmo2",D:"Gets the name of the secondary ammo.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iMaxAmmo2",D:"Gets the secondary ammo maximum.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"pszName",D:"Gets the name of this item.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iMaxClip",D:"Gets the max clip amount.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iWeight",D:"Gets the item weight.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"iFlags",D:"Gets the item flags.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"GetRespawnTime",D:"Gets this item's respawn time (time from pickup to respawn).",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"DropItem",D:"CBaseEntity to drop.\nBy default, this entity.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CanHaveDuplicates",D:"Can this weapon have duplicates added?",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"pev",D:"Entity variables",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_hPlayer",D:"The owning player. null if no owner.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_hNextItem",D:"Gets the next item. null if no next item.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_iId",D:"The item id.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_flLastBounce",D:"The last bounce time.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"m_bExclusiveHold",D:"If set, as long as a player has this item, the player must keep this weapon selected.No more than one item with this set can be carried at one time.",W:"CBasePlayerItem",C:"CBasePlayerItem",J:1},{P:"CBasePlayerWeapon",D:"Player Weapon entity base class",W:"CBasePlayerWeapon",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddToPlayer",D:"Returns true if this item wants itself added to the player's inventory.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddDuplicate",D:"returns true if this item wants the duplicate removed from the world.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DestroyItem",D:"Think function. Destroys this item.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Collect",D:"Attempts to let pOther collect this item.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DefaultTouch",D:"Touch function. Default touch.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ItemUse",D:"Default weapon use function.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FallThink",D:"Think function. When an item is first spawned, this think is run to determine when the object has hit the ground.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Materialize",D:"Make a weapon visible and tangible.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AttemptToMaterialize",D:"Think function. The weapon desires to become visible and tangible, if the game rules allow for it.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"RespawnItem",D:"Copy a weapon.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FallInit",D:"Fall init.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CheckRespawn",D:"Check respawn.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetItemInfo",D:"Gets item info.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CanDeploy",D:"Returns whether this item can deploy.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Deploy",D:"Returns if deploy was successful.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CanHolster",D:"Can this weapon be put away right now?",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Holster",D:"Holsters this weapon.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"UpdateItemInfo",D:"Updates item info.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"LoadSprites",D:"Load item sprites.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Kill",D:"Kills this item.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AttachToPlayer",D:"Attach this item to the given player.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"PrimaryAmmoIndex",D:"Gets the primary ammo index, or -1 if this item doesn't use primary ammo.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SecondaryAmmoIndex",D:"Gets the secondary ammo index, or -1 if this item doesn't use secondary ammo.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"UpdateClientData",D:"Updates client data.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetWeaponPtr",D:"Gets this item as a weapon. Returns null if this is not a weapon.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iItemSlot",D:"Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iItemPosition",D:"Gets the item position.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"pszAmmo1",D:"Gets the name of the primary ammo.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iMaxAmmo1",D:"Gets the primary ammo maximum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"pszAmmo2",D:"Gets the name of the secondary ammo.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iMaxAmmo2",D:"Gets the secondary ammo maximum.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"pszName",D:"Gets the name of this item.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iMaxClip",D:"Gets the max clip amount.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iWeight",D:"Gets the item weight.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"iFlags",D:"Gets the item flags.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetRespawnTime",D:"Gets this item's respawn time (time from pickup to respawn).",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DropItem",D:"CBaseEntity to drop.\nBy default, this entity.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CanHaveDuplicates",D:"Can this weapon have duplicates added?",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ExtractAmmo",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ExtractClipAmmo",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddWeapon",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddPrimaryAmmo",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"AddSecondaryAmmo",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"PlayEmptySound",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ResetEmptySound",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SendWeaponAnim",D:"skiplocal is 1 if client is predicting weapon animations",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BulletAccuracy",D:"Universal code to determine player bullet accuracy based on speed/stance",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"IsUseable",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DefaultDeploy",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"DefaultReload",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"PrimaryAttack",D:"do \"+ATTACK\"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SecondaryAttack",D:"do \"+ATTACK2\"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"TertiaryAttack",D:"do \"+ATTACK3\"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"Reload",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"FinishReload",D:"Finishes the reload for this weapon.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ShouldReload",D:"Returns whether this weapon should reload automatically.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"WeaponIdle",D:"called when no buttons pressed",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"RetireWeapon",D:"no more ammo for this gun, put it away.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ShouldWeaponIdle",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"UseDecrement",D:"Whether the client predicts this weapon",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"BurstSupplement",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetP_Model",D:"Gets the weapon's P model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetW_Model",D:"Gets the weapon's W model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"GetV_Model",D:"Gets the weapon's V model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"PrecacheCustomModels",D:"Precaches custom models if needed.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"SetFOV",D:"0 means reset to default fov",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"ChangeWeaponSkin",D:"",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"pev",D:"Entity variables",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_hPlayer",D:"The owning player. null if no owner.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_hNextItem",D:"Gets the next item. null if no next item.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iId",D:"The item id.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flLastBounce",D:"The last bounce time.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_bExclusiveHold",D:"If set, as long as a player has this item, the player must keep this weapon selected.No more than one item with this set can be carried at one time.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_bPlayEmptySound",D:"Whether to play the empty sound when the player attempts to fire",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_bFireOnEmpty",D:"True when the gun is empty and the player is still holding down the attack key(s)",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flNextPrimaryAttack",D:"soonest time ItemPostFrame will call PrimaryAttack",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flNextSecondaryAttack",D:"soonest time ItemPostFrame will call SecondaryAttack",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flNextTertiaryAttack",D:"soonest time ItemPostFrame will call TertiaryAttack",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flTimeWeaponIdle",D:"soonest time ItemPostFrame will call WeaponIdle",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iPrimaryAmmoType",D:"\"primary\" ammo index into players m_rgAmmo[]",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iSecondaryAmmoType",D:"\"secondary\" ammo index into players m_rgAmmo[]",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iClip",D:"number of shots left in the primary weapon clip, -1 it not used",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iClip2",D:"number of shots left in the secondary weapon clip, -1 it not used",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fInReload",D:"Are we in the middle of a reload",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flCustomDmg",D:"Per-entity weapon damage",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fIsAkimbo",D:"Weapon is in 'akimbo' mode",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_fInZoom",D:"Weapon is zoomed in",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_flNextBurstRound",D:"When the next burst round is to be fired",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iDefaultAmmo",D:"The amount of primary ammo you receive when you pick up this weapon as placed by a level designer.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"m_iDefaultSecAmmo",D:"The amount of secondary ammo you receive when you pick up this weapon as placed by a level designer.",W:"CBasePlayerWeapon",C:"CBasePlayerWeapon",J:1},{P:"CBaseTank",D:"Tank base class",W:"CBaseTank",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseTank",C:"CBaseTank",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseTank",C:"CBaseTank",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TrackTarget",D:"Updates the tank's angles to match either its controlling player, or its current target.Accounts for rotation speed. Will fire at the target if it's automated.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"PointAt",D:"Points the tank at the target location.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Fire",D:"Fires the tank. Barrel end position, aiming direction and attacker entvars_t must be given.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"UpdateTargetPosition",D:"Gets the updated position of the given target. Target must be valid.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StartRotSound",D:"Start playing the rotating sound, if defined.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StopRotSound",D:"Stop playing the rotating sound.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"IsActive",D:"Returns whether the tank is active. Active tanks are AI controlled.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TankActivate",D:"Activates the tank. Active tanks are AI controlled.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TankDeactivate",D:"Deactivates the tank. Active tanks are AI controlled.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"CanFire",D:"Returns whether this tank is able to fire.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"InRange",D:"Returns whether the given range is within the minimum and maximum range of this tank.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"FindTarget",D:"Finds a target to attack, if any.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"MonsterStartup",D:"Makes the given monster begin controlling this tank, if no other monster had control before.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"TankTrace",D:"Performs a traceline using a random spread based on the given spread amount.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BarrelPosition",D:"Returns the barrel position.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"BulletCount",D:"Gets the bullet count at this time.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"AdjustAnglesForBarrel",D:"Adjusts the given angles to point at the target.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StartControl",D:"Makes the given player start controlling this tank.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"StopControl",D:"If a player is controlling this tank, makes the player stop controlling the tank.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"MonsterStopControl",D:"If a monster is controlling this tank, makes the monster stop controlling the tank.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"Look",D:"Looks around itself in a box that is iDistance * 2 in width and height for possible targets and stores the list in m_pLink.\nThe target stores the next target in the list in its m_pLink, and so on.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"GetController",D:"Gets the current player controlling this tank, if any.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"pev",D:"Entity variables",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseTank",C:"CBaseTank",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_vecControllerUsePos",D:"Start origin of the player that is currently controlling this tank.\nUsed to determine when a player has moved too far to continue controlling this tank.",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_flNextAttack",D:"Next attack time",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_yawCenter",D:"\"Center\" yaw",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_yawRate",D:"Max turn rate to track targets",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_yawRange",D:"Range of turning motion (one-sided: 30 is +/- 30 degress from center)\nZero is full rotation",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_yawTolerance",D:"Tolerance angle",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_pitchCenter",D:"\"Center\" pitch",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_pitchRate",D:"Max turn rate on pitch",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_pitchRange",D:"Range of pitch motion as above",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_pitchTolerance",D:"Tolerance angle",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_fireLast",D:"Last time I fired",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_fireRate",D:"How many rounds/second",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_lastSightTime",D:"Last time I saw target",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_persist",D:"Persistence of firing (how long do I shoot when I can't see)",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_minRange",D:"Minimum range to aim/track",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_maxRange",D:"Max range to aim/track",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_barrelPos",D:"Length of the freakin barrel",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_spriteScale",D:"Scale of any sprites we shoot",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_bulletType",D:"Bullet type",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_iBulletDamage",D:"0 means use Bullet type's default damage",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_sightOrigin",D:"Last sight of target",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_spread",D:"firing spread",W:"CBaseTank",C:"CBaseTank",J:1},{P:"m_iszMaster",D:"Master entity (game_team_master or multisource)",W:"CBaseTank",C:"CBaseTank",J:1},{P:"CBaseToggle",D:"All entities that can be toggled derive from this",W:"CBaseToggle",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"pev",D:"Entity variables",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flTWidth",D:"For plats.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flTLength",D:"For plats.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_flHeight",D:"Height.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CBaseToggle",C:"CBaseToggle",J:1},{P:"CBeam",D:"Beam class",W:"CBeam",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CBeam",C:"CBeam",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CBeam",C:"CBeam",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CBeam",C:"CBeam",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CBeam",C:"CBeam",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CBeam",C:"CBeam",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CBeam",C:"CBeam",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CBeam",C:"CBeam",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CBeam",C:"CBeam",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CBeam",C:"CBeam",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CBeam",C:"CBeam",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CBeam",C:"CBeam",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CBeam",C:"CBeam",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CBeam",C:"CBeam",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CBeam",C:"CBeam",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CBeam",C:"CBeam",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CBeam",C:"CBeam",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CBeam",C:"CBeam",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CBeam",C:"CBeam",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CBeam",C:"CBeam",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CBeam",C:"CBeam",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CBeam",C:"CBeam",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CBeam",C:"CBeam",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CBeam",C:"CBeam",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CBeam",C:"CBeam",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CBeam",C:"CBeam",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CBeam",C:"CBeam",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CBeam",C:"CBeam",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CBeam",C:"CBeam",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CBeam",C:"CBeam",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CBeam",C:"CBeam",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CBeam",C:"CBeam",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CBeam",C:"CBeam",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CBeam",C:"CBeam",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CBeam",C:"CBeam",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CBeam",C:"CBeam",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CBeam",C:"CBeam",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CBeam",C:"CBeam",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CBeam",C:"CBeam",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CBeam",C:"CBeam",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CBeam",C:"CBeam",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CBeam",C:"CBeam",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CBeam",C:"CBeam",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CBeam",C:"CBeam",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CBeam",C:"CBeam",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CBeam",C:"CBeam",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CBeam",C:"CBeam",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CBeam",C:"CBeam",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CBeam",C:"CBeam",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CBeam",C:"CBeam",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CBeam",C:"CBeam",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CBeam",C:"CBeam",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CBeam",C:"CBeam",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CBeam",C:"CBeam",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CBeam",C:"CBeam",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CBeam",C:"CBeam",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CBeam",C:"CBeam",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CBeam",C:"CBeam",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CBeam",C:"CBeam",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CBeam",C:"CBeam",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CBeam",C:"CBeam",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CBeam",C:"CBeam",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CBeam",C:"CBeam",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CBeam",C:"CBeam",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CBeam",C:"CBeam",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CBeam",C:"CBeam",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CBeam",C:"CBeam",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CBeam",C:"CBeam",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CBeam",C:"CBeam",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CBeam",C:"CBeam",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CBeam",C:"CBeam",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CBeam",C:"CBeam",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CBeam",C:"CBeam",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CBeam",C:"CBeam",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CBeam",C:"CBeam",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CBeam",C:"CBeam",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CBeam",C:"CBeam",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CBeam",C:"CBeam",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CBeam",C:"CBeam",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CBeam",C:"CBeam",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CBeam",C:"CBeam",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CBeam",C:"CBeam",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CBeam",C:"CBeam",J:1},{P:"Center",D:"Returns this entity's center.",W:"CBeam",C:"CBeam",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CBeam",C:"CBeam",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CBeam",C:"CBeam",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CBeam",C:"CBeam",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CBeam",C:"CBeam",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CBeam",C:"CBeam",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CBeam",C:"CBeam",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CBeam",C:"CBeam",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CBeam",C:"CBeam",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CBeam",C:"CBeam",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CBeam",C:"CBeam",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CBeam",C:"CBeam",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CBeam",C:"CBeam",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CBeam",C:"CBeam",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CBeam",C:"CBeam",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CBeam",C:"CBeam",J:1},{P:"SetType",D:"Sets the type of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"SetFlags",D:"Sets the flags of the beam. Must be a combination of BeamFlags values, or 0.",W:"CBeam",C:"CBeam",J:1},{P:"SetStartPos",D:"Sets the starting position of the beam. Must be a beam of type BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE.",W:"CBeam",C:"CBeam",J:1},{P:"SetEndPos",D:"Sets the ending position of the beam. Must be a beam of type BEAM_POINTS or BEAM_HOSE.",W:"CBeam",C:"CBeam",J:1},{P:"SetStartEntity",D:"Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS.",W:"CBeam",C:"CBeam",J:1},{P:"SetEndEntity",D:"Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT.",W:"CBeam",C:"CBeam",J:1},{P:"SetStartAttachment",D:"Sets the start attachment of the beam. Attachment is a point on the entity's model. Must be a beam of type BEAM_ENTS. Set to 0 to disable.",W:"CBeam",C:"CBeam",J:1},{P:"SetEndAttachment",D:"Sets the end attachment of the beam. Attachment is a point on the entity's model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set to 0 to disable.",W:"CBeam",C:"CBeam",J:1},{P:"SetTexture",D:"Sets the sprite to use. The index is the one returned from CGame::PrecacheModel.",W:"CBeam",C:"CBeam",J:1},{P:"SetWidth",D:"Sets the width of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"SetNoise",D:"Sets the noise (amplitude) of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"SetColor",D:"Sets the color of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"SetBrightness",D:"Sets the brightness of the beam. Value is between 0-255.",W:"CBeam",C:"CBeam",J:1},{P:"SetFrame",D:"Sets the frame number of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"SetScrollRate",D:"Sets the scroll rate of the beam.",W:"CBeam",C:"CBeam",J:1},{P:"GetStartPos",D:"Gets the beam's starting position.",W:"CBeam",C:"CBeam",J:1},{P:"GetEndPos",D:"Gets the beam's ending position.",W:"CBeam",C:"CBeam",J:1},{P:"GetTexture",D:"Gets the beam's texture (sprite) index.",W:"CBeam",C:"CBeam",J:1},{P:"GetWidth",D:"Gets the beam's width.",W:"CBeam",C:"CBeam",J:1},{P:"GetNoise",D:"Gets the beam's noise.",W:"CBeam",C:"CBeam",J:1},{P:"GetColor",D:"Gets the beam's color.",W:"CBeam",C:"CBeam",J:1},{P:"GetBrightness",D:"Gets the beam's brightness.",W:"CBeam",C:"CBeam",J:1},{P:"GetFrame",D:"Gets the beam's frame number.",W:"CBeam",C:"CBeam",J:1},{P:"GetScrollRate",D:"Gets the beam's scroll rate.",W:"CBeam",C:"CBeam",J:1},{P:"RelinkBeam",D:"Call after you change start/end positions.",W:"CBeam",C:"CBeam",J:1},{P:"DoSparks",D:"Creates sparks at the given start and end points, if appropriate spawn flags are set.",W:"CBeam",C:"CBeam",J:1},{P:"BeamDamage",D:"Damages the entity hit by the given trace line with the amount set in this entity's pev->dmg variable.\nAlso applies decals to BSP models if the appropriate spawnflag is set.",W:"CBeam",C:"CBeam",J:1},{P:"BeamInit",D:"Initializes this beam with default values and sets the given sprite as the sprite used, with the given width.",W:"CBeam",C:"CBeam",J:1},{P:"PointsInit",D:"Initializes this beam to be a beam between 2 given points (BEAM_POINTS).",W:"CBeam",C:"CBeam",J:1},{P:"PointEntInit",D:"Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT).",W:"CBeam",C:"CBeam",J:1},{P:"EntsInit",D:"Initializes this beam to be a beam between 2 given entities (BEAM_ENTS).",W:"CBeam",C:"CBeam",J:1},{P:"HoseInit",D:"Initializes this beam to be a beam going from a point in a given direction (BEAM_HOSE).",W:"CBeam",C:"CBeam",J:1},{P:"LiveForTime",D:"Sets this beam to live for the given amount of time, after which it is removed.",W:"CBeam",C:"CBeam",J:1},{P:"BeamDamageInstant",D:"Causes the given amount of damage to be done to the entity hit by the given traceresult, as if the damage occured one second ago.",W:"CBeam",C:"CBeam",J:1},{P:"XenTeleportZap",D:"Creates a Xen teleport zap effect between the given points.",W:"CBeam",C:"CBeam",J:1},{P:"XenTeleport",D:"Creates a Xen teleport effect at the given location, with zaps occuring within the given radius.",W:"CBeam",C:"CBeam",J:1},{P:"opCast",D:"Explicitly casts to sub type.",W:"CBeam",C:"CBeam",J:1},{P:"pev",D:"Entity variables",W:"CBeam",C:"CBeam",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CBeam",C:"CBeam",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CBeam",C:"CBeam",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CBeam",C:"CBeam",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CBeam",C:"CBeam",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CBeam",C:"CBeam",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CBeam",C:"CBeam",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CBeam",C:"CBeam",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CBeam",C:"CBeam",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CBeam",C:"CBeam",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CBeam",C:"CBeam",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CBeam",C:"CBeam",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CBeam",C:"CBeam",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CBeam",C:"CBeam",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CBeam",C:"CBeam",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CBeam",C:"CBeam",J:1},{P:"CBinaryStringBuilder",D:"Binary String Builder",W:"CBinaryStringBuilder",C:"Class"},{P:"CBinaryStringBuilder",D:"Factory",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"IsReadToEnd",D:"Is Read to end?",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"Get",D:"Get output to a string",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"Set",D:"Set a read buffer",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"GetReadPointer",D:"Get the read pointer",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"SetReadPointer",D:"Set the read pointer",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteInt",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteLong",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteFloat",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteDouble",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteVector",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"WriteString",D:"Write a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadInt",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadLong",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadFloat",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadDouble",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadVector",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"ReadString",D:"Read a Value",W:"CBinaryStringBuilder",C:"CBinaryStringBuilder",J:1},{P:"CCineMonster",D:"Cinematic monster entity base class",W:"CCineMonster",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CCineMonster",C:"CCineMonster",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Center",D:"Returns this entity's center.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_Route",D:"Positions of movement. Index must be between 0 and ROUTE_SIZE",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_rgbTimeBasedDamage",D:"time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MonsterUse",D:"Will make a monster angry at whomever activated it.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Look",D:"Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker's m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent's m_pLink field)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"RunAI",D:"Runs this monster's AI.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Listen",D:"Listens for anything that is within audible distance.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShouldFadeOnDeath",D:"Returns whether this monster should fade on death.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ChangeYaw",D:"turns a monster towards its ideal_yaw",W:"CCineMonster",C:"CCineMonster",J:1},{P:"VecToYaw",D:"turns a directional vector into a yaw value that points down that vector.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FlYawDiff",D:"returns the difference ( in degrees ) between monster's current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DamageForce",D:"Returns the amount of force applied to this monster when the given amount of damage is done.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetupFriendly",D:"use this overridden to make some other friendly monsters",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MonsterInit",D:"Initializes the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MonsterInitDead",D:"Call after animation/pose is set up",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BecomeDead",D:"Makes the monster become dead",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Revive",D:"Revives the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StartMonster",D:"Starts the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"BestVisibleEnemy",D:"finds best visible enemy for attack",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FInViewCone",D:"see if pEntity is in monster's view cone",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckLocalMove",D:"finds best visible enemy for attack",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Move",D:"Starts the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MoveExecute",D:"Starts the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShouldAdvanceRoute",D:"Returns whether this monster should advance its route",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetStoppedActivity",D:"Gets the stopped activity",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Stop",D:"Stops this monster moving",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StopAnimation",D:"This will stop animation until you call ResetSequenceInfo() at some point in the future",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckRangeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckRangeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckRangeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckRangeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckMeleeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckMeleeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckMeleeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckMeleeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckTankUsage",D:"Checks whether the monster can use a func_tank. Return true if possible.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FHaveSchedule",D:"Returns whether this monster has a schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FScheduleValid",D:"Returns whether this monster's schedule is valid.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ClearSchedule",D:"Clears this monster's schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FScheduleDone",D:"Returns whether this monster's schedule is done.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ChangeSchedule",D:"Changes this monster's schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"NextScheduledTask",D:"Moves to the next scheduled task.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ScheduleInList",D:"Returns the schedule with name szName if it's in the list, NULL otherwise.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ScheduleFromName",D:"Returns the schedule with name szName if it exists, NULL otherwise.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MaintainSchedule",D:"Maintains the monster's schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StartTask",D:"Starts the given task.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"RunTask",D:"Runs the given task.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetScheduleOfType",D:"Gets one of the available schedules of the given type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetSchedule",D:"Gets the current schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ScheduleChange",D:"Called after the monster's schedule changes.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CanPlaySequence",D:"Returns whether this monster can play its sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CanPlaySentence",D:"Returns whether this monster can play its sentence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PlaySentence",D:"Plays the given sentence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PlayScriptedSentence",D:"Plays the given scripted sentence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SentenceStop",D:"Stops playing its current sentence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetTask",D:"Gets the current task.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetIdealState",D:"Gets the ideal monster state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetActivity",D:"Sets the current activity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetGaitActivity",D:"Sets the current gait activity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetSequenceByName",D:"Sets the current sequence by name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetState",D:"Sets the current monster state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ReportAIState",D:"Reports the AI state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckAttacks",D:"Check attacks to the given enemy at the given distance.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckAttacks_Move",D:"Check attacks to the given enemy at the given distance while moving.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckAttacksFromPosition",D:"Check whether attacks are possible from the given position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckEnemy",D:"part of the Condition collection process, gets and stores data and conditions pertaining to a monster's enemy.\nReturns true if Enemy LKP was updated.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PushEnemy",D:"Remember the last few enemies, always remember the player.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PopEnemy",D:"Try remembering the last few enemies.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FGetNodeRoute",D:"tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists ).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TestFGetNodeRoute",D:"TEST FGetNodeRoute.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TaskComplete",D:"Sets the task status to complete.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MovementComplete",D:"Called when movement has completed.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TaskFail",D:"Sets the condition bit for a failed task.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TaskBegin",D:"Sets the task status to running.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TaskIsRunning",D:"Returns whether a task is running.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"TaskIsComplete",D:"Returns whether the task is complete.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MovementIsComplete",D:"Returns whether movement is complete.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IScheduleFlags",D:"Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule's Interrupt mask.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MakeIdealYaw",D:"gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster's\nideal_yaw.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetYawSpeed",D:"Allows different yaw_speeds for each activity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"RouteClassify",D:"Returns the MOVEGOAL for the given move flag.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CheckAttacker",D:"Determine if we should ignore damage.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"SetConditions",D:"Sets AI conditions.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ClearConditions",D:"Clears AI conditions.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasConditions",D:"Returns whether this monster has any of the given AI conditions.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasAllConditions",D:"Returns whether this monster has all of the given AI conditions.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PBestSound",D:"Returns a pointer to the sound the monster should react to.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FShouldEat",D:"Returns whether this monster should eat.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Eat",D:"Make the monster 'full' for a while.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FCheckAITrigger",D:"Checks and, if necessary, fires the monster's trigger target.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"NoFriendlyFire",D:"Returns whether attacking at this time would result in friendly fire",W:"CCineMonster",C:"CCineMonster",J:1},{P:"NoFriendlyFireToPos",D:"Returns whether attacking the target location at this time would result in friendly fire",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetEnemy",D:"Tries to find the best suitable enemy for this monster.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GibMonster",D:"Gibs the monster.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShouldGibMonster",D:"Returns whether the monster should be gibbed given the gib type.\nSee GIB enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CallGibMonster",D:"Determines whether to gib or fade this monster, and acts accordingly.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasHumanGibs",D:"Returns whether this monster has human gibs.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasAlienGibs",D:"Returns whether this monster has alien gibs.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FadeMonster",D:"Fades this monster.\nNote: does not kill the monster.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShootAtEnemy",D:"Shoots at the specified location.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"GetGunPosition",D:"",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DeathSound",D:"Plays this monster's death sound.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"AlertSound",D:"Plays this monster's alert sound.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IdleSound",D:"Plays this monster's idle sound.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PainSound",D:"Plays this monster's pain sound.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StartPlayerFollowing",D:"Starts following its target.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StopPlayerFollowing",D:"Stops following its target.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Remember",D:"Makes this monster remember the given memories.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"Forget",D:"Makes this monster forget the given memories.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasMemory",D:"Returns whether this monster remembers any of the given memories.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"HasAllMemories",D:"Returns whether this monster remembers all of the given memories.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ExitScriptedSequence",D:"Exits the scripted sequence this monster is currently in, if any.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CineCleanup",D:"Cleans up after a cinematic event.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DropItem",D:"Drops the given item from the given position at the given angle.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ShockGlowEffect",D:"Turns the shock glow effect on or off.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FollowerPlayerUse",D:"Use method for following players (set only if friendly)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IsPlayerFollowing",D:"Returns whether this monster is following a player.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CanPlayerFollow",D:"Returns whether this monster can follow a player.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_szTextureName",D:"Current texture name we're standing on.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"MedicCallSound",D:"Medic call sound.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"get_m_pInventory",D:"The inventory items this monster has",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ClearEnemyList",D:"Clears this monster's list of enemies",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ApplyEffects",D:"Re-calculate compounded effect modifiers and apply to the monster",W:"CCineMonster",C:"CCineMonster",J:1},{P:"ResetEffects",D:"Reset all effect modifiers",W:"CCineMonster",C:"CCineMonster",J:1},{P:"DelayStart",D:"Find all the cinematic entities with my targetname and tell them to wait before starting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"PossessEntity",D:"Make the entity enter a scripted sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CancelScript",D:"Find all the cinematic entities with my targetname and stop them from playing.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"StartSequence",D:"Make the entity enter a scripted sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"FCanOverrideState",D:"If this returns false, scripted sequences cannot possess entities regardless of state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CanInterrupt",D:"Returns whether this script can be interrupted.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"IgnoreConditions",D:"Gets the ignore conditions.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"pev",D:"Entity variables",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CCineMonster",C:"CCineMonster",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flTWidth",D:"For plats.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flTLength",D:"For plats.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flHeight",D:"Height.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hEnemy",D:"the entity that the monster is fighting.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hTargetEnt",D:"the entity that the monster is trying to reach.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hTargetTank",D:"Target tank to control.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flFieldOfView",D:"width of monster's field of view ( dot product ).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flWaitFinished",D:"if we're told to wait, this is the time that the wait will be over.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flMoveWaitFinished",D:"if we're told to wait before moving, this is the time that the wait will be over.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_Activity",D:"what the monster is doing (animation).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_IdealActivity",D:"monster should switch to this activity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_GaitActivity",D:"gaitsequence.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_LastHitGroup",D:"the last body region that took damage.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_MonsterState",D:"monster's current state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_IdealMonsterState",D:"monster should change to this state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iTaskStatus",D:"Task status.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_pSchedule",D:"Current schedule.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_pScheduleSaved",D:"For land_on_ground schedules (remember last schedule and continue).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iScheduleIndex",D:"Schedule index.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_movementGoal",D:"Goal that defines route.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iRouteIndex",D:"Index into m_Route[].",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_moveWaitTime",D:"How long I should wait for something to move.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_moveradius",D:"Minimum radius.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecMoveGoal",D:"Kept around for node graph moves, so we know our ultimate goal.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_movementActivity",D:"When moving, set this activity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iAudibleList",D:"first index of a linked list of sounds that the monster can hear.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_afSoundTypes",D:"Sound types that can be heard.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecLastPosition",D:"monster sometimes wants to return to where it started after an operation..",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iHintNode",D:"this is the hint node that the monster is moving towards or performing active idle on..",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_afMemory",D:"Monster memory.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_bloodColor",D:"color of blood particles.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iMaxHealth",D:"keeps track of monster's maximum health value (for re-healing, etc).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecEnemyLKP",D:"last known position of enemy. (enemy's origin).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_cAmmoLoaded",D:"how much ammo is in the weapon (used to trigger reload anim sequences).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_afCapability",D:"tells us what a monster can/can't do.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_afMoveShootCap",D:"tells us what a monster can/can't do, while moving.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flNextAttack",D:"cannot attack again until this time.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_bitsDamageType",D:"what types of damage has monster (player) taken.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_lastDamageAmount",D:"how much damage did monster (player) last take.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_tbdPrev",D:"Time-based damage timer.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"pevTimeBasedInflictor",D:"Time based damage inflictor.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_failSchedule",D:"Schedule type to choose if current schedule fails.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flHungryTime",D:"Time based damage inflictor.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flDistTooFar",D:"if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flDistLook",D:"distance monster sees (Default 2048).",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iTriggerCondition",D:"for scripted AI, this is the condition that will cause the activation of the monster's TriggerTarget.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszTriggerTarget",D:"Name of target that should be fired.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_HackedGunPos",D:"HACK until we can query end of gun.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_scriptState",D:"internal cinematic state.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hCine",D:"Cinematic entity.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hCineBlocker",D:"Entity that is blocking cinematic execution.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_useTime",D:"Don't allow +USE until this time.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_FormattedName",D:"The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\".",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_chTextureType",D:"Current texture type.\nSee TextureType enum.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_fCanFearCreatures",D:"Whether this monster can fear creatures.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flAutomaticAttackTime",D:"How long an npc will attempt to fire full auto.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flFallVelocity",D:"Current fall speed.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_hGuardEnt",D:"Monster will guard this entity and turn down follow requests.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszGuardEntName",D:"Guard entity name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_vecEffectGlowColor",D:"Glow shell.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iEffectBlockWeapons",D:"Monster can't use weapons.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iEffectInvulnerable",D:"is invulnerable (god mode)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iEffectInvisible",D:"is invisible (render + non-targetable)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iEffectNonSolid",D:"is non-solid",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flEffectRespiration",D:"Extra/less breathing time underwater in seconds",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flEffectGravity",D:"Gravity modifier (%)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flEffectFriction",D:"Movement friction modifier (%)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flEffectSpeed",D:"Movement speed modifier (%)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flEffectDamage",D:"Damage modifier (%)",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszIdle",D:"Te idle animation name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszPlay",D:"The play animation name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iszEntity",D:"The target entity name.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flRadius",D:"The radius to search in.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flRepeat",D:"How much time has to pass before the scripted sequence can repeat.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_iDelay",D:"Delay before execution.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_startTime",D:"When to start the script.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_interruptable",D:"Whether this scripted sequence can be interrupted.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"m_flMoveToRadius",D:"When in radius, script is done.",W:"CCineMonster",C:"CCineMonster",J:1},{P:"CClassicMode",D:"Classic Mode handler",W:"CClassicMode",C:"Class"},{P:"IsStateDefined",D:"Returns whether the Classic Mode state setting is defined. If not defined, no voting has taken place to choose whether or not to enable Classic Mode.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"ResetState",D:"Resets the Classic Mode state setting to undefined.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"IsEnabled",D:"Returns whether Classic Mode is enabled or not.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"SetEnabled",D:"Enable or disable Classic Mode.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"ForceItemRemap",D:"Forces item remapping even if classic mode is disabled.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"Toggle",D:"Toggles Classic Mode.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"EnableMapSupport",D:"Tells the game that the current map wants to use Classic Mode. Must be called in MapInit. Cannot be disabled once set.This will ask players whether they want to enable Classic Mode. Reset on map change.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"ShouldRestartOnChange",D:"Returns whether the map should restart if Classic Mode is changed or not. Defaults to true if not changed by a script. Reset on map change.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"SetShouldRestartOnChange",D:"Sets whether the map should restart if Classic Mode is changed.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"SetItemMappings",D:"Sets the item mappings to use from now on.\nDoes not affect previous mappings.\nPass null to disable all mappings.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"FindItemMapping",D:"Gets the item mapped to the given item name, or an empty string if no mapping exists.",W:"CClassicMode",C:"CClassicMode",J:1},{P:"CClientCommand",D:"Client console command class",W:"CClientCommand",C:"Class"},{P:"GetName",D:"Gets the name of this command.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"GetFullyQualifiedName",D:"Gets the fully qualified name of this command. This is the name that the command is referred by when called.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"GetHelpInfo",D:"Gets the help info describing this command.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"GetKind",D:"Gets the type of this console command.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"GetOwningModuleName",D:"Gets the name of the module that owns (created) this command.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"HasBeenAdded",D:"Whether this command was added to the list of commands.\nMust be added to be usable from the console.",W:"CClientCommand",C:"CClientCommand",J:1},{P:"CClientCommand",D:"Constructor",W:"CClientCommand",C:"CClientCommand",J:1},{P:"CCommand",D:"Command arguments.",W:"CCommand",C:"Class"},{P:"ArgC",D:"Gets the number of arguments.",W:"CCommand",C:"CCommand",J:1},{P:"GetCommandString",D:"Gets the entire command as a string.",W:"CCommand",C:"CCommand",J:1},{P:"GetArgumentsString",D:"Gets all arguments as a single string.",W:"CCommand",C:"CCommand",J:1},{P:"Arg",D:"Gets the argument by index.",W:"CCommand",C:"CCommand",J:1},{P:"opIndex",D:"Gets the argument by index.",W:"CCommand",C:"CCommand",J:1},{P:"FindArg",D:"Find a value for a given argument. If the argument does not exist or has no value, an empty string is returned. Otherwise, returns the value.",W:"CCommand",C:"CCommand",J:1},{P:"FindIntArg",D:"Find an int value for a given argument. Returns iDefault if no such argument exists, or no value exists for it. Otherwise, returns the value, converted to an int",W:"CCommand",C:"CCommand",J:1},{P:"CConCommand",D:"Console command class",W:"CConCommand",C:"Class"},{P:"GetName",D:"Gets the name of this command.",W:"CConCommand",C:"CConCommand",J:1},{P:"GetFullyQualifiedName",D:"Gets the fully qualified name of this command. This is the name that the command is referred by when called.",W:"CConCommand",C:"CConCommand",J:1},{P:"GetHelpInfo",D:"Gets the help info describing this command.",W:"CConCommand",C:"CConCommand",J:1},{P:"GetKind",D:"Gets the type of this console command.",W:"CConCommand",C:"CConCommand",J:1},{P:"GetOwningModuleName",D:"Gets the name of the module that owns (created) this command.",W:"CConCommand",C:"CConCommand",J:1},{P:"HasBeenAdded",D:"Whether this command was added to the list of commands.\nMust be added to be usable from the console.",W:"CConCommand",C:"CConCommand",J:1},{P:"CConCommand",D:"Constructor",W:"CConCommand",C:"CConCommand",J:1},{P:"CConCommandSystem",D:"Script console command manager.",W:"CConCommandSystem",C:"Class"},{P:"GetCurrentPlayer",D:"If the current command was executed by a player, this returns that player.",W:"CConCommandSystem",C:"CConCommandSystem",J:1},{P:"ServerCommand",D:"Executes an Angelscript server command.",W:"CConCommandSystem",C:"CConCommandSystem",J:1},{P:"CCustomEntityFuncs",D:"Custom entity functions.",W:"CCustomEntityFuncs",C:"Class"},{P:"IsCustomEntity",D:"Returns whether the given entity name is a registered custom entity",W:"CCustomEntityFuncs",C:"CCustomEntityFuncs",J:1},{P:"RegisterCustomEntity",D:"Registers a class called szClassname as a custom entity named szEntityname. The class must inherit from a script entity base class.",W:"CCustomEntityFuncs",C:"CCustomEntityFuncs",J:1},{P:"UnRegisterCustomEntity",D:"Unregisters a custom entity by the given name",W:"CCustomEntityFuncs",C:"CCustomEntityFuncs",J:1},{P:"CCVar",D:"CVar class",W:"CCVar",C:"Class"},{P:"GetName",D:"Gets the name of this command.",W:"CCVar",C:"CCVar",J:1},{P:"GetFullyQualifiedName",D:"Gets the fully qualified name of this command. This is the name that the command is referred by when called.",W:"CCVar",C:"CCVar",J:1},{P:"GetHelpInfo",D:"Gets the help info describing this command.",W:"CCVar",C:"CCVar",J:1},{P:"GetKind",D:"Gets the type of this console command.",W:"CCVar",C:"CCVar",J:1},{P:"GetOwningModuleName",D:"Gets the name of the module that owns (created) this command.",W:"CCVar",C:"CCVar",J:1},{P:"HasBeenAdded",D:"Whether this command was added to the list of commands.\nMust be added to be usable from the console.",W:"CCVar",C:"CCVar",J:1},{P:"CCVar",D:"Constructor",W:"CCVar",C:"CCVar",J:1},{P:"GetDefaultValue",D:"Gets the default value for this cvar.",W:"CCVar",C:"CCVar",J:1},{P:"GetString",D:"Converts the value to a string.",W:"CCVar",C:"CCVar",J:1},{P:"GetFloat",D:"Converts the value to a float.",W:"CCVar",C:"CCVar",J:1},{P:"GetInt",D:"Converts the value to an integer.",W:"CCVar",C:"CCVar",J:1},{P:"GetBool",D:"Converts the value to a boolean.",W:"CCVar",C:"CCVar",J:1},{P:"SetString",D:"Sets the given string as the value.",W:"CCVar",C:"CCVar",J:1},{P:"SetFloat",D:"Sets the given float as the value.",W:"CCVar",C:"CCVar",J:1},{P:"SetInt",D:"Sets the given integer as the value.",W:"CCVar",C:"CCVar",J:1},{P:"SetBool",D:"Sets the given boolean as the value.",W:"CCVar",C:"CCVar",J:1},{P:"CDebugger",D:"Debugger",W:"CDebugger",C:"Class"},{P:"GetCurrentStackLevel",D:"Gets the current stack level.",W:"CDebugger",C:"CDebugger",J:1},{P:"OutputLocals",D:"Output local variables.",W:"CDebugger",C:"CDebugger",J:1},{P:"OutputGlobals",D:"Output global variables.",W:"CDebugger",C:"CDebugger",J:1},{P:"OutputMembers",D:"Output member variables.",W:"CDebugger",C:"CDebugger",J:1},{P:"OutputStatistics",D:"Output statistics.",W:"CDebugger",C:"CDebugger",J:1},{P:"CDecals",D:"Dynamic decal manager",W:"CDecals",C:"Class"},{P:"GetName",D:"Gets the name of the texture representing the given decal.",W:"CDecals",C:"CDecals",J:1},{P:"GetIndex",D:"Gets the texture frame index of the given decal.",W:"CDecals",C:"CDecals",J:1},{P:"CEngine",D:"Engine global variables",W:"CEngine",C:"Class"},{P:"time",D:"Current time",W:"CEngine",C:"CEngine",J:1},{P:"frametime",D:"Time between frames",W:"CEngine",C:"CEngine",J:1},{P:"force_retouch",D:"How many times to force all entities to retouch entities they are currently touching/intersecting. Should always be >= 0.",W:"CEngine",C:"CEngine",J:1},{P:"mapname",D:"Name of the current map",W:"CEngine",C:"CEngine",J:1},{P:"startspot",D:"Start location in the map",W:"CEngine",C:"CEngine",J:1},{P:"deathmatch",D:"Flag telling whether this is deathmatch",W:"CEngine",C:"CEngine",J:1},{P:"coop",D:"Flag telling whether this is coop",W:"CEngine",C:"CEngine",J:1},{P:"teamplay",D:"Flag telling whether this is teamplay",W:"CEngine",C:"CEngine",J:1},{P:"serverflags",D:"Server flags",W:"CEngine",C:"CEngine",J:1},{P:"found_secrets",D:"Found secrets",W:"CEngine",C:"CEngine",J:1},{P:"v_forward",D:"Forward vector",W:"CEngine",C:"CEngine",J:1},{P:"v_up",D:"Up vector",W:"CEngine",C:"CEngine",J:1},{P:"v_right",D:"Right vector",W:"CEngine",C:"CEngine",J:1},{P:"trace_allsolid",D:"Trace all is solid flag",W:"CEngine",C:"CEngine",J:1},{P:"trace_startsolid",D:"Trace start is solid flag",W:"CEngine",C:"CEngine",J:1},{P:"trace_fraction",D:"Trace fraction",W:"CEngine",C:"CEngine",J:1},{P:"trace_endpos",D:"Trace end position",W:"CEngine",C:"CEngine",J:1},{P:"trace_plane_normal",D:"Trace plane normal",W:"CEngine",C:"CEngine",J:1},{P:"trace_plane_dist",D:"Trace plane distance",W:"CEngine",C:"CEngine",J:1},{P:"trace_ent",D:"Trace entity",W:"CEngine",C:"CEngine",J:1},{P:"trace_inopen",D:"Trace is in open flag",W:"CEngine",C:"CEngine",J:1},{P:"trace_inwater",D:"Trace is in water flag",W:"CEngine",C:"CEngine",J:1},{P:"trace_hitgroup",D:"Trace hit group",W:"CEngine",C:"CEngine",J:1},{P:"trace_flags",D:"Trace flags",W:"CEngine",C:"CEngine",J:1},{P:"msg_entity",D:"Message entity",W:"CEngine",C:"CEngine",J:1},{P:"cdAudioTrack",D:"CD audio track",W:"CEngine",C:"CEngine",J:1},{P:"maxClients",D:"Maximum connected clients",W:"CEngine",C:"CEngine",J:1},{P:"maxEntities",D:"Maximum entities",W:"CEngine",C:"CEngine",J:1},{P:"CEngineFuncs",D:"Engine functions",W:"CEngineFuncs",C:"Class"},{P:"ModelIndex",D:"Gets the model index of a model.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ModelFrames",D:"Gets the number of frames in a model.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ChangeLevel",D:"Changes the current level to the one specified.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"VecToYaw",D:"Vector to yaw",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"VecToAngles",D:"Vector to angles",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"MoveToOrigin",D:"Move entity to origin.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ChangeYaw",D:"Change yaw. This updates entvars_t::angles[ 1 ] to approach entvars_t::ideal_yaw, at entvars_t::yaw_speed degrees speed.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ChangePitch",D:"Change pitch. This updates entvars_t::angles[ 0 ] to approach entvars_t::idealpitch, at entvars_t::pitch_speed degrees speed.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetEntityIllum",D:"Get entity illumination. This is a weighted value between 0 and 255, inclusive.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"FindClientInPVS",D:"Find client in Potentially Visible Set.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"EntitiesInPVS",D:"Find entities in Potentially Visible Set. Edict::vars::chain is used for this list, and is temporary.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"MakeVectors",D:"Make vectors. The results are stored in g_Engine::v_forward, v_right, and v_up.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"AngleVectors",D:"Angle vectors",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"MakeStatic",D:"Make entity static. This moves the entity to the client.Its current visual state is copied over, and the entity is removed on the server side.Only valid while the level is loading.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"EntIsOnFloor",D:"Returns whether entity is on the floor.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"DropToFloor",D:"Drop entity to floor.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"WalkMove",D:"Make entity walk.\nSee WALKMOVE enum",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetAimVector",D:"Get aim vector for entity.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ServerCommand",D:"Issues a command to the server. Plugins only.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ServerExecute",D:"Executes all pending server commands. Plugins only.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ParticleEffect",D:"Emit a particle effect.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"LightStyle",D:"Set a light style.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"DecalIndex",D:"Get decal index.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"PointContents",D:"Check if point is in contents.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CVarGetFloat",D:"Get cvar float value.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CVarGetString",D:"Get cvar string value.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CVarSetFloat",D:"Set cvar float value.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CVarSetString",D:"Set cvar string value.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetVarsOfEnt",D:"Gets entity variables of entity.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"IndexOfEdict",D:"Get index of edict.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"PEntityOfEntIndex",D:"Get entity by entity index.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"FindEntityByVars",D:"Find entity by variables.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetBonePosition",D:"Get bone position.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ClientPrintf",D:"Client print",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ServerPrint",D:"Server print",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Cmd_Args",D:"Get command arguments.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Cmd_Argv",D:"Get command argument by index.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Cmd_Argc",D:"Get number of command arguments.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetAttachment",D:"Get attachment position.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"SetView",D:"Set view.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Time",D:"Get current time.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CrosshairAngle",D:"Sets the angles of the given player's crosshairs to the given settings. Set both to 0 to disable. May not have any effect in SC.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetGameDir",D:"Get game directory.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"RunPlayerMove",D:"Run player move.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"NumberOfEntities",D:"Get number of entities.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetInfoKeyBuffer",D:"Get info key buffer.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetPhysicsKeyBuffer",D:"Get physics key buffer.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"IsMapValid",D:"Returns whether the given map is valid.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"StaticDecal",D:"Project a static decal.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetPlayerUserId",D:"Get player user ID. This is a unique id generated when a player connects. It remains valid as long as the player stays connected to the server.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"IsDedicatedServer",D:"Returns whether this is a dedicated server.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CVarGetPointer",D:"Gets a pointer to a cvar.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetPlayerStats",D:"Get player stats.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Voice_GetClientListening",D:"Voice system - Get client listening.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"Voice_SetClientListening",D:"Voice system - Set client listening.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetPlayerAuthId",D:"Get the player's Auth ID. (WON/Steam ID)",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CRC32",D:"Caculate CRC32 for a string",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"ClassMemcpy",D:"copy class, If src and dst are different type, return false.\nIf not class ref, crash game.",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"EnableCustomStepSound",D:"Disable stepsound temporarily until level changes",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"EnablePhysicWorld",D:"Enable physic world temporarily until level changes",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"SetPhysicSimRate",D:"Set simulation rate of Bullet Engine world",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetRunPlayerMovePlayerIndex",D:"Get index of player that is currently running PlayerMove code",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"GetViewEntity",D:"Get client's view entity",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"SetViewEntity",D:"Set client's view entity",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"SetQueryCvar2Callback",D:"Set callback for svc_querycvar2 response",W:"CEngineFuncs",C:"CEngineFuncs",J:1},{P:"CEntityFuncs",D:"Global entity functions",W:"CEntityFuncs",C:"Class"},{P:"CreateEntity",D:"Create an entity by class name. Pass keyvalues in using the dictionary, if any. Keyvalues must be strings.\nThe class name can be either one of the entities included with the game or a custom entity.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"Create",D:"Creates an entity by class name.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateDecal",D:"Creates a decal with the specified name.\nIf given a name, has to be triggered to be placed, otherwise, is placed immediately.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateSprite",D:"Creates a sprite. flFrameRate must be set to a valid value to animate the sprite.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateBeam",D:"Creates a beam entity with the given sprite and width set.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateExplosion",D:"Creates an explosion.\nIf fDoDamage is true, also deals damage to entities within its effect radius, which is determined by the magnitude.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateDisplacerPortal",D:"Creates a displacer portal.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateRPGRocket",D:"Creates an rpg rocket.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateGib",D:"Creates a server side gib.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ShootTimed",D:"Spawns a timed grenade.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ShootContact",D:"Spawns a contact grenade.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ShootMortar",D:"Spawns a mortar grenade.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ShootBananaCluster",D:"Spawn a banana bomb.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"UseSatchelCharges",D:"Triggers all satchel charges owned by pevOwner to either be released from ownership, or detonated.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SpawnHeadGib",D:"Spawns a head gib for the target victim.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SpawnRandomGibs",D:"Spawns random gibs for the target victim.\niHuman specifies whether the gibs are human or alien.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SpawnStickyGibs",D:"Spawns sticky gibs for the target victim.\ncGibs specifies how many gibs there are.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetOrigin",D:"Set the origin of an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetModel",D:"Set the model of an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetSize",D:"Set the size of an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityInSphere",D:"Finds an entity in a sphere",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityByString",D:"Finds an entity based on a key value pair",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityByClassname",D:"Finds an entity by class name",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityByTargetname",D:"Finds an entity by target name",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityGeneric",D:"Finds an entity by target name in a sphere",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"MonstersInSphere",D:"Finds monsters in a sphere",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"EntitiesInBox",D:"Finds entities in a box",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"TargetsInBox",D:"Finds targets in a box",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"BrushEntsInBox",D:"Finds brush entities in a box",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"DispatchSpawn",D:"Dispatches the spawning of an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"DispatchKeyValue",D:"Dispatches the passing of a key value pair to an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"EntvarsKeyvalue",D:"Handles the initialization of keyvalues located in the entity's entvars_t object.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"DispatchObjectCollisionBox",D:"Dispatches the initialization of the collision box of an entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"Instance",D:"Gets the entity instance of an edict instance",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FireTargets",D:"Triggers targets. If flDelay is nonzero, causes a temporary entity to be spawned to trigger the target at the given time.\nThe temporary entity becomes the caller, not the entity passed in.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"IsMasterTriggered",D:"Returns whether the master with the given name would be triggered if activated by the given entity.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"Remove",D:"Removes the given entity before the next frame starts.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"IsValidEntity",D:"Returns whether this is a valid entity.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"EntIndex",D:"Gets the index for the given edict.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"IndexEnt",D:"Gets the edict for the given index.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"EjectBrass",D:"tosses a brass shell from passed origin at passed velocity.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CastToScriptClass",D:"Casts an CBaseEntity@ representing a custom entity to the ScriptClassBaseClass type",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"RandomTargetname",D:"Returns a randomly selected entity that has the given target name.",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"PrecacheMaterialSounds",D:"Precaches the sounds used by a particular material",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"FindEntityInCylinder",D:"Find Entity In a cylinder",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ChangeLevelByEntity",D:"CASEntity_ChangeLevelByEntity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateSolidOptimizer",D:"Create physic box for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreatePhysicBox",D:"Create physic object for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreatePhysicObject",D:"Create physic object for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreateCompoundPhysicObject",D:"Create physic compound shape for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreatePhysicVehicle",D:"Create vehicle manager for physic entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CreatePhysicTrigger",D:"Create physic trigger that fires pfnTouch when colliding with physic object",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetPhysicObjectTransform",D:"Set physic object's transform",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetPhysicObjectFreeze",D:"Set physic object's activation state to freeze or unfreeze",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntitySuperPusher",D:"Enable or disable Super-Pusher for brush entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntityLevelOfDetail",D:"Enable Level-of-Detail for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntityPartialViewer",D:"Enable Semi-Visible for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntitySemiVisible",D:"Enable Semi-Visible for entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntityFollow",D:"Enable follow for the entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntityEnvStudioAnim",D:"Enable follow for the entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetEntityCustomMoveSize",D:"Enable follow for the entity",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"GetCurrentSuperPusher",D:"Get current working Super-Pusher entity and push direction, return valid edict only in pfnTouch callback",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"GetCurrentPhysicImpactEntity",D:"Get current impact information from Bullet Engine, return valid edict only in pfnTouch callback",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ApplyPhysicImpulse",D:"Apply impulse on physic object",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"ApplyPhysicForce",D:"Apply impulse on physic object",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetVehicleEngine",D:"Set engine wheel's motor and servo for the vehicle",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"SetVehicleSteering",D:"Set steering wheel's motor and servo for the vehicle",W:"CEntityFuncs",C:"CEntityFuncs",J:1},{P:"CEntityLoader",D:"Entity loader.\nLoads entity keyvalue data and instances the entities.\nFile format:\n\"Entity\"{\t\"classname\" \"info_player_deathmatch\"\t<additional keyvalues>}...",W:"CEntityLoader",C:"Class"},{P:"LoadFromFile",D:"Loads entities from a file.",W:"CEntityLoader",C:"CEntityLoader",J:1},{P:"CGame",D:"Game functions",W:"CGame",C:"Class"},{P:"AlertMessage",D:"Outputs a message to the console. Uses SC printf formatting style.",W:"CGame",C:"CGame",J:1},{P:"PrecacheModel",D:"Precaches a model.\nShuts down the game if not found.\nCan only be called from MapInit.",W:"CGame",C:"CGame",J:1},{P:"PrecacheOther",D:"Precaches an entity.\nThis effectively instances an entity with the given class name, calls precache on it, and removes the entity.",W:"CGame",C:"CGame",J:1},{P:"PrecacheMonster",D:"Precaches a monster entity.\nThis effectively instances a monster entity with the given class name, calls precache on it, and removes the entity.",W:"CGame",C:"CGame",J:1},{P:"PrecacheGeneric",D:"Precaches a file for download to clients.",W:"CGame",C:"CGame",J:1},{P:"GetGameName",D:"Returns the game name.",W:"CGame",C:"CGame",J:1},{P:"GetGameVersionString",D:"Returns the game version as a string, e.g. \"5.0\".",W:"CGame",C:"CGame",J:1},{P:"GetGameVersion",D:"Returns the game version as a number, e.g. 500:\nmajor version, minor version (3.0 becomes 300, 4.0b1 becomes 401, 4.06 becomes 406, 4.5 becomes 450, etc...)",W:"CGame",C:"CGame",J:1},{P:"CGib",D:"Gib class",W:"CGib",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CGib",C:"CGib",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CGib",C:"CGib",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CGib",C:"CGib",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CGib",C:"CGib",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CGib",C:"CGib",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CGib",C:"CGib",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CGib",C:"CGib",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CGib",C:"CGib",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CGib",C:"CGib",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CGib",C:"CGib",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CGib",C:"CGib",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CGib",C:"CGib",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CGib",C:"CGib",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CGib",C:"CGib",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CGib",C:"CGib",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CGib",C:"CGib",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CGib",C:"CGib",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CGib",C:"CGib",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CGib",C:"CGib",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CGib",C:"CGib",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CGib",C:"CGib",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CGib",C:"CGib",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CGib",C:"CGib",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CGib",C:"CGib",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CGib",C:"CGib",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CGib",C:"CGib",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CGib",C:"CGib",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CGib",C:"CGib",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CGib",C:"CGib",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CGib",C:"CGib",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CGib",C:"CGib",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CGib",C:"CGib",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CGib",C:"CGib",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CGib",C:"CGib",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CGib",C:"CGib",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CGib",C:"CGib",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CGib",C:"CGib",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CGib",C:"CGib",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CGib",C:"CGib",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CGib",C:"CGib",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CGib",C:"CGib",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CGib",C:"CGib",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CGib",C:"CGib",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CGib",C:"CGib",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CGib",C:"CGib",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CGib",C:"CGib",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CGib",C:"CGib",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CGib",C:"CGib",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CGib",C:"CGib",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CGib",C:"CGib",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CGib",C:"CGib",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CGib",C:"CGib",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CGib",C:"CGib",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CGib",C:"CGib",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CGib",C:"CGib",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CGib",C:"CGib",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CGib",C:"CGib",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CGib",C:"CGib",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CGib",C:"CGib",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CGib",C:"CGib",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CGib",C:"CGib",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CGib",C:"CGib",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CGib",C:"CGib",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CGib",C:"CGib",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CGib",C:"CGib",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CGib",C:"CGib",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CGib",C:"CGib",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CGib",C:"CGib",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CGib",C:"CGib",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CGib",C:"CGib",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CGib",C:"CGib",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CGib",C:"CGib",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CGib",C:"CGib",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CGib",C:"CGib",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CGib",C:"CGib",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CGib",C:"CGib",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CGib",C:"CGib",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CGib",C:"CGib",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CGib",C:"CGib",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CGib",C:"CGib",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CGib",C:"CGib",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CGib",C:"CGib",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CGib",C:"CGib",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CGib",C:"CGib",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CGib",C:"CGib",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CGib",C:"CGib",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CGib",C:"CGib",J:1},{P:"Center",D:"Returns this entity's center.",W:"CGib",C:"CGib",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CGib",C:"CGib",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CGib",C:"CGib",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CGib",C:"CGib",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CGib",C:"CGib",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CGib",C:"CGib",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CGib",C:"CGib",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CGib",C:"CGib",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CGib",C:"CGib",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CGib",C:"CGib",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CGib",C:"CGib",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CGib",C:"CGib",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CGib",C:"CGib",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CGib",C:"CGib",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CGib",C:"CGib",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CGib",C:"CGib",J:1},{P:"Spawn",D:"Spawns the gib with the given model. Note: this sets several of CGib's variables. Set variables after calling this.",W:"CGib",C:"CGib",J:1},{P:"LimitVelocity",D:"Limits the velocity of the gib",W:"CGib",C:"CGib",J:1},{P:"pev",D:"Entity variables",W:"CGib",C:"CGib",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CGib",C:"CGib",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CGib",C:"CGib",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CGib",C:"CGib",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CGib",C:"CGib",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CGib",C:"CGib",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CGib",C:"CGib",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CGib",C:"CGib",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CGib",C:"CGib",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CGib",C:"CGib",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CGib",C:"CGib",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CGib",C:"CGib",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CGib",C:"CGib",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CGib",C:"CGib",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CGib",C:"CGib",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CGib",C:"CGib",J:1},{P:"m_bloodColor",D:"The color of the blood that is sprayed onto walls when the gib touches it.",W:"CGib",C:"CGib",J:1},{P:"m_cBloodDecals",D:"Maximum number of blood decals this gib can spray.",W:"CGib",C:"CGib",J:1},{P:"m_material",D:"Gib material type. One of the Materials enum values should be used here.",W:"CGib",C:"CGib",J:1},{P:"m_lifeTime",D:"Lifetime of this gib, in seconds",W:"CGib",C:"CGib",J:1},{P:"CGlobalState",D:"Global state manager",W:"CGlobalState",C:"Class"},{P:"ClearStates",D:"Clears all global states",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntityAdd",D:"Adds a new global state object",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntitySetState",D:"Sets the state of an existing global state object",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntityUpdate",D:"Updates the level name of the specified global state object",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntityFromTable",D:"Finds a global state object by name",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntityGetState",D:"Gets the state of the specified global state object",W:"CGlobalState",C:"CGlobalState",J:1},{P:"EntityInTable",D:"Returns whether the global state object is in the table of objects",W:"CGlobalState",C:"CGlobalState",J:1},{P:"DumpGlobals",D:"Dumps all global state objects to the console",W:"CGlobalState",C:"CGlobalState",J:1},{P:"CGrenade",D:"Grenade class",W:"CGrenade",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CGrenade",C:"CGrenade",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CGrenade",C:"CGrenade",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CGrenade",C:"CGrenade",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CGrenade",C:"CGrenade",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CGrenade",C:"CGrenade",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CGrenade",C:"CGrenade",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CGrenade",C:"CGrenade",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CGrenade",C:"CGrenade",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CGrenade",C:"CGrenade",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CGrenade",C:"CGrenade",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CGrenade",C:"CGrenade",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CGrenade",C:"CGrenade",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CGrenade",C:"CGrenade",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CGrenade",C:"CGrenade",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CGrenade",C:"CGrenade",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CGrenade",C:"CGrenade",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CGrenade",C:"CGrenade",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CGrenade",C:"CGrenade",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CGrenade",C:"CGrenade",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CGrenade",C:"CGrenade",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CGrenade",C:"CGrenade",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CGrenade",C:"CGrenade",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CGrenade",C:"CGrenade",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CGrenade",C:"CGrenade",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CGrenade",C:"CGrenade",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CGrenade",C:"CGrenade",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CGrenade",C:"CGrenade",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CGrenade",C:"CGrenade",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CGrenade",C:"CGrenade",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CGrenade",C:"CGrenade",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CGrenade",C:"CGrenade",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CGrenade",C:"CGrenade",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CGrenade",C:"CGrenade",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CGrenade",C:"CGrenade",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CGrenade",C:"CGrenade",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CGrenade",C:"CGrenade",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CGrenade",C:"CGrenade",J:1},{P:"Center",D:"Returns this entity's center.",W:"CGrenade",C:"CGrenade",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CGrenade",C:"CGrenade",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CGrenade",C:"CGrenade",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CGrenade",C:"CGrenade",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CGrenade",C:"CGrenade",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CGrenade",C:"CGrenade",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CGrenade",C:"CGrenade",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CGrenade",C:"CGrenade",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CGrenade",C:"CGrenade",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CGrenade",C:"CGrenade",J:1},{P:"SUB_UseTargets",D:"Causes this entity to trigger its targets with an optional delay.",W:"CGrenade",C:"CGrenade",J:1},{P:"DelayThink",D:"Think function. Used internally.",W:"CGrenade",C:"CGrenade",J:1},{P:"StudioFrameAdvance",D:"Accumulate animation frame time from last time called until now.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetSequenceFlags",D:"Get sequence flags.",W:"CGrenade",C:"CGrenade",J:1},{P:"LookupActivity",D:"Returns the index of the given activity, or -1 if no such activity exists.",W:"CGrenade",C:"CGrenade",J:1},{P:"LookupActivityHeaviest",D:"Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists.",W:"CGrenade",C:"CGrenade",J:1},{P:"LookupSequence",D:"Returns the index of the given sequence, or -1 if no such sequence exists.",W:"CGrenade",C:"CGrenade",J:1},{P:"ResetSequenceInfo",D:"Resets sequence info.",W:"CGrenade",C:"CGrenade",J:1},{P:"ResetGaitSequenceInfo",D:"Resets gait sequence info.",W:"CGrenade",C:"CGrenade",J:1},{P:"DispatchAnimEvents",D:"Handle events that have happend since last time called up until X seconds into the future.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetBoneController",D:"Sets the specified bone controller to the given value.",W:"CGrenade",C:"CGrenade",J:1},{P:"InitBoneControllers",D:"Initializes bone controllers.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetBlending",D:"Sets the given blending controller to the given value.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetBonePosition",D:"Gets the position of the given bone.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetAutomovement",D:"Gets automatic movement.",W:"CGrenade",C:"CGrenade",J:1},{P:"FindTransition",D:"Find the transition between 2 sequences.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetAttachment",D:"Gets the attachment position.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetBodygroup",D:"Sets the given body group to the given value.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetBodygroup",D:"Gets the value of the given body group.",W:"CGrenade",C:"CGrenade",J:1},{P:"ExtractBbox",D:"Extracts the bounding box of the current model.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments that the current model has.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetSequenceBox",D:"Sets the sequence box.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetSequenceActivityName",D:"Gets activity for the given sequence.",W:"CGrenade",C:"CGrenade",J:1},{P:"LinearMove",D:"Performs linear movement.",W:"CGrenade",C:"CGrenade",J:1},{P:"AngularMove",D:"Performs angular movement.",W:"CGrenade",C:"CGrenade",J:1},{P:"IsToggleLockedByMaster",D:"Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations.",W:"CGrenade",C:"CGrenade",J:1},{P:"get_m_pInventoryRules",D:"The inventory rules.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecOldEnemy",D:"Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_Route",D:"Positions of movement. Index must be between 0 and ROUTE_SIZE",W:"CGrenade",C:"CGrenade",J:1},{P:"m_rgbTimeBasedDamage",D:"time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED.",W:"CGrenade",C:"CGrenade",J:1},{P:"MonsterUse",D:"Will make a monster angry at whomever activated it.",W:"CGrenade",C:"CGrenade",J:1},{P:"Look",D:"Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker's m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent's m_pLink field)",W:"CGrenade",C:"CGrenade",J:1},{P:"RunAI",D:"Runs this monster's AI.",W:"CGrenade",C:"CGrenade",J:1},{P:"Listen",D:"Listens for anything that is within audible distance.",W:"CGrenade",C:"CGrenade",J:1},{P:"ShouldFadeOnDeath",D:"Returns whether this monster should fade on death.",W:"CGrenade",C:"CGrenade",J:1},{P:"ChangeYaw",D:"turns a monster towards its ideal_yaw",W:"CGrenade",C:"CGrenade",J:1},{P:"VecToYaw",D:"turns a directional vector into a yaw value that points down that vector.",W:"CGrenade",C:"CGrenade",J:1},{P:"FlYawDiff",D:"returns the difference ( in degrees ) between monster's current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn.",W:"CGrenade",C:"CGrenade",J:1},{P:"DamageForce",D:"Returns the amount of force applied to this monster when the given amount of damage is done.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetupFriendly",D:"use this overridden to make some other friendly monsters",W:"CGrenade",C:"CGrenade",J:1},{P:"MonsterInit",D:"Initializes the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"MonsterInitDead",D:"Call after animation/pose is set up",W:"CGrenade",C:"CGrenade",J:1},{P:"BecomeDead",D:"Makes the monster become dead",W:"CGrenade",C:"CGrenade",J:1},{P:"Revive",D:"Revives the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"StartMonster",D:"Starts the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"BestVisibleEnemy",D:"finds best visible enemy for attack",W:"CGrenade",C:"CGrenade",J:1},{P:"FInViewCone",D:"see if pEntity is in monster's view cone",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckLocalMove",D:"finds best visible enemy for attack",W:"CGrenade",C:"CGrenade",J:1},{P:"Move",D:"Starts the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"MoveExecute",D:"Starts the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"ShouldAdvanceRoute",D:"Returns whether this monster should advance its route",W:"CGrenade",C:"CGrenade",J:1},{P:"GetStoppedActivity",D:"Gets the stopped activity",W:"CGrenade",C:"CGrenade",J:1},{P:"Stop",D:"Stops this monster moving",W:"CGrenade",C:"CGrenade",J:1},{P:"StopAnimation",D:"This will stop animation until you call ResetSequenceInfo() at some point in the future",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckRangeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckRangeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckRangeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckRangeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckMeleeAttack1",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckMeleeAttack1_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckMeleeAttack2",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckMeleeAttack2_Move",D:"this function will survey conditions and set appropriate conditions bits for attack types.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckTankUsage",D:"Checks whether the monster can use a func_tank. Return true if possible.",W:"CGrenade",C:"CGrenade",J:1},{P:"FHaveSchedule",D:"Returns whether this monster has a schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"FScheduleValid",D:"Returns whether this monster's schedule is valid.",W:"CGrenade",C:"CGrenade",J:1},{P:"ClearSchedule",D:"Clears this monster's schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"FScheduleDone",D:"Returns whether this monster's schedule is done.",W:"CGrenade",C:"CGrenade",J:1},{P:"ChangeSchedule",D:"Changes this monster's schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"NextScheduledTask",D:"Moves to the next scheduled task.",W:"CGrenade",C:"CGrenade",J:1},{P:"ScheduleInList",D:"Returns the schedule with name szName if it's in the list, NULL otherwise.",W:"CGrenade",C:"CGrenade",J:1},{P:"ScheduleFromName",D:"Returns the schedule with name szName if it exists, NULL otherwise.",W:"CGrenade",C:"CGrenade",J:1},{P:"MaintainSchedule",D:"Maintains the monster's schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"StartTask",D:"Starts the given task.",W:"CGrenade",C:"CGrenade",J:1},{P:"RunTask",D:"Runs the given task.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetScheduleOfType",D:"Gets one of the available schedules of the given type.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetSchedule",D:"Gets the current schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"ScheduleChange",D:"Called after the monster's schedule changes.",W:"CGrenade",C:"CGrenade",J:1},{P:"CanPlaySequence",D:"Returns whether this monster can play its sequence.",W:"CGrenade",C:"CGrenade",J:1},{P:"CanPlaySentence",D:"Returns whether this monster can play its sentence.",W:"CGrenade",C:"CGrenade",J:1},{P:"PlaySentence",D:"Plays the given sentence.",W:"CGrenade",C:"CGrenade",J:1},{P:"PlayScriptedSentence",D:"Plays the given scripted sentence.",W:"CGrenade",C:"CGrenade",J:1},{P:"SentenceStop",D:"Stops playing its current sentence.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetTask",D:"Gets the current task.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetIdealState",D:"Gets the ideal monster state.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetActivity",D:"Sets the current activity.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetGaitActivity",D:"Sets the current gait activity.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetSequenceByName",D:"Sets the current sequence by name.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetState",D:"Sets the current monster state.",W:"CGrenade",C:"CGrenade",J:1},{P:"ReportAIState",D:"Reports the AI state.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckAttacks",D:"Check attacks to the given enemy at the given distance.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckAttacks_Move",D:"Check attacks to the given enemy at the given distance while moving.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckAttacksFromPosition",D:"Check whether attacks are possible from the given position.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckEnemy",D:"part of the Condition collection process, gets and stores data and conditions pertaining to a monster's enemy.\nReturns true if Enemy LKP was updated.",W:"CGrenade",C:"CGrenade",J:1},{P:"PushEnemy",D:"Remember the last few enemies, always remember the player.",W:"CGrenade",C:"CGrenade",J:1},{P:"PopEnemy",D:"Try remembering the last few enemies.",W:"CGrenade",C:"CGrenade",J:1},{P:"FGetNodeRoute",D:"tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists ).",W:"CGrenade",C:"CGrenade",J:1},{P:"TestFGetNodeRoute",D:"TEST FGetNodeRoute.",W:"CGrenade",C:"CGrenade",J:1},{P:"TaskComplete",D:"Sets the task status to complete.",W:"CGrenade",C:"CGrenade",J:1},{P:"MovementComplete",D:"Called when movement has completed.",W:"CGrenade",C:"CGrenade",J:1},{P:"TaskFail",D:"Sets the condition bit for a failed task.",W:"CGrenade",C:"CGrenade",J:1},{P:"TaskBegin",D:"Sets the task status to running.",W:"CGrenade",C:"CGrenade",J:1},{P:"TaskIsRunning",D:"Returns whether a task is running.",W:"CGrenade",C:"CGrenade",J:1},{P:"TaskIsComplete",D:"Returns whether the task is complete.",W:"CGrenade",C:"CGrenade",J:1},{P:"MovementIsComplete",D:"Returns whether movement is complete.",W:"CGrenade",C:"CGrenade",J:1},{P:"IScheduleFlags",D:"Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule's Interrupt mask.",W:"CGrenade",C:"CGrenade",J:1},{P:"MakeIdealYaw",D:"gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster's\nideal_yaw.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetYawSpeed",D:"Allows different yaw_speeds for each activity.",W:"CGrenade",C:"CGrenade",J:1},{P:"RouteClassify",D:"Returns the MOVEGOAL for the given move flag.",W:"CGrenade",C:"CGrenade",J:1},{P:"CheckAttacker",D:"Determine if we should ignore damage.",W:"CGrenade",C:"CGrenade",J:1},{P:"SetConditions",D:"Sets AI conditions.",W:"CGrenade",C:"CGrenade",J:1},{P:"ClearConditions",D:"Clears AI conditions.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasConditions",D:"Returns whether this monster has any of the given AI conditions.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasAllConditions",D:"Returns whether this monster has all of the given AI conditions.",W:"CGrenade",C:"CGrenade",J:1},{P:"PBestSound",D:"Returns a pointer to the sound the monster should react to.",W:"CGrenade",C:"CGrenade",J:1},{P:"FShouldEat",D:"Returns whether this monster should eat.",W:"CGrenade",C:"CGrenade",J:1},{P:"Eat",D:"Make the monster 'full' for a while.",W:"CGrenade",C:"CGrenade",J:1},{P:"FCheckAITrigger",D:"Checks and, if necessary, fires the monster's trigger target.",W:"CGrenade",C:"CGrenade",J:1},{P:"NoFriendlyFire",D:"Returns whether attacking at this time would result in friendly fire",W:"CGrenade",C:"CGrenade",J:1},{P:"NoFriendlyFireToPos",D:"Returns whether attacking the target location at this time would result in friendly fire",W:"CGrenade",C:"CGrenade",J:1},{P:"GetEnemy",D:"Tries to find the best suitable enemy for this monster.",W:"CGrenade",C:"CGrenade",J:1},{P:"GibMonster",D:"Gibs the monster.",W:"CGrenade",C:"CGrenade",J:1},{P:"ShouldGibMonster",D:"Returns whether the monster should be gibbed given the gib type.\nSee GIB enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"CallGibMonster",D:"Determines whether to gib or fade this monster, and acts accordingly.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasHumanGibs",D:"Returns whether this monster has human gibs.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasAlienGibs",D:"Returns whether this monster has alien gibs.",W:"CGrenade",C:"CGrenade",J:1},{P:"FadeMonster",D:"Fades this monster.\nNote: does not kill the monster.",W:"CGrenade",C:"CGrenade",J:1},{P:"ShootAtEnemy",D:"Shoots at the specified location.",W:"CGrenade",C:"CGrenade",J:1},{P:"GetGunPosition",D:"",W:"CGrenade",C:"CGrenade",J:1},{P:"DeathSound",D:"Plays this monster's death sound.",W:"CGrenade",C:"CGrenade",J:1},{P:"AlertSound",D:"Plays this monster's alert sound.",W:"CGrenade",C:"CGrenade",J:1},{P:"IdleSound",D:"Plays this monster's idle sound.",W:"CGrenade",C:"CGrenade",J:1},{P:"PainSound",D:"Plays this monster's pain sound.",W:"CGrenade",C:"CGrenade",J:1},{P:"StartPlayerFollowing",D:"Starts following its target.",W:"CGrenade",C:"CGrenade",J:1},{P:"StopPlayerFollowing",D:"Stops following its target.",W:"CGrenade",C:"CGrenade",J:1},{P:"Remember",D:"Makes this monster remember the given memories.",W:"CGrenade",C:"CGrenade",J:1},{P:"Forget",D:"Makes this monster forget the given memories.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasMemory",D:"Returns whether this monster remembers any of the given memories.",W:"CGrenade",C:"CGrenade",J:1},{P:"HasAllMemories",D:"Returns whether this monster remembers all of the given memories.",W:"CGrenade",C:"CGrenade",J:1},{P:"ExitScriptedSequence",D:"Exits the scripted sequence this monster is currently in, if any.",W:"CGrenade",C:"CGrenade",J:1},{P:"CineCleanup",D:"Cleans up after a cinematic event.",W:"CGrenade",C:"CGrenade",J:1},{P:"DropItem",D:"Drops the given item from the given position at the given angle.",W:"CGrenade",C:"CGrenade",J:1},{P:"ShockGlowEffect",D:"Turns the shock glow effect on or off.",W:"CGrenade",C:"CGrenade",J:1},{P:"FollowerPlayerUse",D:"Use method for following players (set only if friendly)",W:"CGrenade",C:"CGrenade",J:1},{P:"IsPlayerFollowing",D:"Returns whether this monster is following a player.",W:"CGrenade",C:"CGrenade",J:1},{P:"CanPlayerFollow",D:"Returns whether this monster can follow a player.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_szTextureName",D:"Current texture name we're standing on.",W:"CGrenade",C:"CGrenade",J:1},{P:"MedicCallSound",D:"Medic call sound.",W:"CGrenade",C:"CGrenade",J:1},{P:"get_m_pInventory",D:"The inventory items this monster has",W:"CGrenade",C:"CGrenade",J:1},{P:"ClearEnemyList",D:"Clears this monster's list of enemies",W:"CGrenade",C:"CGrenade",J:1},{P:"ApplyEffects",D:"Re-calculate compounded effect modifiers and apply to the monster",W:"CGrenade",C:"CGrenade",J:1},{P:"ResetEffects",D:"Reset all effect modifiers",W:"CGrenade",C:"CGrenade",J:1},{P:"Explode",D:"Makes this grenade explode",W:"CGrenade",C:"CGrenade",J:1},{P:"pev",D:"Entity variables",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CGrenade",C:"CGrenade",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CGrenade",C:"CGrenade",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CGrenade",C:"CGrenade",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CGrenade",C:"CGrenade",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flDelay",D:"Delay before fire.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iszKillTarget",D:"The name of the kill target, if any.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flFrameRate",D:"Computed FPS for current sequence.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flGroundSpeed",D:"Computed linear movement rate for current sequence.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flLastEventCheck",D:"Last time the event list was checked.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flLastGaitEventCheck",D:"Last time the event list was checked.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fSequenceFinished",D:"Flag set when StudioAdvanceFrame moves across a frame boundry.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fSequenceLoops",D:"True if the sequence loops.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_toggle_state",D:"Current toggle state.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flMoveDistance",D:"How far a door should slide or rotate.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flWait",D:"How long to wait before resetting.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flLip",D:"How much to stick out of a wall. Will recede further into walls if negative.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flTWidth",D:"For plats.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flTLength",D:"For plats.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_cTriggersLeft",D:"Trigger_counter only: # of activations remaining.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flHeight",D:"Height.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hActivator",D:"Handle to the activator.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecPosition1",D:"Closed position.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecPosition2",D:"Open position.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecAngle1",D:"Closed angle.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecAngle2",D:"Open angle.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecFinalDest",D:"Final destination.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecFinalAngle",D:"Final angle.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_bitsDamageInflict",D:"DMG_ damage type that the door or trigger does.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_sMaster",D:"This entity's master, if any.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hEnemy",D:"the entity that the monster is fighting.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hTargetEnt",D:"the entity that the monster is trying to reach.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hTargetTank",D:"Target tank to control.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flFieldOfView",D:"width of monster's field of view ( dot product ).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flWaitFinished",D:"if we're told to wait, this is the time that the wait will be over.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flMoveWaitFinished",D:"if we're told to wait before moving, this is the time that the wait will be over.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_Activity",D:"what the monster is doing (animation).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_IdealActivity",D:"monster should switch to this activity.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_GaitActivity",D:"gaitsequence.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_LastHitGroup",D:"the last body region that took damage.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_MonsterState",D:"monster's current state.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_IdealMonsterState",D:"monster should change to this state.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iTaskStatus",D:"Task status.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_pSchedule",D:"Current schedule.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_pScheduleSaved",D:"For land_on_ground schedules (remember last schedule and continue).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iScheduleIndex",D:"Schedule index.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_movementGoal",D:"Goal that defines route.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iRouteIndex",D:"Index into m_Route[].",W:"CGrenade",C:"CGrenade",J:1},{P:"m_moveWaitTime",D:"How long I should wait for something to move.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_moveradius",D:"Minimum radius.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecMoveGoal",D:"Kept around for node graph moves, so we know our ultimate goal.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_movementActivity",D:"When moving, set this activity.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iAudibleList",D:"first index of a linked list of sounds that the monster can hear.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_afSoundTypes",D:"Sound types that can be heard.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecLastPosition",D:"monster sometimes wants to return to where it started after an operation..",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iHintNode",D:"this is the hint node that the monster is moving towards or performing active idle on..",W:"CGrenade",C:"CGrenade",J:1},{P:"m_afMemory",D:"Monster memory.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_bloodColor",D:"color of blood particles.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iMaxHealth",D:"keeps track of monster's maximum health value (for re-healing, etc).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecEnemyLKP",D:"last known position of enemy. (enemy's origin).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_cAmmoLoaded",D:"how much ammo is in the weapon (used to trigger reload anim sequences).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_afCapability",D:"tells us what a monster can/can't do.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_afMoveShootCap",D:"tells us what a monster can/can't do, while moving.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flNextAttack",D:"cannot attack again until this time.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_bitsDamageType",D:"what types of damage has monster (player) taken.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_lastDamageAmount",D:"how much damage did monster (player) last take.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_tbdPrev",D:"Time-based damage timer.",W:"CGrenade",C:"CGrenade",J:1},{P:"pevTimeBasedInflictor",D:"Time based damage inflictor.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_failSchedule",D:"Schedule type to choose if current schedule fails.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flHungryTime",D:"Time based damage inflictor.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flDistTooFar",D:"if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flDistLook",D:"distance monster sees (Default 2048).",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iTriggerCondition",D:"for scripted AI, this is the condition that will cause the activation of the monster's TriggerTarget.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iszTriggerTarget",D:"Name of target that should be fired.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_HackedGunPos",D:"HACK until we can query end of gun.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_scriptState",D:"internal cinematic state.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hCine",D:"Cinematic entity.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hCineBlocker",D:"Entity that is blocking cinematic execution.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_useTime",D:"Don't allow +USE until this time.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_FormattedName",D:"The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\".",W:"CGrenade",C:"CGrenade",J:1},{P:"m_chTextureType",D:"Current texture type.\nSee TextureType enum.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_fCanFearCreatures",D:"Whether this monster can fear creatures.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flAutomaticAttackTime",D:"How long an npc will attempt to fire full auto.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flFallVelocity",D:"Current fall speed.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_hGuardEnt",D:"Monster will guard this entity and turn down follow requests.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iszGuardEntName",D:"Guard entity name.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_vecEffectGlowColor",D:"Glow shell.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iEffectBlockWeapons",D:"Monster can't use weapons.",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iEffectInvulnerable",D:"is invulnerable (god mode)",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iEffectInvisible",D:"is invisible (render + non-targetable)",W:"CGrenade",C:"CGrenade",J:1},{P:"m_iEffectNonSolid",D:"is non-solid",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flEffectRespiration",D:"Extra/less breathing time underwater in seconds",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flEffectGravity",D:"Gravity modifier (%)",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flEffectFriction",D:"Movement friction modifier (%)",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flEffectSpeed",D:"Movement speed modifier (%)",W:"CGrenade",C:"CGrenade",J:1},{P:"m_flEffectDamage",D:"Damage modifier (%)",W:"CGrenade",C:"CGrenade",J:1},{P:"char",D:"Char value type",W:"char",C:"Class"},{P:"char",D:"Default constructor",W:"char",C:"char",J:1},{P:"opAssign",D:"Assigns one character to another.",W:"char",C:"char",J:1},{P:"opImplConv",D:"Implicitly converts this character to an unsigned 32 bit integer.",W:"char",C:"char",J:1},{P:"opEquals",D:"Compares this char with the given character.",W:"char",C:"char",J:1},{P:"CInventoryMisc",D:"Misc functions for handling inventories across classes",W:"CInventoryMisc",C:"Class"},{P:"IsValidInventoryHolder",D:"Returns whether the given entity is a valid inventory holder",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"CheckTokenStringRule",D:"Returns whether the given value is in the given rule",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"Count",D:"Counts the number of inventory items held by the given holder",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"GetWeight",D:"Gets the total weight of all inventory items held by the given holder",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"ExistsInGroup",D:"Counts all the existing items in a group",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"HaveNumFromGroup",D:"Returns count of how many items someone holds of a group",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"HasAllInGroup",D:"Returns true if is holding all items of a group",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"RemoveAllFromHolder",D:"Clears all held inventory",W:"CInventoryMisc",C:"CInventoryMisc",J:1},{P:"CItem",D:"Generic item class",W:"CItem",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CItem",C:"CItem",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CItem",C:"CItem",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CItem",C:"CItem",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CItem",C:"CItem",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CItem",C:"CItem",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CItem",C:"CItem",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CItem",C:"CItem",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CItem",C:"CItem",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CItem",C:"CItem",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CItem",C:"CItem",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CItem",C:"CItem",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CItem",C:"CItem",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CItem",C:"CItem",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CItem",C:"CItem",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CItem",C:"CItem",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CItem",C:"CItem",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CItem",C:"CItem",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CItem",C:"CItem",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CItem",C:"CItem",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CItem",C:"CItem",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CItem",C:"CItem",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CItem",C:"CItem",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CItem",C:"CItem",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CItem",C:"CItem",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CItem",C:"CItem",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CItem",C:"CItem",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CItem",C:"CItem",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CItem",C:"CItem",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CItem",C:"CItem",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CItem",C:"CItem",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CItem",C:"CItem",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CItem",C:"CItem",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CItem",C:"CItem",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CItem",C:"CItem",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CItem",C:"CItem",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CItem",C:"CItem",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CItem",C:"CItem",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CItem",C:"CItem",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CItem",C:"CItem",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CItem",C:"CItem",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CItem",C:"CItem",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CItem",C:"CItem",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CItem",C:"CItem",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CItem",C:"CItem",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CItem",C:"CItem",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CItem",C:"CItem",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CItem",C:"CItem",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CItem",C:"CItem",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CItem",C:"CItem",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CItem",C:"CItem",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CItem",C:"CItem",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CItem",C:"CItem",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CItem",C:"CItem",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CItem",C:"CItem",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CItem",C:"CItem",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CItem",C:"CItem",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CItem",C:"CItem",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CItem",C:"CItem",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CItem",C:"CItem",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CItem",C:"CItem",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CItem",C:"CItem",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CItem",C:"CItem",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CItem",C:"CItem",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CItem",C:"CItem",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CItem",C:"CItem",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CItem",C:"CItem",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CItem",C:"CItem",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CItem",C:"CItem",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CItem",C:"CItem",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CItem",C:"CItem",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CItem",C:"CItem",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CItem",C:"CItem",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CItem",C:"CItem",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CItem",C:"CItem",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CItem",C:"CItem",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CItem",C:"CItem",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CItem",C:"CItem",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CItem",C:"CItem",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CItem",C:"CItem",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CItem",C:"CItem",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CItem",C:"CItem",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CItem",C:"CItem",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CItem",C:"CItem",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CItem",C:"CItem",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CItem",C:"CItem",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CItem",C:"CItem",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CItem",C:"CItem",J:1},{P:"Center",D:"Returns this entity's center.",W:"CItem",C:"CItem",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CItem",C:"CItem",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CItem",C:"CItem",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CItem",C:"CItem",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CItem",C:"CItem",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CItem",C:"CItem",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CItem",C:"CItem",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CItem",C:"CItem",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CItem",C:"CItem",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CItem",C:"CItem",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CItem",C:"CItem",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CItem",C:"CItem",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CItem",C:"CItem",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CItem",C:"CItem",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CItem",C:"CItem",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CItem",C:"CItem",J:1},{P:"ItemTouch",D:"Item touch function",W:"CItem",C:"CItem",J:1},{P:"Materialize",D:"Makes this entity visible and tangible.",W:"CItem",C:"CItem",J:1},{P:"MyTouch",D:"The item's touch function.",W:"CItem",C:"CItem",J:1},{P:"pev",D:"Entity variables",W:"CItem",C:"CItem",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CItem",C:"CItem",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CItem",C:"CItem",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CItem",C:"CItem",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CItem",C:"CItem",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CItem",C:"CItem",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CItem",C:"CItem",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CItem",C:"CItem",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CItem",C:"CItem",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CItem",C:"CItem",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CItem",C:"CItem",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CItem",C:"CItem",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CItem",C:"CItem",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CItem",C:"CItem",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CItem",C:"CItem",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CItem",C:"CItem",J:1},{P:"CItemInventory",D:"Item_inventory entity class\nCollection rules -- DENY/CAN'T have rules take precedence over REQUIRE/MUST\nAll string filters can be tokenized with a semi-colon ';'",W:"CItemInventory",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CItemInventory",C:"CItemInventory",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Center",D:"Returns this entity's center.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"CanCollect",D:"Returns whether this item can be collected by the given entity.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Drop",D:"Drops this item, if it's being carried.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Return",D:"Returns this item to its original spawn location.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"Destroy",D:"Destroys this item.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"AddItemEffects",D:"Prepares to add effects to holder.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"RemoveItemEffects",D:"Prepares to remove effects from holder.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"pev",D:"Entity variables",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CItemInventory",C:"CItemInventory",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_hHolder",D:"The monster or player holding this item.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_vecSpawnOrigin",D:"Spawn-time origin.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_vecSpawnAngles",D:"Spawn-time angles.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iMoveType",D:"Spawn-time move type.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szItemName",D:"Item name referred to by triggers, doesn't need to be unique -- remember the targetname refers to the entity itself only.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szItemGroup",D:"Group name referred to by triggers.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szDisplayName",D:"Friendly item name for client-side UI.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szDescription",D:"Friendly item description for client-side UI.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCollectLimit",D:"How many times the item can be picked up, destroyed when limit is reached (0 = infinite).",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flWeight",D:"How heavy the item is (0-100),\nholders can hold multiple items up to a total weight 100, think of this as KG if you like (though what person can carry 100KG!?).",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fHiddenWhenCarried",D:"Model is hidden while it is being carried.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iIdleSkin",D:"Model skin while IDLE (not carried).",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iIdleBody",D:"Model body while IDLE.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szIdleSequenceName",D:"Model sequence name while IDLE.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iIdleSequence",D:"Model sequence number while IDLE.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCarriedSkin",D:"Model skin while CARRIED.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCarriedBody",D:"Model body while CARRIED.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szCarriedSequenceName",D:"Model sequence name while CARRIED.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCarriedSequence",D:"Model sequence number while CARRIED.",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szAllowedTargetNames",D:"CBaseEntity target name filters",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szAllowedClassNames",D:"CBaseEntity class name filters",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szAllowedTeams",D:"Team filters",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iAllowedNpcClassify",D:"NPC classification filter",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szRequiresItemName",D:"Require these item(s)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szRequiresItemGroup",D:"Require an item from these group(s)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iRequiresItemGroupNum",D:"Number of item(s) from the required group(s) required (0 = all)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szItemNameMoved",D:"These item(s) must have moved",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szCantHaveItemName",D:"Must not have these item(s)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szCantHaveItemGroup",D:"Must not have an item in these group(s)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCantHaveItemGroupNum",D:"Number of item(s) from the can't have group(s) (0 = all)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szItemNameNotMoved",D:"These item(s) must NOT have moved",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flMaximumHoldTime",D:"Limit to how long this item can be held for, forcibly dropped after (0 = no limit)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flWearOutTime",D:"Perform a trigger prior to this item being forcibly dropped (0 = none)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fCanBeDropped",D:"Holder is allowed to drop this item by choice",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flReturnTime",D:"How long this item returns to its' original location when dropped (-1 = never, 0 = instant)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fDelayedRespawn",D:"Delayed respawn on return (like with weapons/ammo/pickups)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fKeepOnDeath",D:"Holder still has the item after dying (i.e. so they can keep it while being revived)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fKeepOnRespawn",D:"Holder still has the item after respawning (only applies to players -- re-equip NPC's manually)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCollectSelf",D:"On successful collection (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCollectTeam",D:"On successful collection (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCollectOther",D:"On successful collection (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantCollectSelf",D:"On failed collection (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantCollectTeam",D:"On failed collection (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantCollectOther",D:"On failed collection (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnDropSelf",D:"On successful drop (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnDropTeam",D:"On successful drop (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnDropOther",D:"On successful drop (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantDropSelf",D:"On failed drop (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantDropTeam",D:"On failed drop (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnCantDropOther",D:"On failed drop (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnUseSelf",D:"On use by trigger (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnUseTeam",D:"On use by trigger (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnUseOther",D:"On use by trigger (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnWearingOutSelf",D:"On wearing out (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnWearingOutTeam",D:"On wearing out (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnWearingOutOther",D:"On wearing out (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnReturnSelf",D:"On return (for collector)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnReturnTeam",D:"On return (for collector's team)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnReturnOther",D:"On return (for everyone else)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnMaterialise",D:"On materialise after return",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_szTriggerOnDestroy",D:"On destroy",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fEffectsPermanent",D:"Holder keeps effects after dropping the item",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_vecEffectGlowColor",D:"Holder has a glow shell",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fEffectBlockWeapons",D:"Holder can't use weapons",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fEffectInvulnerable",D:"Holder is invulnerable (god mode)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fEffectInvisible",D:"Holder is invisible (render + non-targetable)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fEffectNonSolid",D:"Holder is non-solid",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flEffectRespiration",D:"Extra/less breathing time underwater in seconds",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flEffectGravity",D:"Gravity modifier (%)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flEffectFriction",D:"Movement friction modifier (%)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flEffectSpeed",D:"Movement speed modifier (%)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flEffectDamage",D:"Damage modifier (%)",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_iCollectCount",D:"Number of times the item has been collected",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flTouchedTime",D:"Time the item was last touched",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flCollectTime",D:"Time the item was last collected",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_flDropTime",D:"Time the item was last dropped",W:"CItemInventory",C:"CItemInventory",J:1},{P:"m_fRemovedByForced",D:"Item was just removed by force",W:"CItemInventory",C:"CItemInventory",J:1},{P:"CItemRegistry",D:"Item registry.",W:"CItemRegistry",C:"Class"},{P:"GetIdForName",D:"Gets the id associated with the given weapon name. Returns WEAPON_NONE if no id is associated with the given name.",W:"CItemRegistry",C:"CItemRegistry",J:1},{P:"RegisterItem",D:"Registers the given entity name as an item and returns the id associated with it.\nReturns WEAPON_NONE if no id could be assigned to it.",W:"CItemRegistry",C:"CItemRegistry",J:1},{P:"RegisterWeapon",D:"Registers the given entity name as a weapon and returns the id associated with it.\nReturns WEAPON_NONE if no id could be assigned to it.",W:"CItemRegistry",C:"CItemRegistry",J:1},{P:"CLaser",D:"Laser class",W:"CLaser",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CLaser",C:"CLaser",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CLaser",C:"CLaser",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CLaser",C:"CLaser",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CLaser",C:"CLaser",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CLaser",C:"CLaser",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CLaser",C:"CLaser",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CLaser",C:"CLaser",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CLaser",C:"CLaser",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CLaser",C:"CLaser",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CLaser",C:"CLaser",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CLaser",C:"CLaser",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CLaser",C:"CLaser",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CLaser",C:"CLaser",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CLaser",C:"CLaser",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CLaser",C:"CLaser",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CLaser",C:"CLaser",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CLaser",C:"CLaser",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CLaser",C:"CLaser",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CLaser",C:"CLaser",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CLaser",C:"CLaser",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CLaser",C:"CLaser",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CLaser",C:"CLaser",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CLaser",C:"CLaser",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CLaser",C:"CLaser",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CLaser",C:"CLaser",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CLaser",C:"CLaser",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CLaser",C:"CLaser",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CLaser",C:"CLaser",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CLaser",C:"CLaser",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CLaser",C:"CLaser",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CLaser",C:"CLaser",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CLaser",C:"CLaser",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CLaser",C:"CLaser",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CLaser",C:"CLaser",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CLaser",C:"CLaser",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CLaser",C:"CLaser",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CLaser",C:"CLaser",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CLaser",C:"CLaser",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CLaser",C:"CLaser",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CLaser",C:"CLaser",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CLaser",C:"CLaser",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CLaser",C:"CLaser",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CLaser",C:"CLaser",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CLaser",C:"CLaser",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CLaser",C:"CLaser",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CLaser",C:"CLaser",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CLaser",C:"CLaser",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CLaser",C:"CLaser",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CLaser",C:"CLaser",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CLaser",C:"CLaser",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CLaser",C:"CLaser",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CLaser",C:"CLaser",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CLaser",C:"CLaser",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CLaser",C:"CLaser",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CLaser",C:"CLaser",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CLaser",C:"CLaser",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CLaser",C:"CLaser",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CLaser",C:"CLaser",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CLaser",C:"CLaser",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CLaser",C:"CLaser",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CLaser",C:"CLaser",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CLaser",C:"CLaser",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CLaser",C:"CLaser",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CLaser",C:"CLaser",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CLaser",C:"CLaser",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CLaser",C:"CLaser",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CLaser",C:"CLaser",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CLaser",C:"CLaser",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CLaser",C:"CLaser",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CLaser",C:"CLaser",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CLaser",C:"CLaser",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CLaser",C:"CLaser",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CLaser",C:"CLaser",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CLaser",C:"CLaser",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CLaser",C:"CLaser",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CLaser",C:"CLaser",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CLaser",C:"CLaser",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CLaser",C:"CLaser",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CLaser",C:"CLaser",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CLaser",C:"CLaser",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CLaser",C:"CLaser",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CLaser",C:"CLaser",J:1},{P:"Center",D:"Returns this entity's center.",W:"CLaser",C:"CLaser",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CLaser",C:"CLaser",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CLaser",C:"CLaser",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CLaser",C:"CLaser",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CLaser",C:"CLaser",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CLaser",C:"CLaser",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CLaser",C:"CLaser",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CLaser",C:"CLaser",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CLaser",C:"CLaser",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CLaser",C:"CLaser",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CLaser",C:"CLaser",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CLaser",C:"CLaser",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CLaser",C:"CLaser",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CLaser",C:"CLaser",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CLaser",C:"CLaser",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CLaser",C:"CLaser",J:1},{P:"SetType",D:"Sets the type of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"SetFlags",D:"Sets the flags of the beam. Must be a combination of BeamFlags values, or 0.",W:"CLaser",C:"CLaser",J:1},{P:"SetStartPos",D:"Sets the starting position of the beam. Must be a beam of type BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE.",W:"CLaser",C:"CLaser",J:1},{P:"SetEndPos",D:"Sets the ending position of the beam. Must be a beam of type BEAM_POINTS or BEAM_HOSE.",W:"CLaser",C:"CLaser",J:1},{P:"SetStartEntity",D:"Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS.",W:"CLaser",C:"CLaser",J:1},{P:"SetEndEntity",D:"Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT.",W:"CLaser",C:"CLaser",J:1},{P:"SetStartAttachment",D:"Sets the start attachment of the beam. Attachment is a point on the entity's model. Must be a beam of type BEAM_ENTS. Set to 0 to disable.",W:"CLaser",C:"CLaser",J:1},{P:"SetEndAttachment",D:"Sets the end attachment of the beam. Attachment is a point on the entity's model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set to 0 to disable.",W:"CLaser",C:"CLaser",J:1},{P:"SetTexture",D:"Sets the sprite to use. The index is the one returned from CGame::PrecacheModel.",W:"CLaser",C:"CLaser",J:1},{P:"SetWidth",D:"Sets the width of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"SetNoise",D:"Sets the noise (amplitude) of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"SetColor",D:"Sets the color of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"SetBrightness",D:"Sets the brightness of the beam. Value is between 0-255.",W:"CLaser",C:"CLaser",J:1},{P:"SetFrame",D:"Sets the frame number of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"SetScrollRate",D:"Sets the scroll rate of the beam.",W:"CLaser",C:"CLaser",J:1},{P:"GetStartPos",D:"Gets the beam's starting position.",W:"CLaser",C:"CLaser",J:1},{P:"GetEndPos",D:"Gets the beam's ending position.",W:"CLaser",C:"CLaser",J:1},{P:"GetTexture",D:"Gets the beam's texture (sprite) index.",W:"CLaser",C:"CLaser",J:1},{P:"GetWidth",D:"Gets the beam's width.",W:"CLaser",C:"CLaser",J:1},{P:"GetNoise",D:"Gets the beam's noise.",W:"CLaser",C:"CLaser",J:1},{P:"GetColor",D:"Gets the beam's color.",W:"CLaser",C:"CLaser",J:1},{P:"GetBrightness",D:"Gets the beam's brightness.",W:"CLaser",C:"CLaser",J:1},{P:"GetFrame",D:"Gets the beam's frame number.",W:"CLaser",C:"CLaser",J:1},{P:"GetScrollRate",D:"Gets the beam's scroll rate.",W:"CLaser",C:"CLaser",J:1},{P:"RelinkBeam",D:"Call after you change start/end positions.",W:"CLaser",C:"CLaser",J:1},{P:"DoSparks",D:"Creates sparks at the given start and end points, if appropriate spawn flags are set.",W:"CLaser",C:"CLaser",J:1},{P:"BeamDamage",D:"Damages the entity hit by the given trace line with the amount set in this entity's pev->dmg variable.\nAlso applies decals to BSP models if the appropriate spawnflag is set.",W:"CLaser",C:"CLaser",J:1},{P:"BeamInit",D:"Initializes this beam with default values and sets the given sprite as the sprite used, with the given width.",W:"CLaser",C:"CLaser",J:1},{P:"PointsInit",D:"Initializes this beam to be a beam between 2 given points (BEAM_POINTS).",W:"CLaser",C:"CLaser",J:1},{P:"PointEntInit",D:"Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT).",W:"CLaser",C:"CLaser",J:1},{P:"EntsInit",D:"Initializes this beam to be a beam between 2 given entities (BEAM_ENTS).",W:"CLaser",C:"CLaser",J:1},{P:"HoseInit",D:"Initializes this beam to be a beam going from a point in a given direction (BEAM_HOSE).",W:"CLaser",C:"CLaser",J:1},{P:"LiveForTime",D:"Sets this beam to live for the given amount of time, after which it is removed.",W:"CLaser",C:"CLaser",J:1},{P:"BeamDamageInstant",D:"Causes the given amount of damage to be done to the entity hit by the given traceresult, as if the damage occured one second ago.",W:"CLaser",C:"CLaser",J:1},{P:"XenTeleportZap",D:"Creates a Xen teleport zap effect between the given points.",W:"CLaser",C:"CLaser",J:1},{P:"XenTeleport",D:"Creates a Xen teleport effect at the given location, with zaps occuring within the given radius.",W:"CLaser",C:"CLaser",J:1},{P:"TurnOn",D:"Turns the laser on",W:"CLaser",C:"CLaser",J:1},{P:"TurnOff",D:"Turns the laser off",W:"CLaser",C:"CLaser",J:1},{P:"IsOn",D:"Returns whether the laser is on",W:"CLaser",C:"CLaser",J:1},{P:"FireAtPoint",D:"Fires the laser at a point defined by where the TraceResult hit.\nAlso causes beam damage as if CBeam::BeamDamage were used, and sparks at both ends, if the approprite spawn flags have been set.",W:"CLaser",C:"CLaser",J:1},{P:"pev",D:"Entity variables",W:"CLaser",C:"CLaser",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CLaser",C:"CLaser",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CLaser",C:"CLaser",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CLaser",C:"CLaser",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CLaser",C:"CLaser",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CLaser",C:"CLaser",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CLaser",C:"CLaser",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CLaser",C:"CLaser",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CLaser",C:"CLaser",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CLaser",C:"CLaser",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CLaser",C:"CLaser",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CLaser",C:"CLaser",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CLaser",C:"CLaser",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CLaser",C:"CLaser",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CLaser",C:"CLaser",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CLaser",C:"CLaser",J:1},{P:"CLog",D:"This class can log data to the Angelscript log file.",W:"CLog",C:"Class"},{P:"PrintF",D:"Prints formatted data to the file. Uses SC printf formatting style.",W:"CLog",C:"CLog",J:1},{P:"CMap",D:"Map state variables",W:"CMap",C:"Class"},{P:"HasForcedPlayerModels",D:"Get if player models are forced",W:"CMap",C:"CMap",J:1},{P:"LoadMapSkillFile",D:"Reload the standard map skill file (_skl.cfg).",W:"CMap",C:"CMap",J:1},{P:"LoadGlobalSkillFile",D:"Reload the global skill file.",W:"CMap",C:"CMap",J:1},{P:"LoadSkillFile",D:"Load a custom skill file.",W:"CMap",C:"CMap",J:1},{P:"CMapCycle",D:"Map cycle read only manager",W:"CMapCycle",C:"Class"},{P:"GetMapCycle",D:"Gets the map cycle as an array of strings.",W:"CMapCycle",C:"CMapCycle",J:1},{P:"Count",D:"Returns the number of maps in the map cycle.",W:"CMapCycle",C:"CMapCycle",J:1},{P:"GetNextMap",D:"Gets the next map in the cycle.",W:"CMapCycle",C:"CMapCycle",J:1},{P:"CMath",D:"Math functions",W:"CMath",C:"Class"},{P:"RandomLong",D:"Returns a random integer between low and high",W:"CMath",C:"CMath",J:1},{P:"RandomFloat",D:"Returns a random float between low and high",W:"CMath",C:"CMath",J:1},{P:"MakeVectors",D:"Makes vectors",W:"CMath",C:"CMath",J:1},{P:"RotateVector",D:"Rotate vector",W:"CMath",C:"CMath",J:1},{P:"MakeAimVectors",D:"Make aim vectors",W:"CMath",C:"CMath",J:1},{P:"MakeInvVectors",D:"Make inverted vectors",W:"CMath",C:"CMath",J:1},{P:"VecToYaw",D:"Transforms a vector to a yaw value",W:"CMath",C:"CMath",J:1},{P:"VecToAngles",D:"Transforms a vector to an angle",W:"CMath",C:"CMath",J:1},{P:"AngleMod",D:"Clamps the given angle between 0 and 360",W:"CMath",C:"CMath",J:1},{P:"AngleDiff",D:"Returns the difference between 2 angles",W:"CMath",C:"CMath",J:1},{P:"ApproachAngle",D:"Given a target and current angle value, and a rotation speed, all in degrees, returns a new angle that is either between value and target, or target, depending on whether the speed is high enough to reach that angle.",W:"CMath",C:"CMath",J:1},{P:"AngleDistance",D:"Returns the distance between 2 angles",W:"CMath",C:"CMath",J:1},{P:"min",D:"Returns the smaller of the two values",W:"CMath",C:"CMath",J:1},{P:"max",D:"Returns the larger of the two values",W:"CMath",C:"CMath",J:1},{P:"clamp",D:"Clamps a value between a range",W:"CMath",C:"CMath",J:1},{P:"Floor",D:"Returns the float value, rounded down to the nearest whole number",W:"CMath",C:"CMath",J:1},{P:"Ceil",D:"Returns the float value, rounded up to the nearest whole number",W:"CMath",C:"CMath",J:1},{P:"DegreesToRadians",D:"Returns the given value in degrees as radians",W:"CMath",C:"CMath",J:1},{P:"RadiansToDegrees",D:"Returns the given value in radians as degrees",W:"CMath",C:"CMath",J:1},{P:"Compare",D:"Compares the given floating point variables and returns whether they are equal, considering certain variance (epsilon) between them.",W:"CMath",C:"CMath",J:1},{P:"EffloRandomInt",D:"Get Random number in int",W:"CMath",C:"CMath",J:1},{P:"EffloRandomFloat",D:"Get Random number in float",W:"CMath",C:"CMath",J:1},{P:"EffloRandomUInt",D:"Get Random number in uint",W:"CMath",C:"CMath",J:1},{P:"INT8_MIN",D:"Int8 minimum value",W:"CMath",C:"CMath",J:1},{P:"INT16_MIN",D:"Int16 minimum value",W:"CMath",C:"CMath",J:1},{P:"INT32_MIN",D:"Int32 minimum value",W:"CMath",C:"CMath",J:1},{P:"INT64_MIN",D:"Int64 minimum value",W:"CMath",C:"CMath",J:1},{P:"INT8_MAX",D:"Int8 maximum value",W:"CMath",C:"CMath",J:1},{P:"INT16_MAX",D:"Int16 maximum value",W:"CMath",C:"CMath",J:1},{P:"INT32_MAX",D:"Int32 maximum value",W:"CMath",C:"CMath",J:1},{P:"INT64_MAX",D:"Int64 maximum value",W:"CMath",C:"CMath",J:1},{P:"UINT8_MAX",D:"Uint8 maximum value",W:"CMath",C:"CMath",J:1},{P:"UINT16_MAX",D:"Uint16 maximum value",W:"CMath",C:"CMath",J:1},{P:"UINT32_MAX",D:"Uint32 maximum value",W:"CMath",C:"CMath",J:1},{P:"UINT64_MAX",D:"Uint64 maximum value",W:"CMath",C:"CMath",J:1},{P:"SIZE_MAX",D:"Size_t maximum value",W:"CMath",C:"CMath",J:1},{P:"FLOAT_MIN",D:"Float minimum positive value",W:"CMath",C:"CMath",J:1},{P:"DOUBLE_MIN",D:"Double minimum positive value",W:"CMath",C:"CMath",J:1},{P:"FLOAT_MAX",D:"Float maximum positive value",W:"CMath",C:"CMath",J:1},{P:"DOUBLE_MAX",D:"Double maximum positive value",W:"CMath",C:"CMath",J:1},{P:"PI",D:"PI",W:"CMath",C:"CMath",J:1},{P:"CModelFuncs",D:"Model functions",W:"CModelFuncs",C:"Class"},{P:"ModelIndex",D:"Gets model index.",W:"CModelFuncs",C:"CModelFuncs",J:1},{P:"SetBodygroup",D:"Builds bodygroup configuration.",W:"CModelFuncs",C:"CModelFuncs",J:1},{P:"GetBodygroup",D:"Gets bodygroup configuration.",W:"CModelFuncs",C:"CModelFuncs",J:1},{P:"GetBodygroupSubmodelCount",D:"Gets the number of submodels.",W:"CModelFuncs",C:"CModelFuncs",J:1},{P:"GetAttachmentCount",D:"Gets the number of attachments in a model.",W:"CModelFuncs",C:"CModelFuncs",J:1},{P:"CModule",D:"Module class.\nRepresents this module.",W:"CModule",C:"Class"},{P:"GetModuleName",D:"Gets the name of this module.",W:"CModule",C:"CModule",J:1},{P:"get_ScriptInfo",D:"Gets this module's script info object.",W:"CModule",C:"CModule",J:1},{P:"CModuleHookManager",D:"Module hook manager",W:"CModuleHookManager",C:"Class"},{P:"RegisterHook",D:"Registers a hook. Pass in a hook function or delegate.",W:"CModuleHookManager",C:"CModuleHookManager",J:1},{P:"RemoveHook",D:"Removes all functions hooked into the given hook.",W:"CModuleHookManager",C:"CModuleHookManager",J:1},{P:"CPathCondition",D:"Path condition entity",W:"CPathCondition",C:"Class"},{P:"CPathTrack",D:"Path track class",W:"CPathTrack",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CPathTrack",C:"CPathTrack",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CPathTrack",C:"CPathTrack",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Center",D:"Returns this entity's center.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"SetPrevious",D:"Sets the previous track in this path",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Link",D:"Links the tracks together",W:"CPathTrack",C:"CPathTrack",J:1},{P:"ValidPath",D:"Returns pPath if enabled, null otherwise.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Project",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"LookAhead",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"Nearest",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetNext",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"GetPrevious",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"pev",D:"Entity variables",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CPathTrack",C:"CPathTrack",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_length",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_altName",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_hNext",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_hPrevious",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_hAltpath",D:"",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_flMaxSpeed",D:"New maximum speed",W:"CPathTrack",C:"CPathTrack",J:1},{P:"m_flNewSpeed",D:"New train speed",W:"CPathTrack",C:"CPathTrack",J:1},{P:"CPersistence",D:"Persistence manager",W:"CPersistence",C:"Class"},{P:"Exists",D:"Returns whether the given persistence instance exists.",W:"CPersistence",C:"CPersistence",J:1},{P:"IsValidHandle",D:"Returns whether the given persistence instance handle is valid.",W:"CPersistence",C:"CPersistence",J:1},{P:"ShouldKeep",D:"Returns whether the previous map's persistence instances will be kept.",W:"CPersistence",C:"CPersistence",J:1},{P:"SetKeep",D:"Sets whether the previous map's persistence instances will be kept.",W:"CPersistence",C:"CPersistence",J:1},{P:"KeepIfPrevious",D:"Will make the persistence manager keep the previous map's persistence instancesif the previous map's name matches any of the elements in the array.",W:"CPersistence",C:"CPersistence",J:1},{P:"RegisterInstance",D:"Returns a persistence instance tied to the given name. Will be created if it does not already exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetPreviousMapName",D:"Returns the name of the previous map. Can be empty if the server has just started.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetCurrentMapName",D:"Returns the name of the current map.",W:"CPersistence",C:"CPersistence",J:1},{P:"ClearInstance",D:"Clears the specified persistence instance.",W:"CPersistence",C:"CPersistence",J:1},{P:"Clear",D:"Clears all persistence instances.\nMake sure to avoid calling handles referencing the cleared instances.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetName",D:"Returns the name of this instance.",W:"CPersistence",C:"CPersistence",J:1},{P:"Size",D:"Returns the number of persisted items in this instance.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetString",D:"Returns the given value as a string, or  if it does not exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetBoolean",D:"Returns the given value as a boolean, or false if it does not exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetLong",D:"Returns the given value as a long, or 0 if it does not exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetUlong",D:"Returns the given value as a unsigned long, or 0 if it does not exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"GetFloat",D:"Returns the given value as a float, or 0.0 if it does not exist.",W:"CPersistence",C:"CPersistence",J:1},{P:"Set",D:"Sets the given value as a string.",W:"CPersistence",C:"CPersistence",J:1},{P:"INVALID_ID",D:"Id used by invalid persistence objects.",W:"CPersistence",C:"CPersistence",J:1},{P:"CPlayerFuncs",D:"Global player functions",W:"CPlayerFuncs",C:"Class"},{P:"SayText",D:"Says text to a specific player",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"SayTextAll",D:"Says text to all players",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ClientPrint",D:"Prints one or more messages on the HUD of the given player.\nSee HUD enum.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ClientPrintAll",D:"Prints one or more messages on the HUD of all players.\nSee HUD enum.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"CenterPrintAll",D:"Prints one or more messages centered on the HUD of all players.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ShowMessage",D:"Shows a message to the given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ShowMessageAll",D:"Shows a message to all players.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudMessage",D:"Shows a HUD message to a given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudMessageAll",D:"Shows a HUD message to all players.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"PrintKeyBindingString",D:"Prints a string containing key bindings to the screen of the given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"PrintKeyBindingStringAll",D:"Prints a string containing key bindings to the screen of all players.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudToggleElement",D:"Shows or hides HUD element occupying a given channel.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudCustomSprite",D:"Shows a custom HUD sprite to a given player or to all players if pTargetPlayer is not specified.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudNumDisplay",D:"Shows a custom numeric display to a given player or to all players if pTargetPlayer is not specified.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudUpdateNum",D:"Updates value of a custom numberic display.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudTimeDisplay",D:"Shows a custom time display to a given player or to all players if pTargetPlayer is not specified.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"HudUpdateTime",D:"Updates value of a custom time display.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"FindPlayerByIndex",D:"Finds a player by index",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"FindPlayerByName",D:"Finds a player by name",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"GetNumPlayers",D:"Gets the number of players that are currently connected to the server.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ScreenShake",D:"Shakes the screen for players near a certain location",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ScreenShakeAll",D:"Shakes the screen for all players",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ScreenFade",D:"Shows a message to a given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ScreenFadeAll",D:"Shows a message to all players.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ConcussionEffect",D:"Applies concussion effect to a given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"GetNextBestWeapon",D:"Makes the given player select the next best weapon available, based on the current weapon.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"CheatsAllowed",D:"Returns whether cheats are enabled for the given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"AdminLevel",D:"Returns the admin level for a given player.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"AdminLevelToString",D:"Converts the admin level to a string. If the level is an invalid value, an empty string is returned",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"StringToAdminLevel",D:"Converts a string containing one of AdminLevelToString's return values to an admin level.Returns ADMIN_NO if the string cannot be converted to a suitable constant",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"ApplyMapCfgToPlayer",D:"Applies the map configuration on the given player.\nWill stack if called multiple times, unless fReEquip is true, in which case the player is stripped of all weapons and ammo first.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"RespawnPlayer",D:"Relocates the given player to an active spawn point. If the player is dead and fRespawnDeadPlayers is true, the player is respawned.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"RespawnAllPlayers",D:"Relocates all players to active spawn points. If a player is dead and fRespawnDeadPlayers is true, the player is respawned.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"SpawnPointFilterPasses",D:"Returns whether the given player passes the given spawn point's filter",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"IsSpawnPointValid",D:"Returns whether the given spawn point is valid for the given player",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"IsSpawnPointOccupied",D:"Returns whether the given spawn point entity is occupied",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"SharedRandomLong",D:"Gets a random long whose value is the same on both the client and server.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"SharedRandomFloat",D:"Gets a random float whose value is the same on both the client and server.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"GetAmmoIndex",D:"Gets the index of the given ammo, or -1 if it is invalid",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"CreateBot",D:"Creates a bot with the given name.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"BotDisconnect",D:"Disconnects the bot. This will call ClientDisconnect and removes the entity. Do not use the entity after this call.",W:"CPlayerFuncs",C:"CPlayerFuncs",J:1},{P:"CPluginManager",D:"Plugin manager for handling basic plugin operations",W:"CPluginManager",C:"Class"},{P:"GetPluginList",D:"Gets the list of plugins as strings.",W:"CPluginManager",C:"CPluginManager",J:1},{P:"CReflection",D:"Reflection global used for generial purpose needs.",W:"CReflection",C:"Class"},{P:"Engine",D:"Engine group",W:"CReflection",C:"CReflection",J:1},{P:"Module",D:"Module group",W:"CReflection",C:"CReflection",J:1},{P:"CScheduledFunction",D:"Handle to a scheduled function",W:"CScheduledFunction",C:"Class"},{P:"GetNextCallTime",D:"Gets the next call time, in seconds",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"SetNextCallTime",D:"Sets the next call time, in seconds. Is an absolute value (g_Engine.time + RepeatTime by default).Times in the past will result in a call on the next frame.",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"GetRepeatTime",D:"Gets the repeat time, in seconds",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"SetRepeatTime",D:"Sets the repeat time, in seconds. Must be a positive value (may be zero)",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"GetRepeatCount",D:"Gets the repeat count",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"IsInfiniteRepeat",D:"Returns whether this function repeats infinitely",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"SetRepeatCount",D:"Sets the repeat count. Must be a positive value (may be zero) or REPEAT_INFINITE_TIMES",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"MakeInfiniteRepeat",D:"Makes this an infinite repeat function",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"HasBeenRemoved",D:"Returns whether this function has been removed from the scheduler or not",W:"CScheduledFunction",C:"CScheduledFunction",J:1},{P:"CScheduler",D:"Scheduler for calling functions.\nSupports up to 8 parameters for function or method calls.",W:"CScheduler",C:"Class"},{P:"SetTimeout",D:"Adds a timer that calls the given function after flDelay seconds.",W:"CScheduler",C:"CScheduler",J:1},{P:"SetInterval",D:"Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nThe given function is called an infinite number of times.",W:"CScheduler",C:"CScheduler",J:1},{P:"RemoveTimer",D:"Removes the given function from the list of functions to call.",W:"CScheduler",C:"CScheduler",J:1},{P:"GetCurrentFunction",D:"Returns the function currently being executed, if any.",W:"CScheduler",C:"CScheduler",J:1},{P:"ClearTimerList",D:"Removes all queued functions from the list of functions to call.",W:"CScheduler",C:"CScheduler",J:1},{P:"REPEAT_INFINITE_TIMES",D:"If passed to AddTimer, causes the given function to be called infinite times",W:"CScheduler",C:"CScheduler",J:1},{P:"CScriptInfo",D:"Script info object.\nContains script information.",W:"CScriptInfo",C:"Class"},{P:"GetAuthor",D:"Gets the author name.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"SetAuthor",D:"Sets the author name.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"GetContactInfo",D:"Gets the author's contact info.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"SetContactInfo",D:"Sets the author's contact info.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"GetMinimumAdminLevel",D:"Gets the minimum admin level required for commands.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"SetMinimumAdminLevel",D:"Sets the minimum admin level required for commands. You cannot lower the minimum level.",W:"CScriptInfo",C:"CScriptInfo",J:1},{P:"CSound",D:"Sound class used by CSoundEnt",W:"CSound",C:"Class"},{P:"Clear",D:"Clears the sound",W:"CSound",C:"CSound",J:1},{P:"Reset",D:"Resets the sound",W:"CSound",C:"CSound",J:1},{P:"FIsSound",D:"Returns whether this is a sound",W:"CSound",C:"CSound",J:1},{P:"FIsScent",D:"Returns whether this is a scent",W:"CSound",C:"CSound",J:1},{P:"m_vecOrigin",D:"Sound's location in space",W:"CSound",C:"CSound",J:1},{P:"m_iType",D:"What type of sound this is",W:"CSound",C:"CSound",J:1},{P:"m_iVolume",D:"How loud the sound is",W:"CSound",C:"CSound",J:1},{P:"m_flExpireTime",D:"When the sound should be purged from the list",W:"CSound",C:"CSound",J:1},{P:"m_iNext",D:"Index of next sound in this list ( Active or Free )",W:"CSound",C:"CSound",J:1},{P:"m_iNextAudible",D:"Temporary link that monsters use to build a list of audible sounds",W:"CSound",C:"CSound",J:1},{P:"hOwner",D:"Sounds now have OWNERS... (For various AI checks)",W:"CSound",C:"CSound",J:1},{P:"CSoundEngine",D:"Sound engine.\nCan either play sounds given to it directly, or use sound replacement to look up a replacement sample.",W:"CSoundEngine",C:"Class"},{P:"PrecacheSound",D:"Precaches the given sound.\nMust be called in MapInit",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"FindSoundReplacementSample",D:"Finds the sound replacement sample for the given entity and sample.If the sample is replaced, it will return the sample used instead. Otherwise, szSample is returned.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"PlaySound",D:"Plays the given sound with the given parameters. Sound replacement is not used here.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"StopSound",D:"Stops the given sound on the given entity on the given channel. If the sound was started using PlaySound, set fUseSoundReplacement to false.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitSoundDyn",D:"Plays the given sound with the given parameters. Sound replacement will affect this.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitSound",D:"Plays the given sound with the given parameters. Sound replacement will affect this.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitSoundSuit",D:"Play a specific sentence over the HEV suit speaker - just pass player entity, and !sentencename.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitGroupIdSuit",D:"Play a sentence, randomly selected from the passed in group id, over the HEV suit speaker.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitGroupNameSuit",D:"Play a sentence, randomly selected from the passed in groupname.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"LookupSentenceIndex",D:"Looks up the sentence index of the given sentence",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"LookupSentenceGroupIndex",D:"Looks up the sentence group index of the given sentence",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"PlaySentenceGroup",D:"Plays a sentence group",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"PlaySentenceGroupSequential",D:"Plays a sentence group sequentially",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"EmitAmbientSound",D:"Plays a sentence group sequentially",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"PlayHitSound",D:"Plays a hit sound based on the trace result's hit target. Returns the volume at which the hit is being played.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"FindMaterialType",D:"Maps the texture name to a material type. See the TextureType enum.",W:"CSoundEngine",C:"CSoundEngine",J:1},{P:"CSoundEnt",D:"Sound manager entity. Manages sound events made in the world, like gunfire.\nDoes not handle the playing of sounds, see CSoundEngine for actual sound playing.",W:"CSoundEnt",C:"Class"},{P:"InsertSound",D:"Inserts a sound. iType is one of the bits_SOUND enum.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"ActiveList",D:"Returns the head of the active list.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"FreeList",D:"Returns the head of the free list.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"SoundPointerForIndex",D:"Return a pointer for this index in the sound list.\nIndex must be between 0 and MAX_WORLD_SOUNDS.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"ClientSoundIndex",D:"Gets the index for the given client.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"IsEmpty",D:"Returns whether the sound list is empty.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"ISoundsInList",D:"Returns the number of sounds in the given list. Must be either SOUNDLISTTYPE_FREE or SOUNDLISTTYPE_ACTIVE.",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"m_cLastActiveSounds",D:"keeps track of the number of active sounds at the last update. (for diagnostic work)",W:"CSoundEnt",C:"CSoundEnt",J:1},{P:"CSprite",D:"Sprite class",W:"CSprite",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"CSprite",C:"CSprite",J:1},{P:"GetOrigin",D:"Gets the entity's (absolute) origin.",W:"CSprite",C:"CSprite",J:1},{P:"SetOrigin",D:"Sets this entity's (absolute) origin",W:"CSprite",C:"CSprite",J:1},{P:"KeyValue",D:"Sets keyvalue data on this entity",W:"CSprite",C:"CSprite",J:1},{P:"TraceAttack",D:"Traces an attack by the given entity to this entity.",W:"CSprite",C:"CSprite",J:1},{P:"TraceBleed",D:"Traces entity bleed event.",W:"CSprite",C:"CSprite",J:1},{P:"GiveAmmo",D:"Gives ammo to this entity.",W:"CSprite",C:"CSprite",J:1},{P:"HasTarget",D:"Returns whether this entity has the given target.",W:"CSprite",C:"CSprite",J:1},{P:"TeamID",D:"Returns this entity's team ID.",W:"CSprite",C:"CSprite",J:1},{P:"GetClassname",D:"Returns this entity's class name.",W:"CSprite",C:"CSprite",J:1},{P:"GetClassificationTag",D:"Returns this entity's classification tag.",W:"CSprite",C:"CSprite",J:1},{P:"GetClassificationName",D:"Returns this entity's classification name.",W:"CSprite",C:"CSprite",J:1},{P:"GetTargetname",D:"Returns this entity's target name.",W:"CSprite",C:"CSprite",J:1},{P:"FVisibleFromPos",D:"Returns whether this entity is visible from the given position.",W:"CSprite",C:"CSprite",J:1},{P:"SOUNDREPLACEMENT_Find",D:"Find sound replacement for the given file.",W:"CSprite",C:"CSprite",J:1},{P:"FindMonstersInWorld",D:"Finds monsters in the world",W:"CSprite",C:"CSprite",J:1},{P:"IsPlayerAlly",D:"Returns whether this entity is allied to players.",W:"CSprite",C:"CSprite",J:1},{P:"SetPlayerAlly",D:"Sets this entity's player ally status.",W:"CSprite",C:"CSprite",J:1},{P:"SetPlayerAllyDirect",D:"Sets this entity's player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)",W:"CSprite",C:"CSprite",J:1},{P:"opEquals",D:"Compares 2 entities for equality.",W:"CSprite",C:"CSprite",J:1},{P:"Precache",D:"Precaches the entity. Do not call directly.",W:"CSprite",C:"CSprite",J:1},{P:"ObjectCaps",D:"Gets this entity's objects caps. See the FCAP enum.",W:"CSprite",C:"CSprite",J:1},{P:"SetObjectCollisionBox",D:"Sets up the object collision box.",W:"CSprite",C:"CSprite",J:1},{P:"GetClassification",D:"Gets this entity's classification. Returns the given value if none is set. See the CLASSIFICATION enum.",W:"CSprite",C:"CSprite",J:1},{P:"SetClassification",D:"Sets this entity's classification override. Can override the entity's player ally setting.",W:"CSprite",C:"CSprite",J:1},{P:"SetClassificationFromEntity",D:"Sets this entity's classification override to the classification override set on the given entity. Can override the entity's player ally setting.",W:"CSprite",C:"CSprite",J:1},{P:"ClearClassification",D:"Clears this entity's classification override.",W:"CSprite",C:"CSprite",J:1},{P:"IRelationship",D:"Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum.",W:"CSprite",C:"CSprite",J:1},{P:"IRelationshipByClass",D:"Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum.",W:"CSprite",C:"CSprite",J:1},{P:"Classify",D:"Gets this entity's classification.",W:"CSprite",C:"CSprite",J:1},{P:"TakeDamage",D:"Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise.",W:"CSprite",C:"CSprite",J:1},{P:"TakeHealth",D:"Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"CSprite",C:"CSprite",J:1},{P:"TakeArmor",D:"Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won't add more than armor_cap. Returns 1 if it took damage, 0 otherwise.",W:"CSprite",C:"CSprite",J:1},{P:"Killed",D:"Tells this entity it's been killed. See the GIB enum for possible values.",W:"CSprite",C:"CSprite",J:1},{P:"BloodColor",D:"Returns the blood color. See the BLOOD_COLOR enum.",W:"CSprite",C:"CSprite",J:1},{P:"IsTriggered",D:"Returns whether this entity is triggered by the given entity.",W:"CSprite",C:"CSprite",J:1},{P:"MyMonsterPointer",D:"Returns this entity as its monster entity, if it is a monster.",W:"CSprite",C:"CSprite",J:1},{P:"GetCustomKeyvalues",D:"Gets this entity's custom keyvalues.",W:"CSprite",C:"CSprite",J:1},{P:"BlockedByEntity",D:"Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_Remove",D:"Think function. Delay-removes this entity.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_DoNothing",D:"Think function. Explicitly does nothing.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_StartFadeOut",D:"Think function. Starts fading this entity.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_FadeOut",D:"Think function. Fades this entity.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_CallUseToggle",D:"Think function. Calls use toggle on this entity.",W:"CSprite",C:"CSprite",J:1},{P:"ShouldToggle",D:"Returns whether this entity should toggle.",W:"CSprite",C:"CSprite",J:1},{P:"FireBullets",D:"Fires bullets. Must call CMath::MakeAimVectors with an angle vector first.",W:"CSprite",C:"CSprite",J:1},{P:"SUB_UseTargets",D:"Calls use on targets.",W:"CSprite",C:"CSprite",J:1},{P:"Intersects",D:"Returns whether this entity intersects with the given entity.",W:"CSprite",C:"CSprite",J:1},{P:"MakeDormant",D:"Makes this entity dormant.",W:"CSprite",C:"CSprite",J:1},{P:"IsDormant",D:"Returns whether this entity is dormant.",W:"CSprite",C:"CSprite",J:1},{P:"IsLockedByMaster",D:"Returns whether this entity is locked by its master.",W:"CSprite",C:"CSprite",J:1},{P:"edict",D:"Returns this entity's edict.",W:"CSprite",C:"CSprite",J:1},{P:"entindex",D:"Returns this entity's index.",W:"CSprite",C:"CSprite",J:1},{P:"SetupModel",D:"Sets up the model.",W:"CSprite",C:"CSprite",J:1},{P:"GetToggleState",D:"Gets the toggle state.\nSee the TOGGLE_STATE enum.",W:"CSprite",C:"CSprite",J:1},{P:"AddPoints",D:"Adds points to this entity.",W:"CSprite",C:"CSprite",J:1},{P:"AddPointsToTeam",D:"Adds points to this entity's team.",W:"CSprite",C:"CSprite",J:1},{P:"AddPlayerItem",D:"Adds the given player item to this entity.",W:"CSprite",C:"CSprite",J:1},{P:"RemovePlayerItem",D:"Removes the given player item to this entity.",W:"CSprite",C:"CSprite",J:1},{P:"GetDelay",D:"Gets this entity's trigger delay.",W:"CSprite",C:"CSprite",J:1},{P:"IsMoving",D:"Returns whether this entity is moving.",W:"CSprite",C:"CSprite",J:1},{P:"OverrideReset",D:"Resets this entity.",W:"CSprite",C:"CSprite",J:1},{P:"DamageDecal",D:"Returns the damage decal\nSee decal_e.",W:"CSprite",C:"CSprite",J:1},{P:"SetToggleState",D:"Sets this entity's toggle state.",W:"CSprite",C:"CSprite",J:1},{P:"StartSneaking",D:"Starts sneaking.",W:"CSprite",C:"CSprite",J:1},{P:"StopSneaking",D:"Stops sneaking.",W:"CSprite",C:"CSprite",J:1},{P:"OnControls",D:"Reacts to controls set on the pev.",W:"CSprite",C:"CSprite",J:1},{P:"IsSneaking",D:"Returns whether this entity is sneaking.",W:"CSprite",C:"CSprite",J:1},{P:"IsAlive",D:"Returns whether this entity is alive.",W:"CSprite",C:"CSprite",J:1},{P:"IsBSPModel",D:"Returns whether this entity is a BSP model.",W:"CSprite",C:"CSprite",J:1},{P:"ReflectGauss",D:"Returns whether this entity reflects gauss shots.",W:"CSprite",C:"CSprite",J:1},{P:"IsInWorld",D:"Returns whether this entity is in the world.",W:"CSprite",C:"CSprite",J:1},{P:"IsMonster",D:"Returns whether this entity is a monster.",W:"CSprite",C:"CSprite",J:1},{P:"IsPlayer",D:"Returns whether this entity is a player.",W:"CSprite",C:"CSprite",J:1},{P:"IsNetClient",D:"Returns whether this is a net client.",W:"CSprite",C:"CSprite",J:1},{P:"IsPointEnt",D:"Returns whether this is a point entity.",W:"CSprite",C:"CSprite",J:1},{P:"IsBreakable",D:"Returns whether this is a breakable brush entity.",W:"CSprite",C:"CSprite",J:1},{P:"IsMachine",D:"Returns whether this is a machine.",W:"CSprite",C:"CSprite",J:1},{P:"CriticalRemove",D:"Removes this entity in critical situations.",W:"CSprite",C:"CSprite",J:1},{P:"GetNextTarget",D:"Gets the next target to trigger.",W:"CSprite",C:"CSprite",J:1},{P:"Think",D:"Makes this entity think. Do not call directly.",W:"CSprite",C:"CSprite",J:1},{P:"Touch",D:"Triggers this entity's touch function.",W:"CSprite",C:"CSprite",J:1},{P:"Use",D:"Trigger's this entity's use function.",W:"CSprite",C:"CSprite",J:1},{P:"Blocked",D:"Triggers this entity's blocked function.",W:"CSprite",C:"CSprite",J:1},{P:"UpdateOnRemove",D:"Updates this entity when removed.",W:"CSprite",C:"CSprite",J:1},{P:"Respawn",D:"Respawns this entity.",W:"CSprite",C:"CSprite",J:1},{P:"FBecomeProne",D:"Makes this entity become prone.",W:"CSprite",C:"CSprite",J:1},{P:"Center",D:"Returns this entity's center.",W:"CSprite",C:"CSprite",J:1},{P:"EyePosition",D:"Returns this entity's eye position.",W:"CSprite",C:"CSprite",J:1},{P:"EarPosition",D:"Returns this entity's ear position.",W:"CSprite",C:"CSprite",J:1},{P:"BodyTarget",D:"Returns this entity's body target for shooting.",W:"CSprite",C:"CSprite",J:1},{P:"Illumination",D:"Returns this entity's illumination.",W:"CSprite",C:"CSprite",J:1},{P:"FVisible",D:"Returns whether this entity is visible to the given entity.",W:"CSprite",C:"CSprite",J:1},{P:"IsFacing",D:"Returns whether this entity is facing the given entity, within the given view field.",W:"CSprite",C:"CSprite",J:1},{P:"GetPointsForDamage",D:"Returns the points received for damage done.",W:"CSprite",C:"CSprite",J:1},{P:"GetDamagePoints",D:"Adds damage points to the inflicting entity.",W:"CSprite",C:"CSprite",J:1},{P:"OnCreate",D:"Entity constructor.",W:"CSprite",C:"CSprite",J:1},{P:"OnDestroy",D:"Entity destructor.",W:"CSprite",C:"CSprite",J:1},{P:"IsRevivable",D:"Returns whether this entity is revivable at this time.",W:"CSprite",C:"CSprite",J:1},{P:"BeginRevive",D:"Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes.",W:"CSprite",C:"CSprite",J:1},{P:"EndRevive",D:"Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start.",W:"CSprite",C:"CSprite",J:1},{P:"GetUserData",D:"Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this.",W:"CSprite",C:"CSprite",J:1},{P:"ClearUserData",D:"Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this.",W:"CSprite",C:"CSprite",J:1},{P:"Animate",D:"Advances this sprite's frame by the given amount of frames.",W:"CSprite",C:"CSprite",J:1},{P:"Expand",D:"Causes this sprite to scale up and fade at the given rates.\nThis sprite will be removed once faded.",W:"CSprite",C:"CSprite",J:1},{P:"SpriteInit",D:"Initializes this sprite.",W:"CSprite",C:"CSprite",J:1},{P:"SetAttachment",D:"Makes this sprite follow the given entity.",W:"CSprite",C:"CSprite",J:1},{P:"TurnOff",D:"Turns off this sprite.",W:"CSprite",C:"CSprite",J:1},{P:"TurnOn",D:"Turns on this sprite.",W:"CSprite",C:"CSprite",J:1},{P:"Frames",D:"Gets the number of frames in this sprite.",W:"CSprite",C:"CSprite",J:1},{P:"SetTransparency",D:"Sets the transparency of this sprite.",W:"CSprite",C:"CSprite",J:1},{P:"SetTexture",D:"Sets the texture used by this sprite. Is a model index returned by g_Game.PrecacheModel.",W:"CSprite",C:"CSprite",J:1},{P:"SetScale",D:"Sets the current scale.",W:"CSprite",C:"CSprite",J:1},{P:"SetColor",D:"Sets the color.",W:"CSprite",C:"CSprite",J:1},{P:"SetBrightness",D:"Sets the brightness (render amount).",W:"CSprite",C:"CSprite",J:1},{P:"AnimateAndDie",D:"Makes this sprite play until time pev->dmgtime has been passed, then removes itself.",W:"CSprite",C:"CSprite",J:1},{P:"pev",D:"Entity variables",W:"CSprite",C:"CSprite",J:1},{P:"m_fOverrideClass",D:"Whether this entity overrides the classification.",W:"CSprite",C:"CSprite",J:1},{P:"m_iClassSelection",D:"The overridden classification.",W:"CSprite",C:"CSprite",J:1},{P:"m_flMaximumFadeWait",D:"Maximum fade wait time.",W:"CSprite",C:"CSprite",J:1},{P:"m_flMaximumFadeWaitB",D:"Maximum fade wait time B.",W:"CSprite",C:"CSprite",J:1},{P:"m_fCanFadeStart",D:"Whether fading can start.",W:"CSprite",C:"CSprite",J:1},{P:"m_fCustomModel",D:"Whether a custom model is used.",W:"CSprite",C:"CSprite",J:1},{P:"m_vecLastOrigin",D:"Last origin vector",W:"CSprite",C:"CSprite",J:1},{P:"targetnameOutFilterType",D:"Target name out filter type.",W:"CSprite",C:"CSprite",J:1},{P:"classnameOutFilterType",D:"Class name out filter type.",W:"CSprite",C:"CSprite",J:1},{P:"targetnameInFilterType",D:"Target name in filter type.",W:"CSprite",C:"CSprite",J:1},{P:"classnameInFilterType",D:"Class name in filter type.",W:"CSprite",C:"CSprite",J:1},{P:"m_iOriginalRenderMode",D:"Original render model.",W:"CSprite",C:"CSprite",J:1},{P:"m_iOriginalRenderFX",D:"Original render FX.",W:"CSprite",C:"CSprite",J:1},{P:"m_flOriginalRenderAmount",D:"Original render amount.",W:"CSprite",C:"CSprite",J:1},{P:"m_vecOriginalRenderColor",D:"Original render color.",W:"CSprite",C:"CSprite",J:1},{P:"CSQLite",D:"SQLite",W:"CSQLite",C:"Class"},{P:"CSQLite",D:"Factory",W:"CSQLite",C:"CSQLite",J:1},{P:"Exec",D:"Excute SQL",W:"CSQLite",C:"CSQLite",J:1},{P:"Close",D:"Close SQL",W:"CSQLite",C:"CSQLite",J:1},{P:"CSQLItem",D:"SQL Item",W:"CSQLItem",C:"Class"},{P:"Get",D:"Get string",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetLong",D:"Get int64",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetInt",D:"Get int",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetULong",D:"Get int",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetUInt",D:"Get int",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetReal",D:"Get real",W:"CSQLItem",C:"CSQLItem",J:1},{P:"GetBlob",D:"Get blob",W:"CSQLItem",C:"CSQLItem",J:1},{P:"IsNull",D:"Is null",W:"CSQLItem",C:"CSQLItem",J:1},{P:"CStartInventory",D:"Player start inventory manager\nCan be used to modify the player's start inventory during a map\nAlways check if inventory modification is available before trying to make any changes",W:"CStartInventory",C:"Class"},{P:"IsAvailable",D:"Returns whether inventory modification is available.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Exists",D:"Returns whether the given entry is present in the inventory.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Set",D:"Set an item in the inventory.\nSets the amount if the item is already in the inventory.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Add",D:"Add or subtract from an existing value.\nInserts if the value is not already in the inventory.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Remove",D:"Removes an entry from the inventory.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Restock",D:"Restocks the inventory with up to uiAmount of the given item.\nDoes nothing if the current amount already exceeds the given amount.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"Limit",D:"Limits the inventory content of the given item to at most uiAmount.\nDoes nothing if there is less than uiAmount in the inventory.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"GetAmount",D:"Gets the amount of a given entry.\nReturns 0 if the entry doesn't exist.",W:"CStartInventory",C:"CStartInventory",J:1},{P:"CSurvivalMode",D:"Survival Mode handler",W:"CSurvivalMode",C:"Class"},{P:"IsEnabled",D:"Returns whether Survival Mode is enabled or not.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"Enable",D:"Enable Survival Mode",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"Disable",D:"Disable Survival Mode",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"Toggle",D:"Toggles Survival Mode.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"IsActive",D:"Returns whether Survival Mode is active or not.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"Activate",D:"Activate Survival Mode",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"GetVoteState",D:"Returns Survival Mode vote state.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"VoteToggle",D:"Toggles Survival Mode vote state.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"ResetVoteState",D:"Resets the Survival Mode vote state to undefined.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"EnableMapSupport",D:"Tells the game that the current map wants to use Survival Mode. Should be called in MapInit. Cannot be disabled once set.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"MapSupportEnabled",D:"Returns whether the current map supports Survival Mode or not.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"SetStartOn",D:"Sets whether Survival Mode should start when the map is loaded.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"GetStartOn",D:"Returns whether Survival Mode should start when the map is loaded.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"GetNextMap",D:"Returns name of the next survival map.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"SetNextMap",D:"Sets name of the next survival map.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"EndRound",D:"Can be used to end a round and force a retry to be used.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"GetDelayBeforeStart",D:"Returns delay before survival mode starts.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"SetDelayBeforeStart",D:"Sets delay before survival mode starts.",W:"CSurvivalMode",C:"CSurvivalMode",J:1},{P:"CTextMenu",D:"Text menu.",W:"CTextMenu",C:"Class"},{P:"CTextMenu",D:"Constructor. You must pass a player slot callback and handle the input yourself.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"get_Id",D:"Gets this text menu's id. If CTextMenus::INVALID_TEXT_MENU_ID, this is an unregistered menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"IsRegistered",D:"Returns whether this menu is registered or not.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"Register",D:"Registers this text menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"Unregister",D:"Unregisters this text menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"Open",D:"Opens the menu and keeps it open for the given amount of time.\nTime must be a positive value. Maximum 255 seconds. Pass 0 for infinite.\nYou can optionally pass a list of players that receive this menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"GetItemCount",D:"Gets the number of items in this menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"GetPageCount",D:"Gets the number of pages in this menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"GetItem",D:"Gets the item at the given index.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"GetTitle",D:"Gets the title.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"SetTitle",D:"Sets the title.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"AddItem",D:"Adds an item to the menu.",W:"CTextMenu",C:"CTextMenu",J:1},{P:"CTextMenuItem",D:"Text menu item. Do not store handles to this object.",W:"CTextMenuItem",C:"Class"},{P:"m_szName",D:"Item name. Used for display.",W:"CTextMenuItem",C:"CTextMenuItem",J:1},{P:"m_pUserData",D:"User data. For internal use.",W:"CTextMenuItem",C:"CTextMenuItem",J:1},{P:"CTextMenus",D:"Text menu manager.",W:"CTextMenus",C:"Class"},{P:"INVALID_TEXT_MENU_ID",D:"Invalid text menu id.",W:"CTextMenus",C:"CTextMenus",J:1},{P:"CustomEntityCallbackHandler",D:"Custom entity callback handler. Is used to set callbacks to methods",W:"CustomEntityCallbackHandler",C:"Class"},{P:"SetThinkFunction",D:"Sets the think function for this handler's owning instance.",W:"CustomEntityCallbackHandler",C:"CustomEntityCallbackHandler",J:1},{P:"SetTouchFunction",D:"Sets the touch function for this handler's owning instance.",W:"CustomEntityCallbackHandler",C:"CustomEntityCallbackHandler",J:1},{P:"SetBlockedFunction",D:"Sets the blocked function for this handler's owning instance.",W:"CustomEntityCallbackHandler",C:"CustomEntityCallbackHandler",J:1},{P:"SetUseFunction",D:"Sets the use function for this handler's owning instance.",W:"CustomEntityCallbackHandler",C:"CustomEntityCallbackHandler",J:1},{P:"CustomKeyvalue",D:"Custom keyvalue. Only use this as a local variable, do not store them!",W:"CustomKeyvalue",C:"Class"},{P:"CustomKeyvalue",D:"Constructor",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"Exists",D:"Returns whether the value exists.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"GetType",D:"Gets the type of the keyvalue.\nReturns VAR_INVALID if this value does not exist.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"GetString",D:"Gets the value as a string.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"GetVector",D:"Gets the value as a vector.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"GetFloat",D:"Gets the value as a float.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"GetInteger",D:"Gets the value as an integer.",W:"CustomKeyvalue",C:"CustomKeyvalue",J:1},{P:"CustomKeyvalues",D:"Custom keyvalues. Do not keep handles to instances of these objects.",W:"CustomKeyvalues",C:"Class"},{P:"SetKeyvalue",D:"Sets a custom keyvalue to the given string value.\nReturns true if the key existed and was overwritten.",W:"CustomKeyvalues",C:"CustomKeyvalues",J:1},{P:"InitializeKeyvalueWithDefault",D:"Initializes a keyvalue with the default value for its type.",W:"CustomKeyvalues",C:"CustomKeyvalues",J:1},{P:"HasKeyvalue",D:"Returns whether the keyvalue with the given name exists.",W:"CustomKeyvalues",C:"CustomKeyvalues",J:1},{P:"GetKeyvalue",D:"Gets the keyvalue with the given name. Check if it exists by calling Exists.",W:"CustomKeyvalues",C:"CustomKeyvalues",J:1},{P:"CUtility",D:"Utility methods",W:"CUtility",C:"Class"},{P:"BloodStream",D:"Creates a blood stream. Use BLOOD_COLOR enum for the color.",W:"CUtility",C:"CUtility",J:1},{P:"BloodDrips",D:"Creates blood drips. Use BLOOD_COLOR enum for the color.",W:"CUtility",C:"CUtility",J:1},{P:"RandomBloodVector",D:"Returns a random blood direction vector",W:"CUtility",C:"CUtility",J:1},{P:"ShouldShowBlood",D:"Returns whether blood of the given type should be shown.",W:"CUtility",C:"CUtility",J:1},{P:"BloodDecalTrace",D:"Applies blood decal to the trace hit location",W:"CUtility",C:"CUtility",J:1},{P:"DecalTrace",D:"Applies decal to the trace hit location",W:"CUtility",C:"CUtility",J:1},{P:"PlayerDecalTrace",D:"Applies player decal to the trace hit location",W:"CUtility",C:"CUtility",J:1},{P:"GunshotDecalTrace",D:"Applies gunshot decal to the trace hit location",W:"CUtility",C:"CUtility",J:1},{P:"Sparks",D:"Creates sparks at the given location",W:"CUtility",C:"CUtility",J:1},{P:"Ricochet",D:"Creates a ricochet at the given location",W:"CUtility",C:"CUtility",J:1},{P:"WaterLevel",D:"Determines the Z level at which a water surface level is, given a position to start searching from and a range to search.",W:"CUtility",C:"CUtility",J:1},{P:"Bubbles",D:"Creates a box filled with bubbles",W:"CUtility",C:"CUtility",J:1},{P:"BubbleTrail",D:"Creates a trail of bubbles",W:"CUtility",C:"CUtility",J:1},{P:"StringToVector",D:"Converts the given string to a vector",W:"CUtility",C:"CUtility",J:1},{P:"IsStringInt",D:"Returns whether the given string is an integer",W:"CUtility",C:"CUtility",J:1},{P:"IsStringFloat",D:"Returns whether the given string is a float",W:"CUtility",C:"CUtility",J:1},{P:"IsWholeNumber",D:"Returns whether the given float is a whole number, and returns the rounded number",W:"CUtility",C:"CUtility",J:1},{P:"IsString3DVec",D:"Returns whether the given string is a 3D vector",W:"CUtility",C:"CUtility",J:1},{P:"TraceLine",D:"Calculates a trace along the given line, storing the results in ptr.",W:"CUtility",C:"CUtility",J:1},{P:"TraceHull",D:"Calculates a trace along the given line, storing the results in ptr, using the specified hull type.",W:"CUtility",C:"CUtility",J:1},{P:"TraceToss",D:"Trace toss",W:"CUtility",C:"CUtility",J:1},{P:"TraceMonsterHull",D:"Trace monster hull. Returns true if the trace was entirely in a solid object, or hit something.",W:"CUtility",C:"CUtility",J:1},{P:"TraceModel",D:"TraceModel",W:"CUtility",C:"CUtility",J:1},{P:"TraceTexture",D:"Trace texture",W:"CUtility",C:"CUtility",J:1},{P:"FindEntityForward",D:"Convience function that finds the entity that the given entity is currently looking at.",W:"CUtility",C:"CUtility",J:1},{P:"GetGlobalTrace",D:"Gets the global trace data stored in g_Engine as a TraceResult object.",W:"CUtility",C:"CUtility",J:1},{P:"IsPlayerInVolume",D:"Returns whether the given player is in the given volume.",W:"CUtility",C:"CUtility",J:1},{P:"VoteActive",D:"Returns whether a vote is active. This only covers the votes started using the in-game vote menu, trigger_vote and the Vote class.",W:"CUtility",C:"CUtility",J:1},{P:"GetCircularGaussianSpread",D:"Gets circular gaussian spread.",W:"CUtility",C:"CUtility",J:1},{P:"CountPlayersInBrushVolume",D:"Counts the number of players inside and outside a brush volume.",W:"CUtility",C:"CUtility",J:1},{P:"FindHullIntersection",D:"Finds the hull intersection from a traceline in a given set of bounds. The bounds are relative to the input traceline's endpoint.\nThe given entity is the entity performing the traceline.",W:"CUtility",C:"CUtility",J:1},{P:"BuildEntityLogString",D:"Builds a generic entity log string.",W:"CUtility",C:"CUtility",J:1},{P:"BuildPlayerLogString",D:"Builds a generic player log string.",W:"CUtility",C:"CUtility",J:1},{P:"GetPlayerLog",D:"Get a player log string.",W:"CUtility",C:"CUtility",J:1},{P:"QRCode",D:"Generate QRCode for a string",W:"CUtility",C:"CUtility",J:1},{P:"AddFollow",D:"Add Follow",W:"CUtility",C:"CUtility",J:1},{P:"ClassWriter",D:"Class Save To Binary String",W:"CUtility",C:"CUtility",J:1},{P:"ClassReader",D:"Binary String To Class",W:"CUtility",C:"CUtility",J:1},{P:"Cvar",D:"Cvar structure",W:"Cvar",C:"Class"},{P:"GetName",D:"Gets the name of the cvar.",W:"Cvar",C:"Cvar",J:1},{P:"GetString",D:"Gets the value of the cvar as a string.",W:"Cvar",C:"Cvar",J:1},{P:"flags",D:"The flags of this cvar.",W:"Cvar",C:"Cvar",J:1},{P:"value",D:"The value of this cvar as a float.",W:"Cvar",C:"Cvar",J:1},{P:"CVirtualFileSystem",D:"Virtual File System",W:"CVirtualFileSystem",C:"Class"},{P:"GetFileQuota",D:"Gets the file system quota object. Do not store a handle to this object, as it may be replaced at any time.",W:"CVirtualFileSystem",C:"CVirtualFileSystem",J:1},{P:"OpenFile",D:"Opens a file. Returns nullptr if the file could not be opened.",W:"CVirtualFileSystem",C:"CVirtualFileSystem",J:1},{P:"RemoveFile",D:"Removes a file.",W:"CVirtualFileSystem",C:"CVirtualFileSystem",J:1},{P:"CWeaponFuncs",D:"Weapon functions class.",W:"CWeaponFuncs",C:"Class"},{P:"ClearMultiDamage",D:"Clears the multi damage data.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"ApplyMultiDamage",D:"Applies multi damage.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"AddMultiDamage",D:"Add multi damage.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"WeaponTimeBase",D:"Gets the weapon time base.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"DecalGunshot",D:"Creates a gunshot decal at the trace hit point.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"SpawnBlood",D:"Spawns blood at the given location.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"DamageDecal",D:"Creates a damage decal on the given entity.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"RadiusDamage",D:"Deals radius damage.",W:"CWeaponFuncs",C:"CWeaponFuncs",J:1},{P:"DamageInfo",D:"Damage info structure",W:"DamageInfo",C:"Class"},{P:"pVictim",D:"Victim entity.",W:"DamageInfo",C:"DamageInfo",J:1},{P:"pInflictor",D:"Inflictor entity.",W:"DamageInfo",C:"DamageInfo",J:1},{P:"pAttacker",D:"Attacker entity.",W:"DamageInfo",C:"DamageInfo",J:1},{P:"flDamage",D:"Damage amount.",W:"DamageInfo",C:"DamageInfo",J:1},{P:"bitsDamageType",D:"Damage type.",W:"DamageInfo",C:"DamageInfo",J:1},{P:"DateTime",D:"DateTime class.\nNote: milliseconds default to 0 due to limited accuracy.",W:"DateTime",C:"Class"},{P:"DateTime",D:"Default constructor.",W:"DateTime",C:"DateTime",J:1},{P:"opAssign",D:"Assignment operator.",W:"DateTime",C:"DateTime",J:1},{P:"ToUnixTimestamp",D:"Get time as a unix timestamp.",W:"DateTime",C:"DateTime",J:1},{P:"SetUnixTimestamp",D:"Sets time as a unix timestamp.",W:"DateTime",C:"DateTime",J:1},{P:"GetMilliseconds",D:"Get milliseconds.",W:"DateTime",C:"DateTime",J:1},{P:"GetSeconds",D:"Get seconds (0-59).",W:"DateTime",C:"DateTime",J:1},{P:"GetMinutes",D:"Get minutes (0-59).",W:"DateTime",C:"DateTime",J:1},{P:"GetHour",D:"Get hours (0-23).",W:"DateTime",C:"DateTime",J:1},{P:"GetDayOfMonth",D:"Get day of month (0-30).",W:"DateTime",C:"DateTime",J:1},{P:"GetMonth",D:"Get month (0-11).",W:"DateTime",C:"DateTime",J:1},{P:"GetYear",D:"Get year.",W:"DateTime",C:"DateTime",J:1},{P:"SetMilliseconds",D:"Set milliseconds.",W:"DateTime",C:"DateTime",J:1},{P:"SetSeconds",D:"Set seconds (0-59).",W:"DateTime",C:"DateTime",J:1},{P:"SetMinutes",D:"Set minutes (0-59).",W:"DateTime",C:"DateTime",J:1},{P:"SetHour",D:"Set hours (0-23).",W:"DateTime",C:"DateTime",J:1},{P:"SetDayOfMonth",D:"Set day of month (0-30).",W:"DateTime",C:"DateTime",J:1},{P:"SetMonth",D:"Set month (0-11).",W:"DateTime",C:"DateTime",J:1},{P:"SetYear",D:"Set year.",W:"DateTime",C:"DateTime",J:1},{P:"Format",D:"Formats this datetime as a string.\nReturns the length of the destination string, or 0 if the buffer was not large enough.",W:"DateTime",C:"DateTime",J:1},{P:"ToString",D:"Returns a string representation of this datetime.",W:"DateTime",C:"DateTime",J:1},{P:"opEquals",D:"Returns whether these two DateTimes represent the same time.",W:"DateTime",C:"DateTime",J:1},{P:"opCmp",D:"Comparison operator.",W:"DateTime",C:"DateTime",J:1},{P:"opSub",D:"Subtracts the given DateTime from this one, resulting in a TimeDifference object.",W:"DateTime",C:"DateTime",J:1},{P:"opAddAssign",D:"Adds the given TimeDifference to this one.",W:"DateTime",C:"DateTime",J:1},{P:"opAdd",D:"Adds this DateTime and the given TimeDifferene together, returning a copy containing the new time.",W:"DateTime",C:"DateTime",J:1},{P:"edict_t",D:"Entity dictionary structure",W:"edict_t",C:"Class"},{P:"get_leafnums",D:"get leafnums",W:"edict_t",C:"edict_t",J:1},{P:"free",D:"Flag telling whether this edict is free",W:"edict_t",C:"edict_t",J:1},{P:"serialnumber",D:"Serial number",W:"edict_t",C:"edict_t",J:1},{P:"headnode",D:"Head node",W:"edict_t",C:"edict_t",J:1},{P:"num_leafs",D:"Number of leafs",W:"edict_t",C:"edict_t",J:1},{P:"freetime",D:"When this edict was last freed",W:"edict_t",C:"edict_t",J:1},{P:"vars",D:"Entity variables instance",W:"edict_t",C:"edict_t",J:1},{P:"EHandle",D:"Safe way to point to CBaseEntities who may die between frames.",W:"EHandle",C:"Class"},{P:"EHandle",D:"Default constructs this handle.",W:"EHandle",C:"EHandle",J:1},{P:"IsValid",D:"Returns whether this handle is valid.",W:"EHandle",C:"EHandle",J:1},{P:"opImplConv",D:"Returns whether this handle is valid.",W:"EHandle",C:"EHandle",J:1},{P:"GetEntity",D:"Gets the Entity this handle refers to.\nReturns null if invalid.",W:"EHandle",C:"EHandle",J:1},{P:"opImplCast",D:"Gets the Entity this handle refers to.\nReturns null if invalid.",W:"EHandle",C:"EHandle",J:1},{P:"opAssign",D:"Assigns the given entity to this handle.",W:"EHandle",C:"EHandle",J:1},{P:"GetSerialNumber",D:"CBaseEntity serial number. Used to determine if the entity is still valid.",W:"EHandle",C:"EHandle",J:1},{P:"entity_state_t",D:"Entity states transmit to client",W:"entity_state_t",C:"Class"},{P:"entityType",D:"Fields which are filled in by routines outside of delta compression",W:"entity_state_t",C:"entity_state_t",J:1},{P:"number",D:"Index into cl_entities array for this entity.",W:"entity_state_t",C:"entity_state_t",J:1},{P:"msg_time",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"messagenum",D:"Message number last time the player/entity state was updated.",W:"entity_state_t",C:"entity_state_t",J:1},{P:"origin",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"angles",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"modelindex",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"sequence",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"frame",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"colormap",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"skin",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"solid",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"effects",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"scale",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"eflags",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"rendermode",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"renderamt",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"renderfx",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"movetype",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"animtime",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"framerate",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"body",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"velocity",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"mins",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"maxs",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"aiment",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"owner",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"friction",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"gravity",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"team",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"playerclass",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"health",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"spectator",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"weaponmodel",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"gaitsequence",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"basevelocity",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"usehull",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"oldbuttons",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"onground",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"iStepLeft",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"flFallVelocity",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"fov",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"weaponanim",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"iuser1",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"iuser2",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"iuser3",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"iuser4",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"fuser1",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"fuser2",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"fuser3",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"fuser4",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"vuser1",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"vuser2",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"vuser3",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"vuser4",D:"",W:"entity_state_t",C:"entity_state_t",J:1},{P:"entvars_t",D:"Networked entity variables",W:"entvars_t",C:"Class"},{P:"ClassNameIs",D:"Returns whether the given class name is this entity's class name",W:"entvars_t",C:"entvars_t",J:1},{P:"get_controller",D:"Get entity controller by index (0..3). Used by entities with studio models to get bone controller settings.",W:"entvars_t",C:"entvars_t",J:1},{P:"set_controller",D:"Set entity controller by index (0..3, 0..255) Used by entities with studio models to set bone controller settings.",W:"entvars_t",C:"entvars_t",J:1},{P:"get_blending",D:"Get entity blending by index (0..1). Used by entities with models to get x or y axis blending.",W:"entvars_t",C:"entvars_t",J:1},{P:"set_blending",D:"Set entity blending by index (0..1, 0..255). Used by entities with models to set x or y axis blending.",W:"entvars_t",C:"entvars_t",J:1},{P:"SpawnFlagBitSet",D:"Returns whether the given flag(s) are set on the entvars spawnflags variable",W:"entvars_t",C:"entvars_t",J:1},{P:"FlagBitSet",D:"Returns whether the given flag(s) are set on the entvars flags variable",W:"entvars_t",C:"entvars_t",J:1},{P:"get_pContainingEntity",D:"Entity containing entity. pContainingEntity.vars equals this entvars instance.",W:"entvars_t",C:"entvars_t",J:1},{P:"classname",D:"The entity class name",W:"entvars_t",C:"entvars_t",J:1},{P:"globalname",D:"The entity global name",W:"entvars_t",C:"entvars_t",J:1},{P:"origin",D:"Entity origin. Must be set using g_EntityFuncs.SetOrigin.",W:"entvars_t",C:"entvars_t",J:1},{P:"oldorigin",D:"Old entity origin. Used by some entities to store off their original origin before moving to a different location.",W:"entvars_t",C:"entvars_t",J:1},{P:"velocity",D:"Entity velocity",W:"entvars_t",C:"entvars_t",J:1},{P:"basevelocity",D:"Entity base velocity. Used when standing on another entity that applies velocity to entities standing on it, for instance conveyors.",W:"entvars_t",C:"entvars_t",J:1},{P:"movedir",D:"Entity move direction. Used by some entities for movement directions, but some entities use it for other purposes.",W:"entvars_t",C:"entvars_t",J:1},{P:"angles",D:"Entity angles, in degrees.",W:"entvars_t",C:"entvars_t",J:1},{P:"avelocity",D:"Entity angular velocity, in degrees/sec. Applied to the entity's angles.",W:"entvars_t",C:"entvars_t",J:1},{P:"punchangle",D:"Player punch angle. These angles are applied to players when they are 'punched'.These angles are automatically interpolated back to the null vector over time.",W:"entvars_t",C:"entvars_t",J:1},{P:"v_angle",D:"Player view angle. These are the angles used for the player's view, and differ from the regular angles variable.",W:"entvars_t",C:"entvars_t",J:1},{P:"endpos",D:"Entity end position. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"startpos",D:"Entity start position. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"impacttime",D:"Entity impact time. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"starttime",D:"Entity start time. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"fixangle",D:"Entity fix angle. Engine uses this value to change player view angles, and then resets it to FAM_NOTHING. See FixAngleMode enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"idealpitch",D:"Entity ideal pitch. Used in conjunction with pitch_speed to interpolate the entity's current pitch angle to this value.",W:"entvars_t",C:"entvars_t",J:1},{P:"pitch_speed",D:"Entity pitch speed. See idealpitch.",W:"entvars_t",C:"entvars_t",J:1},{P:"ideal_yaw",D:"Entity ideal yaw. Used in conjunction with yaw_speed to interpolate the entity's current yaw angle to this value.",W:"entvars_t",C:"entvars_t",J:1},{P:"yaw_speed",D:"Entity yaw speed. See ideal_yaw.",W:"entvars_t",C:"entvars_t",J:1},{P:"modelindex",D:"Entity model index. If this entity has a model, is the unique index of the model. Otherwise, is 0.",W:"entvars_t",C:"entvars_t",J:1},{P:"model",D:"The entity model name. If this entity has a model, is the name of that model. Otherwise, is an empty string.Use g_EntityFuncs.SetModel to set this variable.",W:"entvars_t",C:"entvars_t",J:1},{P:"viewmodel",D:"Player view model index. If this player has a visible weapon, is the name of that view (v_) model. Otherwise, is an empty string.",W:"entvars_t",C:"entvars_t",J:1},{P:"weaponmodel",D:"Entity weapon model index. If this player has a visible weapon, is the name of that third person (p_) model. Otherwise, is an empty string.",W:"entvars_t",C:"entvars_t",J:1},{P:"absmin",D:"Entity absolute minimum size. Is an absolute position in the world. Automatically updated by the engine.",W:"entvars_t",C:"entvars_t",J:1},{P:"absmax",D:"Entity absolute maximum size. Is an absolute position in the world. Automatically updated by the engine.",W:"entvars_t",C:"entvars_t",J:1},{P:"mins",D:"Entity minimum size. Relative to the player's origin.",W:"entvars_t",C:"entvars_t",J:1},{P:"maxs",D:"Entity maximum size. Relative to the player's origin.",W:"entvars_t",C:"entvars_t",J:1},{P:"size",D:"Entity size. Equivalent to maxs - mins",W:"entvars_t",C:"entvars_t",J:1},{P:"ltime",D:"Entity ltime. The last time this entity has executed its think function. Otherwise, is 0.",W:"entvars_t",C:"entvars_t",J:1},{P:"nextthink",D:"Entity next think time. The next time this entity will execute its think function, as an absolute time value. Otherwise, is 0.",W:"entvars_t",C:"entvars_t",J:1},{P:"movetype",D:"Entity movetype\nSee MOVETYPE enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"solid",D:"Entity solid flag\nSee SOLID enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"skin",D:"Entity skin index. Used by entities with studio models to set which skin to use.",W:"entvars_t",C:"entvars_t",J:1},{P:"body",D:"Entity body index. Used by entities with studio models to set which body to use.",W:"entvars_t",C:"entvars_t",J:1},{P:"effects",D:"Entity effects\nSee EFFECTS enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"gravity",D:"Entity gravity. Is a scalar between 0 and 1, inclusive.",W:"entvars_t",C:"entvars_t",J:1},{P:"friction",D:"Entity friction. Is a scalar between 0 and 1, inclusive.",W:"entvars_t",C:"entvars_t",J:1},{P:"light_level",D:"Player only light level. This is a single value between 0 and 255 inclusive. Use g_EngineFuncs.GetEntityIllum to retrieve this value.",W:"entvars_t",C:"entvars_t",J:1},{P:"sequence",D:"Entity sequence. Used by entities with studio models to set which sequence to use.",W:"entvars_t",C:"entvars_t",J:1},{P:"gaitsequence",D:"Entity gait sequence. Used by entities with studio models for walking sequences.",W:"entvars_t",C:"entvars_t",J:1},{P:"frame",D:"Entity frame. Used by entities with studio models to set the current frame that a sequence is using. Automatically incremented.Used by brush models for animated textures: 1 for animated, 0 for off.",W:"entvars_t",C:"entvars_t",J:1},{P:"animtime",D:"Entity animation time. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"framerate",D:"Entity framerate. used by entities with studio models to control sequence frame rate.",W:"entvars_t",C:"entvars_t",J:1},{P:"scale",D:"Entity rendering scale (0..255). Applies to studio and sprite models.",W:"entvars_t",C:"entvars_t",J:1},{P:"rendermode",D:"Entity render mode. See RenderModes enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"renderamt",D:"Entity render amount (0..255)",W:"entvars_t",C:"entvars_t",J:1},{P:"rendercolor",D:"Entity render color (rgb)",W:"entvars_t",C:"entvars_t",J:1},{P:"renderfx",D:"Entity render fx",W:"entvars_t",C:"entvars_t",J:1},{P:"health",D:"Entity health. Do not set directly unless you are absolutely sure you know what you are doing.",W:"entvars_t",C:"entvars_t",J:1},{P:"frags",D:"Entity frags. Usually used for the number of kills or score.",W:"entvars_t",C:"entvars_t",J:1},{P:"weapons",D:"Entity weapons bit vector. Largely used by monsters to track which weapons they have, and by players for internal purposes.",W:"entvars_t",C:"entvars_t",J:1},{P:"takedamage",D:"Entity take damage flag\nSee DAMAGE enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"deadflag",D:"Entity dead flag\nSee DEAD enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"view_ofs",D:"Entity view offset. Used to set an eye offset.",W:"entvars_t",C:"entvars_t",J:1},{P:"button",D:"Entity button bit vector. Usually used to track which buttons the player is currently pressing.",W:"entvars_t",C:"entvars_t",J:1},{P:"impulse",D:"Entity impulse bit vector. Used for various internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"chain",D:"Entity pointer when linked into a linked list. Used for temporary lists.",W:"entvars_t",C:"entvars_t",J:1},{P:"dmg_inflictor",D:"Entity damage inflictor",W:"entvars_t",C:"entvars_t",J:1},{P:"enemy",D:"Entity enemy",W:"entvars_t",C:"entvars_t",J:1},{P:"aiment",D:"Entity pointer when MOVETYPE_FOLLOW",W:"entvars_t",C:"entvars_t",J:1},{P:"owner",D:"Entity owner",W:"entvars_t",C:"entvars_t",J:1},{P:"groundentity",D:"Entity ground entity",W:"entvars_t",C:"entvars_t",J:1},{P:"spawnflags",D:"Entity spawn flags",W:"entvars_t",C:"entvars_t",J:1},{P:"flags",D:"Entity flags\nSee EdictFlags enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"colormap",D:"Entity color map. Used for player model colors.",W:"entvars_t",C:"entvars_t",J:1},{P:"team",D:"Entity team. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"max_health",D:"Entity maximum health",W:"entvars_t",C:"entvars_t",J:1},{P:"teleport_time",D:"Entity teleport time. Intended for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"armortype",D:"Entity armor type. Represents maximum armor (similar to max_health).",W:"entvars_t",C:"entvars_t",J:1},{P:"armorvalue",D:"Entity armor value",W:"entvars_t",C:"entvars_t",J:1},{P:"waterlevel",D:"Entity water level\nSee WATERLEVEL enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"watertype",D:"Player only. Contains the type of water contents the player is currently in. See CONTENTS enum.",W:"entvars_t",C:"entvars_t",J:1},{P:"target",D:"The entity target. If set, is the name of one or more targets to trigger. Otherwise, is empty.",W:"entvars_t",C:"entvars_t",J:1},{P:"targetname",D:"The entity target name",W:"entvars_t",C:"entvars_t",J:1},{P:"netname",D:"The entity net name. Used for various things, such as the player's name.",W:"entvars_t",C:"entvars_t",J:1},{P:"message",D:"The entity message. Used for various things.",W:"entvars_t",C:"entvars_t",J:1},{P:"dmg_take",D:"Entity damage take. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"dmg_save",D:"Entity damage save. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"dmg",D:"Entity damage. Usually stores how much damage this entity can do to other entities.",W:"entvars_t",C:"entvars_t",J:1},{P:"dmgtime",D:"Entity damage time. Time at which this entity last took damage. Usually used to limit damage effects from being shown too often.",W:"entvars_t",C:"entvars_t",J:1},{P:"noise",D:"Entity noise. Usually used to store a sound name.",W:"entvars_t",C:"entvars_t",J:1},{P:"noise1",D:"Entity noise 1. Usually used to store a sound name.",W:"entvars_t",C:"entvars_t",J:1},{P:"noise2",D:"Entity noise 2. Usually used to store a sound name.",W:"entvars_t",C:"entvars_t",J:1},{P:"noise3",D:"Entity noise 3. Usually used to store a sound name.",W:"entvars_t",C:"entvars_t",J:1},{P:"speed",D:"Entity speed",W:"entvars_t",C:"entvars_t",J:1},{P:"air_finished",D:"Player air finished. Time at which the player runs out of air when underwater.",W:"entvars_t",C:"entvars_t",J:1},{P:"pain_finished",D:"Player pain finished. Time at which the player can take damage again while drowning.",W:"entvars_t",C:"entvars_t",J:1},{P:"radsuit_finished",D:"Entity radiation suit finished. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"playerclass",D:"Entity player class. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"maxspeed",D:"Entity maximum speed",W:"entvars_t",C:"entvars_t",J:1},{P:"fov",D:"Player field of view",W:"entvars_t",C:"entvars_t",J:1},{P:"weaponanim",D:"Player weapon animation",W:"entvars_t",C:"entvars_t",J:1},{P:"pushmsec",D:"Entity push milliseconds. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"bInDuck",D:"Entity ducking flag. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"flTimeStepSound",D:"Entity time of step sound. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"flSwimTime",D:"Entity swim time. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"flDuckTime",D:"Entity duck time. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"iStepLeft",D:"Entity step left flag. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"flFallVelocity",D:"Player fall velocity.",W:"entvars_t",C:"entvars_t",J:1},{P:"gamestate",D:"Entity gamestate. Reserved for future use.",W:"entvars_t",C:"entvars_t",J:1},{P:"oldbuttons",D:"Player old buttons. Previous frame's contents of buttons.",W:"entvars_t",C:"entvars_t",J:1},{P:"groupinfo",D:"Entity group info. Used for internal operations.",W:"entvars_t",C:"entvars_t",J:1},{P:"iuser1",D:"User variable 1 (integer)",W:"entvars_t",C:"entvars_t",J:1},{P:"iuser2",D:"User variable 2 (integer)",W:"entvars_t",C:"entvars_t",J:1},{P:"iuser3",D:"User variable 3 (integer)",W:"entvars_t",C:"entvars_t",J:1},{P:"iuser4",D:"User variable 4 (integer)",W:"entvars_t",C:"entvars_t",J:1},{P:"fuser1",D:"User variable 1 (float)",W:"entvars_t",C:"entvars_t",J:1},{P:"fuser2",D:"User variable 2 (float)",W:"entvars_t",C:"entvars_t",J:1},{P:"fuser3",D:"User variable 3 (float)",W:"entvars_t",C:"entvars_t",J:1},{P:"fuser4",D:"User variable 4 (float)",W:"entvars_t",C:"entvars_t",J:1},{P:"vuser1",D:"User variable 1 (Vector)",W:"entvars_t",C:"entvars_t",J:1},{P:"vuser2",D:"User variable 2 (Vector)",W:"entvars_t",C:"entvars_t",J:1},{P:"vuser3",D:"User variable 3 (Vector)",W:"entvars_t",C:"entvars_t",J:1},{P:"vuser4",D:"User variable 4 (Vector)",W:"entvars_t",C:"entvars_t",J:1},{P:"euser1",D:"User variable 1 (Edict)",W:"entvars_t",C:"entvars_t",J:1},{P:"euser2",D:"User variable 2 (Edict)",W:"entvars_t",C:"entvars_t",J:1},{P:"euser3",D:"User variable 3 (Edict)",W:"entvars_t",C:"entvars_t",J:1},{P:"euser4",D:"User variable 4 (Edict)",W:"entvars_t",C:"entvars_t",J:1},{P:"EnvStudioKeyframe",D:"EnvStudioKeyframe plain value object",W:"EnvStudioKeyframe",C:"Class"},{P:"EnvStudioKeyframe",D:"Default constructor",W:"EnvStudioKeyframe",C:"EnvStudioKeyframe",J:1},{P:"opAssign",D:"operator=",W:"EnvStudioKeyframe",C:"EnvStudioKeyframe",J:1},{P:"frame",D:"",W:"EnvStudioKeyframe",C:"EnvStudioKeyframe",J:1},{P:"renderamt",D:"",W:"EnvStudioKeyframe",C:"EnvStudioKeyframe",J:1},{P:"scale",D:"",W:"EnvStudioKeyframe",C:"EnvStudioKeyframe",J:1},{P:"File",D:"File class.\nIs used to read from/write to files in disk.",W:"File",C:"Class"},{P:"IsOpen",D:"Returns whether the file was successfully opened.",W:"File",C:"File",J:1},{P:"Close",D:"Closes the file if it is open.",W:"File",C:"File",J:1},{P:"Remove",D:"Removes the file. The file must be open, and you must have write access.",W:"File",C:"File",J:1},{P:"GetSize",D:"Returns the size of the file.",W:"File",C:"File",J:1},{P:"Tell",D:"Tells the position of the read/write pointer.",W:"File",C:"File",J:1},{P:"Seek",D:"Sets the read/write pointer to a new position. Returns the new position within the file.",W:"File",C:"File",J:1},{P:"EOFReached",D:"Returns whether end of file was reached.",W:"File",C:"File",J:1},{P:"ReadCharacter",D:"Reads a single character.",W:"File",C:"File",J:1},{P:"ReadLine",D:"Reads a line from the file.",W:"File",C:"File",J:1},{P:"Read",D:"Reads a number of bytes into the given BLOB.",W:"File",C:"File",J:1},{P:"ReadBlob",D:"Reads a number of bytes into a BLOB.",W:"File",C:"File",J:1},{P:"Write",D:"Writes a string to the file.",W:"File",C:"File",J:1},{P:"FileQuota",D:"Represents a quota that filesystems adhere to when handling write operations.",W:"FileQuota",C:"Class"},{P:"GetTotalSize",D:"Gets the total size, in bytes, that is allowed to be used by filesystems using this quota object.",W:"FileQuota",C:"FileQuota",J:1},{P:"GetSizeInUse",D:"Gets the size, in bytes, that is in use.",W:"FileQuota",C:"FileQuota",J:1},{P:"GetSizeLeft",D:"Gets the amount of size, in bytes, left that can be written to.",W:"FileQuota",C:"FileQuota",J:1},{P:"CanWriteAmount",D:"Returns whether the given amount of bytes can be written.",W:"FileQuota",C:"FileQuota",J:1},{P:"SizeLeftAfterWrite",D:"Returns the size that is left after the given amount of bytes have been written.",W:"FileQuota",C:"FileQuota",J:1},{P:"Function",D:"Reflection function class. Can be used to call global functions.",W:"Function",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"Function",C:"Function",J:1},{P:"GetNamespace",D:"Gets this instance's namespace.",W:"Function",C:"Function",J:1},{P:"GetName",D:"Gets this instance's name.",W:"Function",C:"Function",J:1},{P:"Equals",D:"Returns whether the given callable type is identical to this one.",W:"Function",C:"Function",J:1},{P:"IsCompatible",D:"Returns whether the given object type is compatible with this one.",W:"Function",C:"Function",J:1},{P:"Call",D:"Calls this function. pArguments must be valid.",W:"Function",C:"Function",J:1},{P:"GlobalEntity",D:"Global state entity",W:"GlobalEntity",C:"Class"},{P:"name",D:"Gets the name of this global state",W:"GlobalEntity",C:"GlobalEntity",J:1},{P:"levelName",D:"Name of the level where this global state was last updated",W:"GlobalEntity",C:"GlobalEntity",J:1},{P:"state",D:"Global state of this entity",W:"GlobalEntity",C:"GlobalEntity",J:1},{P:"next",D:"Next global state entity in the list",W:"GlobalEntity",C:"GlobalEntity",J:1},{P:"HealthInfo",D:"Entity takehealth info",W:"HealthInfo",C:"Class"},{P:"pEntity",D:"Who get healing?",W:"HealthInfo",C:"HealthInfo",J:1},{P:"flHealth",D:"Recover amount.",W:"HealthInfo",C:"HealthInfo",J:1},{P:"bitsDamageType",D:"Recover dmg type.",W:"HealthInfo",C:"HealthInfo",J:1},{P:"health_cap",D:"If health_cap is non-zero, won't add more than health_cap. Returns true if it took damage, false otherwise.",W:"HealthInfo",C:"HealthInfo",J:1},{P:"HUDNumDisplayParams",D:"Holds parameters for custom numeric/time display.",W:"HUDNumDisplayParams",C:"Class"},{P:"HUDNumDisplayParams",D:"Constructor",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"opAssign",D:"Assignment operator",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"channel",D:"Channel.\nRange: 0-15 (each module type has its own channel group).",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"flags",D:"Flags\nSee HUD_ELEM, HUD_NUM (numeric display only) and HUD_TIME (time display only) enums.",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"value",D:"Value",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"defdigits",D:"Default number of digits (numeric display only)",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"maxdigits",D:"Maximum number of digits (numeric display only)",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"x",D:"Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"y",D:"Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"color1",D:"Color 1",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"color2",D:"Color 2",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"fadeinTime",D:"Fade in time",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"fadeoutTime",D:"Fade out time",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"holdTime",D:"Hold time",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"fxTime",D:"Effect time",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"effect",D:"Effect\nSee HUD_EFFECT enum.",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"spritename",D:"Sprite name",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"left",D:"Sprite left offset\nRange: 0-255",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"top",D:"Sprite top offset\nRange: 0-255",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"width",D:"Sprite width\nRange: 0-512 (0: auto; use total width of the sprite)",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"height",D:"Sprite height\nRange: 0-512 (0: auto; use total height of the sprite)",W:"HUDNumDisplayParams",C:"HUDNumDisplayParams",J:1},{P:"HUDSpriteParams",D:"Holds parameters for custom sprite.",W:"HUDSpriteParams",C:"Class"},{P:"HUDSpriteParams",D:"Constructor",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"opAssign",D:"Assignment operator",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"channel",D:"Channel.\nRange: 0-15 (each module type has its own channel group).",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"flags",D:"Flags\nSee HUD_ELEM and HUD_SPR enums.",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"spritename",D:"Sprite name",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"left",D:"Sprite left offset\nRange: 0-255",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"top",D:"Sprite top offset\nRange: 0-255",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"width",D:"Sprite width\nRange: 0-512 (0: auto; use total width of the sprite)",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"height",D:"Sprite height\nRange: 0-512 (0: auto; use total height of the sprite)",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"x",D:"Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"y",D:"Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"color1",D:"Color 1",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"color2",D:"Color 2",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"frame",D:"Frame",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"numframes",D:"Number of frames",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"framerate",D:"Framerate",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"fadeinTime",D:"Fade in time",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"fadeoutTime",D:"Fade out time",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"holdTime",D:"Hold time",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"fxTime",D:"Effect time",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"effect",D:"Effect\nSee HUD_EFFECT enum.",W:"HUDSpriteParams",C:"HUDSpriteParams",J:1},{P:"HUDTextParams",D:"Parameters for text output to the HUD.",W:"HUDTextParams",C:"Class"},{P:"HUDTextParams",D:"Constructor",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"opAssign",D:"Assignment operator",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"x",D:"Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"y",D:"Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"effect",D:"Effects.\n0 : Fade In/Out\n1 : Credits\n2 : Scan Out",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"r1",D:"Red 1",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"g1",D:"Green 1",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"b1",D:"Blue 1",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"a1",D:"Alpha 1",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"r2",D:"Red 2",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"g2",D:"Green 2",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"b2",D:"Blue 2",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"a2",D:"Alpha 2",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"fadeinTime",D:"Fade in time",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"fadeoutTime",D:"Fade out time",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"holdTime",D:"Hold time",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"fxTime",D:"Effect time (scan effect only)",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"channel",D:"Channel. 1-4.",W:"HUDTextParams",C:"HUDTextParams",J:1},{P:"InventoryList",D:"Structure for a list of item_inventory's stored within CBaseMonster",W:"InventoryList",C:"Class"},{P:"hItem",D:"Item",W:"InventoryList",C:"InventoryList",J:1},{P:"pNext",D:"Next item in the list",W:"InventoryList",C:"InventoryList",J:1},{P:"InventoryRules",D:"Inventory rules: Contained by CBaseToggle to hold and\nmanage inventory rules attached to a triggerable entity",W:"InventoryRules",C:"Class"},{P:"CanUseTrigger",D:"Returns whether the owning trigger can be triggered by the given activator.",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_hEntity",D:"Owning entity",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szRequiresItemName",D:"Inventory: Require these item(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szRequiresItemGroup",D:"Inventory: Require an item from these group(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_iRequiresItemGroupNum",D:"Inventory: Number of item(s) from the required group(s) required (0 = all)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szCantHaveItemName",D:"Inventory: Must not have these item(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szCantHaveItemGroup",D:"Inventory: Must not have an item in these group(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_iCantHaveItemGroupNum",D:"Inventory: Number of item(s) from the can't have group(s) (0 = all)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_fIgnoreUseTriggers",D:"On pass: Ignore item's on use triggers?",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szDropItemNameOnUse",D:"On pass: Drop item(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szDropItemGroupOnUse",D:"On pass: Drop item(s) in these group(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_fIgnoreDropTriggers",D:"On pass: Ignore item's on drop triggers?",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szReturnItemNameOnUse",D:"On pass: Return item(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szReturnItemGroupOnUse",D:"On pass: Return item(s) in these group(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_fIgnoreReturnTriggers",D:"On pass: Ignore item's on return triggers?",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szDestroyItemNameOnUse",D:"On pass: Destroy item(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szDestroyItemGroupOnUse",D:"On pass: Destroy item(s) in these group(s)",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_fIgnoreDestroyTriggers",D:"On pass: Ignore item's on destroy triggers?",W:"InventoryRules",C:"InventoryRules",J:1},{P:"m_szTargetOnFail",D:"Target: Inventory rules failed",W:"InventoryRules",C:"InventoryRules",J:1},{P:"IReflectionGroup",D:"Reflection group. Represents a group of reflectable objects.",W:"IReflectionGroup",C:"Class"},{P:"FindGlobalFunction",D:"Finds a global function. Searches by name by default, searches by declaration if fSearchByDecl is set to true.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"GetGlobalFunctionCount",D:"Gets the number of global functions.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"GetGlobalFunctionByIndex",D:"Gets the global function at the given index.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"FindObjectType",D:"Finds an object type. Searches by name by default, searches by declaration if fSearchByDecl is set to true.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"GetObjectTypeCount",D:"Gets the number of object types.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"GetObjectTypeByIndex",D:"Gets the object type at the given index.",W:"IReflectionGroup",C:"IReflectionGroup",J:1},{P:"ItemInfo",D:"Item info object.",W:"ItemInfo",C:"Class"},{P:"ItemInfo",D:"Constructor",W:"ItemInfo",C:"ItemInfo",J:1},{P:"opAssign",D:"Assignment operator",W:"ItemInfo",C:"ItemInfo",J:1},{P:"szName",D:"Gets the name of this weapon.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"szAmmo1",D:"Gets the primary ammo name of this weapon.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"szAmmo2",D:"Gets the secondary ammo name of this weapon.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iId",D:"Item id.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iSlot",D:"Item HUD slot.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iPosition",D:"Item HUD slot position.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iFlags",D:"Item flags.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iWeight",D:"Item weight.\nThis value used to determine this weapon's importance in autoselection.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iMaxAmmo1",D:"Item primary max ammo. -1 if this weapon does not use primary ammo.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iAmmo1Drop",D:"Amount of dropped primary ammo.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iMaxAmmo2",D:"Item secondary max ammo. -1 if this weapon does not use secondary ammo.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iAmmo2Drop",D:"Amount of dropped secondary ammo.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"iMaxClip",D:"Item primary ammo max clip contents.",W:"ItemInfo",C:"ItemInfo",J:1},{P:"ItemMapping",D:"Item mapping for classic mode.",W:"ItemMapping",C:"Class"},{P:"ItemMapping",D:"Constructor",W:"ItemMapping",C:"ItemMapping",J:1},{P:"get_From",D:"Gets the From item name",W:"ItemMapping",C:"ItemMapping",J:1},{P:"get_To",D:"Gets the To item name",W:"ItemMapping",C:"ItemMapping",J:1},{P:"KeyValueBuffer",D:"Buffer containing keyvalue pairs",W:"KeyValueBuffer",C:"Class"},{P:"GetClient",D:"Gets the client that this buffer belongs to.",W:"KeyValueBuffer",C:"KeyValueBuffer",J:1},{P:"GetValue",D:"Gets a key value",W:"KeyValueBuffer",C:"KeyValueBuffer",J:1},{P:"SetValue",D:"Sets a key value.",W:"KeyValueBuffer",C:"KeyValueBuffer",J:1},{P:"RemoveValue",D:"Removes a key value. If this is a physics key buffer, this will set the key to an empty string instead.",W:"KeyValueBuffer",C:"KeyValueBuffer",J:1},{P:"MatchResults",D:"Regular expression match results",W:"MatchResults",C:"Class"},{P:"MatchResults",D:"Constructor",W:"MatchResults",C:"MatchResults",J:1},{P:"IsEmpty",D:"Returns whether this match results object is empty or not",W:"MatchResults",C:"MatchResults",J:1},{P:"GetSize",D:"Returns the number of matches",W:"MatchResults",C:"MatchResults",J:1},{P:"GetMaxSize",D:"Returns the maximum size",W:"MatchResults",C:"MatchResults",J:1},{P:"opIndex",D:"Returns the sub match object at the given index",W:"MatchResults",C:"MatchResults",J:1},{P:"GetPrefix",D:"Gets the prefix submatch",W:"MatchResults",C:"MatchResults",J:1},{P:"GetSuffix",D:"Gets the suffix submatch",W:"MatchResults",C:"MatchResults",J:1},{P:"GetLength",D:"Gets the length of the given submatch",W:"MatchResults",C:"MatchResults",J:1},{P:"GetPosition",D:"Gets the position of the given submatch",W:"MatchResults",C:"MatchResults",J:1},{P:"GetString",D:"Gets the given submatch as a string",W:"MatchResults",C:"MatchResults",J:1},{P:"Format",D:"Gets the length of the given submatch",W:"MatchResults",C:"MatchResults",J:1},{P:"Swap",D:"Swaps these match results with the given results.",W:"MatchResults",C:"MatchResults",J:1},{P:"Method",D:"Reflection method class. Can be used to call object methods.",W:"Method",C:"Class"},{P:"opImplCast",D:"Implicitly casts to base type.",W:"Method",C:"Method",J:1},{P:"GetNamespace",D:"Gets this instance's namespace.",W:"Method",C:"Method",J:1},{P:"GetName",D:"Gets this instance's name.",W:"Method",C:"Method",J:1},{P:"Equals",D:"Returns whether the given callable type is identical to this one.",W:"Method",C:"Method",J:1},{P:"IsCompatible",D:"Returns whether the given object type is compatible with this one.",W:"Method",C:"Method",J:1},{P:"Call",D:"Calls this method. pArguments must be valid.",W:"Method",C:"Method",J:1},{P:"MonsterEvent",D:"Monster event type",W:"MonsterEvent",C:"Class"},{P:"options",D:"Options. Usually a sound name.",W:"MonsterEvent",C:"MonsterEvent",J:1},{P:"event",D:"Event type.\nSee MonsterEventType enum",W:"MonsterEvent",C:"MonsterEvent",J:1},{P:"NetworkMessage",D:"Network message class. Used to send messages to clients.",W:"NetworkMessage",C:"Class"},{P:"NetworkMessage",D:"Constructor",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"End",D:"Ends the message. Must be called to send the message.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteByte",D:"Writes a byte to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteChar",D:"Writes a character to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteShort",D:"Writes a short to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteLong",D:"Writes a long to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteAngle",D:"Writes an angle to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteCoord",D:"Writes a coordinate to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteVector",D:"Writes a vector to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteString",D:"Writes a string to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteEntity",D:"Writes an entity index to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"WriteFloat",D:"Writes a float to the buffer.",W:"NetworkMessage",C:"NetworkMessage",J:1},{P:"ObjectType",D:"Represents an object type",W:"ObjectType",C:"Class"},{P:"GetMethodCount",D:"Gets the number of methods this object type has.",W:"ObjectType",C:"ObjectType",J:1},{P:"GetMethodByIndex",D:"Gets the method at the given index.",W:"ObjectType",C:"ObjectType",J:1},{P:"GetMethod",D:"Gets a method by declaration.",W:"ObjectType",C:"ObjectType",J:1},{P:"MethodExists",D:"Gets a method by declaration.",W:"ObjectType",C:"ObjectType",J:1},{P:"Equals",D:"Returns whether the given object type is identical to this one.",W:"ObjectType",C:"ObjectType",J:1},{P:"IsCompatible",D:"Returns whether the given object type is compatible with this one.",W:"ObjectType",C:"ObjectType",J:1},{P:"DerivesFrom",D:"Returns whether this object derives from the given type.",W:"ObjectType",C:"ObjectType",J:1},{P:"Observer",D:"Observer mode management class.",W:"Observer",C:"Class"},{P:"GetObserverTarget",D:"Gets the current observer target, if any.",W:"Observer",C:"Observer",J:1},{P:"ResetObserverTarget",D:"Resets the observer target and finds the next suitable candidate.",W:"Observer",C:"Observer",J:1},{P:"SetObserverTarget",D:"Sets the observer target.",W:"Observer",C:"Observer",J:1},{P:"CanUseObserver",D:"Returns whether this player can use observer mode.",W:"Observer",C:"Observer",J:1},{P:"IsObserver",D:"Returns whether this player is an observer.",W:"Observer",C:"Observer",J:1},{P:"StartObserver",D:"Starts observer mode.",W:"Observer",C:"Observer",J:1},{P:"StopObserver",D:"Stops observer mode.",W:"Observer",C:"Observer",J:1},{P:"FindNextPlayer",D:"Find the next player to observe.",W:"Observer",C:"Observer",J:1},{P:"HandleButtons",D:"Handles button input.",W:"Observer",C:"Observer",J:1},{P:"SetMode",D:"Sets the observer mode.",W:"Observer",C:"Observer",J:1},{P:"FindObserverStartPoint",D:"Find a point to start a player at for observer.",W:"Observer",C:"Observer",J:1},{P:"HasCorpse",D:"Returns whether this player has a corpse.",W:"Observer",C:"Observer",J:1},{P:"CanControlObserverMode",D:"Returns whether this player can control the observer mode.",W:"Observer",C:"Observer",J:1},{P:"SetObserverModeControlEnabled",D:"Sets whether this player can control the observer mode.",W:"Observer",C:"Observer",J:1},{P:"RemoveDeadBody",D:"Removes the player's dead body, if it exists.",W:"Observer",C:"Observer",J:1},{P:"PhysicObjectParams",D:"PhysicObjectParams plain value object",W:"PhysicObjectParams",C:"Class"},{P:"PhysicObjectParams",D:"Default constructor",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"opAssign",D:"operator=",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"mass",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"linearfriction",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"rollingfriction",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"restitution",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"ccdradius",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"ccdthreshold",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"flags",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"impactimpulse_threshold",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"clippinghull_shapetype",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"clippinghull_shapedirection",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"clippinghull_size",D:"",W:"PhysicObjectParams",C:"PhysicObjectParams",J:1},{P:"PhysicPlayerConfigs",D:"PhysicPlayerConfigs plain value object",W:"PhysicPlayerConfigs",C:"Class"},{P:"PhysicPlayerConfigs",D:"Default constructor",W:"PhysicPlayerConfigs",C:"PhysicPlayerConfigs",J:1},{P:"opAssign",D:"operator=",W:"PhysicPlayerConfigs",C:"PhysicPlayerConfigs",J:1},{P:"mass",D:"",W:"PhysicPlayerConfigs",C:"PhysicPlayerConfigs",J:1},{P:"maxPendingVelocity",D:"",W:"PhysicPlayerConfigs",C:"PhysicPlayerConfigs",J:1},{P:"PhysicShapeParams",D:"PhysicShapeParams plain value object",W:"PhysicShapeParams",C:"Class"},{P:"PhysicShapeParams",D:"Default constructor",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"opAssign",D:"operator=",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"type",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"direction",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"origin",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"angles",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"size",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"multispheres",D:"",W:"PhysicShapeParams",C:"PhysicShapeParams",J:1},{P:"PhysicVehicleParams",D:"PhysicVehicleParams plain value object",W:"PhysicVehicleParams",C:"Class"},{P:"PhysicVehicleParams",D:"Default constructor",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"opAssign",D:"operator=",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"suspensionStiffness",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"suspensionCompression",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"suspensionDamping",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"maxSuspensionTravelCm",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"frictionSlip",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"maxSuspensionForce",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"flags",D:"",W:"PhysicVehicleParams",C:"PhysicVehicleParams",J:1},{P:"PhysicWheelParams",D:"PhysicWheelParams plain value object",W:"PhysicWheelParams",C:"Class"},{P:"PhysicWheelParams",D:"Default constructor",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"opAssign",D:"operator=",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"ent",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"connectionPoint",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"wheelDirection",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"wheelAxle",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"suspensionStiffness",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"suspensionDamping",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"flags",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"index",D:"",W:"PhysicWheelParams",C:"PhysicWheelParams",J:1},{P:"playermove_t",D:"PlayerMove control struct in engine",W:"playermove_t",C:"Class"},{P:"GetTextureName",D:"get texture name",W:"playermove_t",C:"playermove_t",J:1},{P:"player_index",D:"player index of current player that playing with playermove code",W:"playermove_t",C:"playermove_t",J:1},{P:"server",D:"For debugging, are we running physics code on server side?",W:"playermove_t",C:"playermove_t",J:1},{P:"multiplayer",D:"1 == multiplayer server",W:"playermove_t",C:"playermove_t",J:1},{P:"time",D:"realtime on host, for reckoning duck timing",W:"playermove_t",C:"playermove_t",J:1},{P:"frametime",D:"Duration of this frame",W:"playermove_t",C:"playermove_t",J:1},{P:"forward",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"right",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"up",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"origin",D:"Movement origin.",W:"playermove_t",C:"playermove_t",J:1},{P:"angles",D:"Movement view angles.",W:"playermove_t",C:"playermove_t",J:1},{P:"oldangles",D:"Angles before movement view angles were looked at.",W:"playermove_t",C:"playermove_t",J:1},{P:"velocity",D:"Current movement direction.",W:"playermove_t",C:"playermove_t",J:1},{P:"movedir",D:"For waterjumping, a forced forward velocity so we can fly over lip of ledge.",W:"playermove_t",C:"playermove_t",J:1},{P:"basevelocity",D:"Velocity of the conveyor we are standing, e.g.",W:"playermove_t",C:"playermove_t",J:1},{P:"view_ofs",D:"Our eye position.",W:"playermove_t",C:"playermove_t",J:1},{P:"flDuckTime",D:"Time we started duck",W:"playermove_t",C:"playermove_t",J:1},{P:"bInDuck",D:"In process of ducking or ducked already?",W:"playermove_t",C:"playermove_t",J:1},{P:"flTimeStepSound",D:"Next time we can play a step sound",W:"playermove_t",C:"playermove_t",J:1},{P:"iStepLeft",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"flFallVelocity",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"punchangle",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"flSwimTime",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"flNextPrimaryAttack",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"effects",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"flags",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"usehull",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"gravity",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"friction",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"oldbuttons",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"waterjumptime",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"dead",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"deadflag",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"spectator",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"movetype",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"onground",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"waterlevel",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"watertype",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"oldwaterlevel",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"chtexturetype",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"maxspeed",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"clientmaxspeed",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"iuser1",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"iuser2",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"iuser3",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"iuser4",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"fuser1",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"fuser2",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"fuser3",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"fuser4",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"vuser1",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"vuser2",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"vuser3",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"vuser4",D:"",W:"playermove_t",C:"playermove_t",J:1},{P:"Regex",D:"Represents a regular expression",W:"Regex",C:"Class"},{P:"Regex",D:"Default Constructor",W:"Regex",C:"Regex",J:1},{P:"Assign",D:"Assigns the given regular expression to this one.",W:"Regex",C:"Regex",J:1},{P:"GetMarkCount",D:"Gets the mark count",W:"Regex",C:"Regex",J:1},{P:"GetFlags",D:"Gets this regex's flags",W:"Regex",C:"Regex",J:1},{P:"Swap",D:"Swaps this regular expression's contents with the given expression",W:"Regex",C:"Regex",J:1},{P:"ReturnValue",D:"Reflection return value.",W:"ReturnValue",C:"Class"},{P:"HasReturnValue",D:"Returns whether there is a return value or not.",W:"ReturnValue",C:"ReturnValue",J:1},{P:"ToAny",D:"Returns the return value as an any instance, if there was a return value.",W:"ReturnValue",C:"ReturnValue",J:1},{P:"RGBA",D:"Color stored as four uint8 components",W:"RGBA",C:"Class"},{P:"RGBA",D:"Constructor",W:"RGBA",C:"RGBA",J:1},{P:"opAssign",D:"Assignment operator",W:"RGBA",C:"RGBA",J:1},{P:"r",D:"Red component",W:"RGBA",C:"RGBA",J:1},{P:"g",D:"Green component",W:"RGBA",C:"RGBA",J:1},{P:"b",D:"Blue component",W:"RGBA",C:"RGBA",J:1},{P:"a",D:"Alpha component",W:"RGBA",C:"RGBA",J:1},{P:"SayParameters",D:"ClientSay parameters",W:"SayParameters",C:"Class"},{P:"GetPlayer",D:"Gets the player that is saying something",W:"SayParameters",C:"SayParameters",J:1},{P:"GetSayType",D:"Gets the say type of this text",W:"SayParameters",C:"SayParameters",J:1},{P:"GetCommand",D:"Gets the entire command string",W:"SayParameters",C:"SayParameters",J:1},{P:"GetArguments",D:"Gets the arguments in this command.",W:"SayParameters",C:"SayParameters",J:1},{P:"get_ShouldHide",D:"Gets whether this text will be hidden or not",W:"SayParameters",C:"SayParameters",J:1},{P:"set_ShouldHide",D:"Sets whether this text will be hidden or not",W:"SayParameters",C:"SayParameters",J:1},{P:"Schedule",D:"Schedule for monsters to follow.",W:"Schedule",C:"Class"},{P:"GetTask",D:"Gets a task in this schedule.\nMust be between 0 and cTasks.",W:"Schedule",C:"Schedule",J:1},{P:"szName",D:"Gets the name of this schedule.",W:"Schedule",C:"Schedule",J:1},{P:"cTasks",D:"Number of tasks in this schedule.",W:"Schedule",C:"Schedule",J:1},{P:"iInterruptMask",D:"A bit mask of conditions that can interrupt this schedule.",W:"Schedule",C:"Schedule",J:1},{P:"iSoundMask",D:"A more specific mask that indicates which TYPES of sounds will interrupt the schedule in the event that the schedule is broken by COND_HEAR_SOUND.",W:"Schedule",C:"Schedule",J:1},{P:"ScriptBaseAnimating",D:"Custom entity for CBaseAnimating",W:"ScriptBaseAnimating",C:"Class"},{P:"SetUse",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetBlocked",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetTouch",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetThink",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetBaseClass",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetPev",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"SetSelf",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"callback",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"BaseClass",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"pev",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"self",D:"",W:"ScriptBaseAnimating",C:"ScriptBaseAnimating",J:1},{P:"ScriptBaseEntity",D:"Custom entity for CBaseEntity",W:"ScriptBaseEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetThink",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetPev",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"callback",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"pev",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"self",D:"",W:"ScriptBaseEntity",C:"ScriptBaseEntity",J:1},{P:"ScriptBaseItemEntity",D:"Custom entity for CItem",W:"ScriptBaseItemEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetThink",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetPev",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"callback",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"pev",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"self",D:"",W:"ScriptBaseItemEntity",C:"ScriptBaseItemEntity",J:1},{P:"ScriptBaseMonsterEntity",D:"Custom entity for CBaseMonster",W:"ScriptBaseMonsterEntity",C:"Class"},{P:"ScheduleFromName",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetUse",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetThink",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetPev",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"m_Schedules",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"callback",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"pev",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"self",D:"",W:"ScriptBaseMonsterEntity",C:"ScriptBaseMonsterEntity",J:1},{P:"ScriptBasePlayerAmmoEntity",D:"Custom entity for CBasePlayerAmmo",W:"ScriptBasePlayerAmmoEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetThink",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetPev",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"callback",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"pev",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"self",D:"",W:"ScriptBasePlayerAmmoEntity",C:"ScriptBasePlayerAmmoEntity",J:1},{P:"ScriptBasePlayerItemEntity",D:"Custom entity for CBasePlayerItem",W:"ScriptBasePlayerItemEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetThink",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetPev",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"callback",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"pev",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"self",D:"",W:"ScriptBasePlayerItemEntity",C:"ScriptBasePlayerItemEntity",J:1},{P:"ScriptBasePlayerWeaponEntity",D:"Custom entity for CBasePlayerWeapon",W:"ScriptBasePlayerWeaponEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetThink",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetPev",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"callback",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"pev",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"self",D:"",W:"ScriptBasePlayerWeaponEntity",C:"ScriptBasePlayerWeaponEntity",J:1},{P:"ScriptBaseTankEntity",D:"Custom entity for CBaseTank",W:"ScriptBaseTankEntity",C:"Class"},{P:"SetUse",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetBlocked",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetTouch",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetThink",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetCallbackHandler",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetBaseClass",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetPev",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"SetSelf",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"callback",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"BaseClass",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"pev",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"self",D:"",W:"ScriptBaseTankEntity",C:"ScriptBaseTankEntity",J:1},{P:"ScriptSchedule",D:"Script schedule class",W:"ScriptSchedule",C:"Class"},{P:"GetTask",D:"Gets a task in this schedule.\nMust be between 0 and cTasks.",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"szName",D:"Gets the name of this schedule.",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"ScriptSchedule",D:"Constructor",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"opImplCast",D:"Cast to Schedule",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"AddTask",D:"Adds a task to the list",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"cTasks",D:"Number of tasks in this schedule.",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"iInterruptMask",D:"A bit mask of conditions that can interrupt this schedule.",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"iSoundMask",D:"A more specific mask that indicates which TYPES of sounds will interrupt the schedule in the event that the schedule is broken by COND_HEAR_SOUND.",W:"ScriptSchedule",C:"ScriptSchedule",J:1},{P:"ScriptTask",D:"Script task class",W:"ScriptTask",C:"Class"},{P:"ScriptTask",D:"Constructor",W:"ScriptTask",C:"ScriptTask",J:1},{P:"iTask",D:"Task to execute.\nCan be monster-specific.",W:"ScriptTask",C:"ScriptTask",J:1},{P:"flData",D:"Task data",W:"ScriptTask",C:"ScriptTask",J:1},{P:"string",D:"String type",W:"string",C:"Class"},{P:"string",D:"Constructor",W:"string",C:"string",J:1},{P:"Assign",D:"Assigns a string to this, copying up to uiCount characters.",W:"string",C:"string",J:1},{P:"opAssign",D:"Assigns a string to this one.",W:"string",C:"string",J:1},{P:"Length",D:"Gets the length of this string.",W:"string",C:"string",J:1},{P:"IsEmpty",D:"Returns whether this string is empty.",W:"string",C:"string",J:1},{P:"Resize",D:"Shrinks this string to uiSize. If bKeepData is true, the original string is kept.",W:"string",C:"string",J:1},{P:"Reserve",D:"Reserves at least iMinimum characters worth of capacity. If bKeepData is true, the original string is kept.",W:"string",C:"string",J:1},{P:"Clear",D:"Clears the contents of this string.",W:"string",C:"string",J:1},{P:"opIndex",D:"Gets a character by index.",W:"string",C:"string",J:1},{P:"SetCharAt",D:"Sets a character by index.",W:"string",C:"string",J:1},{P:"opAddAssign",D:"Appends the given string to this one.",W:"string",C:"string",J:1},{P:"opCmp",D:"Compares strings.",W:"string",C:"string",J:1},{P:"Compare",D:"Compares strings.",W:"string",C:"string",J:1},{P:"CompareN",D:"Compares strings up to amount characters.",W:"string",C:"string",J:1},{P:"ICompare",D:"Compares strings case-insensitively.",W:"string",C:"string",J:1},{P:"ICompareN",D:"Compares strings up to amount characters case-insensitively.",W:"string",C:"string",J:1},{P:"opEquals",D:"Returns whether strings are equal.",W:"string",C:"string",J:1},{P:"Trim",D:"Trims leading and trailing whitespace, or a given character.",W:"string",C:"string",J:1},{P:"StartsWith",D:"Returns true if the string starts with the given string.",W:"string",C:"string",J:1},{P:"EndsWith",D:"Returns true if the string ends with the given string.",W:"string",C:"string",J:1},{P:"Find",D:"Find the first instance of the given string.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"RFind",D:"Find the first instance of the given string, searching in reverse.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"FindFirstOf",D:"Find the first instance of any character in the given string.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"FindLastOf",D:"Find the last instance of any character in the given string.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"FindFirstNotOf",D:"Find the first instance of the given string.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"FindLastNotOf",D:"Find the first instance of the given string, searching in reverse.\nReturns String::INVALID_INDEX if not found.",W:"string",C:"string",J:1},{P:"Tokenize",D:"Get the next token of the given string.\nReturns String::NO_MORE_TOKENS if none remaining.",W:"string",C:"string",J:1},{P:"ToLowercase",D:"Converts this string to lower case.",W:"string",C:"string",J:1},{P:"ToUppercase",D:"Converts this string to upper case.",W:"string",C:"string",J:1},{P:"SubString",D:"Returns a substring of this string.",W:"string",C:"string",J:1},{P:"Replace",D:"Replaces the given substring with the given replacement string.",W:"string",C:"string",J:1},{P:"Truncate",D:"Truncates the string to uiMaxLength characters.",W:"string",C:"string",J:1},{P:"opAdd",D:"Returns a copy of this string with the given string appended.",W:"string",C:"string",J:1},{P:"Split",D:"Splits this string by the given delimiter.",W:"string",C:"string",J:1},{P:"string_t",D:"Opaque handle to a pooled string.",W:"string_t",C:"Class"},{P:"string_t",D:"Default Constructor",W:"string_t",C:"string_t",J:1},{P:"opAssign",D:"Assignment operator",W:"string_t",C:"string_t",J:1},{P:"opImplConv",D:"Converts this string_t to a string.",W:"string_t",C:"string_t",J:1},{P:"SubMatch",D:"Regular expression submatch",W:"SubMatch",C:"Class"},{P:"SubMatch",D:"Constructor. Do not use.",W:"SubMatch",C:"SubMatch",J:1},{P:"GetLength",D:"Gets the length of the submatch",W:"SubMatch",C:"SubMatch",J:1},{P:"GetString",D:"Gets this submatch as a string",W:"SubMatch",C:"SubMatch",J:1},{P:"Compare",D:"Compares this submatch to another",W:"SubMatch",C:"SubMatch",J:1},{P:"Task",D:"Task for monsters to execute.",W:"Task",C:"Class"},{P:"iTask",D:"Task to execute.\nCan be monster-specific.",W:"Task",C:"Task",J:1},{P:"flData",D:"Task data",W:"Task",C:"Task",J:1},{P:"TimeDifference",D:"Represents the difference between 2 times.",W:"TimeDifference",C:"Class"},{P:"TimeDifference",D:"Default constructor",W:"TimeDifference",C:"TimeDifference",J:1},{P:"opAssign",D:"Assignment operator",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetTimeDifference",D:"Gets the time difference",W:"TimeDifference",C:"TimeDifference",J:1},{P:"IsPositive",D:"Returns whether the time difference is positive.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetSeconds",D:"Gets the time difference in seconds.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetMinutes",D:"Gets the time difference in minutes.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetHours",D:"Gets the time difference in hours.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetDays",D:"Gets the time difference in days.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"GetYears",D:"Gets the time difference in years.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"MakeAbsolute",D:"Makes the time difference absolute.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"SetDifferenceBetween",D:"Sets the time difference to the range between beginning and end. If begin is later than end, is negative.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"SetTime",D:"Sets the time difference to the range between 0 and time.",W:"TimeDifference",C:"TimeDifference",J:1},{P:"TraceResult",D:"Trace result structure",W:"TraceResult",C:"Class"},{P:"TraceResult",D:"Constructor.",W:"TraceResult",C:"TraceResult",J:1},{P:"opAssign",D:"Assignment operator",W:"TraceResult",C:"TraceResult",J:1},{P:"fAllSolid",D:"Flag telling whether the trace occured in an all solid area.",W:"TraceResult",C:"TraceResult",J:1},{P:"fStartSolid",D:"Flag telling whether the trace started in a solid area.",W:"TraceResult",C:"TraceResult",J:1},{P:"fInOpen",D:"Flag telling whether the trace ended in an open area.",W:"TraceResult",C:"TraceResult",J:1},{P:"fInWater",D:"Flag telling whether the trace ended in water",W:"TraceResult",C:"TraceResult",J:1},{P:"flFraction",D:"Fraction.",W:"TraceResult",C:"TraceResult",J:1},{P:"vecEndPos",D:"End position.",W:"TraceResult",C:"TraceResult",J:1},{P:"flPlaneDist",D:"Plane distance.",W:"TraceResult",C:"TraceResult",J:1},{P:"vecPlaneNormal",D:"Plane normal",W:"TraceResult",C:"TraceResult",J:1},{P:"pHit",D:"Hit entity",W:"TraceResult",C:"TraceResult",J:1},{P:"iHitgroup",D:"Hit group.",W:"TraceResult",C:"TraceResult",J:1},{P:"Vector",D:"3D Vector",W:"Vector",C:"Class"},{P:"Vector",D:"Default constructs a 3D vector (0, 0, 0)",W:"Vector",C:"Vector",J:1},{P:"opAssign",D:"Assign vector",W:"Vector",C:"Vector",J:1},{P:"opNeg",D:"Negate vector",W:"Vector",C:"Vector",J:1},{P:"opAdd",D:"Add vectors",W:"Vector",C:"Vector",J:1},{P:"opSub",D:"Subtract vectors",W:"Vector",C:"Vector",J:1},{P:"opMul",D:"Multiply vector by value",W:"Vector",C:"Vector",J:1},{P:"opMul_r",D:"Multiply vector by value",W:"Vector",C:"Vector",J:1},{P:"opDiv",D:"Divide vector by value",W:"Vector",C:"Vector",J:1},{P:"opDiv_r",D:"Divide vector by value",W:"Vector",C:"Vector",J:1},{P:"opIndex",D:"Index operator",W:"Vector",C:"Vector",J:1},{P:"opEquals",D:"Compare vectors",W:"Vector",C:"Vector",J:1},{P:"Length",D:"Gets the length of this vector",W:"Vector",C:"Vector",J:1},{P:"Length2D",D:"Gets the length of this vector in 2D",W:"Vector",C:"Vector",J:1},{P:"Normalize",D:"Returns the normalized form of this vector",W:"Vector",C:"Vector",J:1},{P:"Make2D",D:"Returns the 2D form of this vector",W:"Vector",C:"Vector",J:1},{P:"ToString",D:"Returns a string representation of this vector",W:"Vector",C:"Vector",J:1},{P:"x",D:"Vector x variable",W:"Vector",C:"Vector",J:1},{P:"y",D:"Vector y variable",W:"Vector",C:"Vector",J:1},{P:"z",D:"Vector z variable",W:"Vector",C:"Vector",J:1},{P:"Vector2D",D:"2D Vector",W:"Vector2D",C:"Class"},{P:"Vector2D",D:"Default constructs a 2D vector (0, 0)",W:"Vector2D",C:"Vector2D",J:1},{P:"opAssign",D:"Assign vector",W:"Vector2D",C:"Vector2D",J:1},{P:"opAdd",D:"Add vectors",W:"Vector2D",C:"Vector2D",J:1},{P:"opSub",D:"Subtract vectors",W:"Vector2D",C:"Vector2D",J:1},{P:"opMul",D:"Multiply vector by a value",W:"Vector2D",C:"Vector2D",J:1},{P:"opMul_r",D:"Multiply vector by a value",W:"Vector2D",C:"Vector2D",J:1},{P:"opDiv",D:"Divide vector by a value",W:"Vector2D",C:"Vector2D",J:1},{P:"opDiv_r",D:"Divide vector by a value",W:"Vector2D",C:"Vector2D",J:1},{P:"opEquals",D:"Compare vectors",W:"Vector2D",C:"Vector2D",J:1},{P:"Length",D:"Gets the length of this vector",W:"Vector2D",C:"Vector2D",J:1},{P:"Normalize",D:"Returns the normalized form of this vector",W:"Vector2D",C:"Vector2D",J:1},{P:"ToString",D:"Returns a string representation of this vector",W:"Vector2D",C:"Vector2D",J:1},{P:"x",D:"Vector2D x variable",W:"Vector2D",C:"Vector2D",J:1},{P:"y",D:"Vector2D y variable",W:"Vector2D",C:"Vector2D",J:1},{P:"Vote",D:"Vote class. Can be used to start custom votes.",W:"Vote",C:"Class"},{P:"Vote",D:"Constructor",W:"Vote",C:"Vote",J:1},{P:"GetName",D:"Gets name of this vote.",W:"Vote",C:"Vote",J:1},{P:"GetVoteText",D:"Gets the vote text.",W:"Vote",C:"Vote",J:1},{P:"SetVoteText",D:"Sets the vote text.",W:"Vote",C:"Vote",J:1},{P:"GetYesText",D:"Gets the yes button text.",W:"Vote",C:"Vote",J:1},{P:"SetYesText",D:"Sets the yes button text.",W:"Vote",C:"Vote",J:1},{P:"GetNoText",D:"Gets the no button text.",W:"Vote",C:"Vote",J:1},{P:"SetNoText",D:"Sets the no button text.",W:"Vote",C:"Vote",J:1},{P:"SetVoteBlockedCallback",D:"Sets the vote blocked callback.",W:"Vote",C:"Vote",J:1},{P:"SetVoteEndCallback",D:"Sets the vote end callback.",W:"Vote",C:"Vote",J:1},{P:"Start",D:"Starts this vote.",W:"Vote",C:"Vote",J:1},{P:"GetUserData",D:"Gets the user data set on this vote.",W:"Vote",C:"Vote",J:1},{P:"SetUserData",D:"Sets the user data on this vote.",W:"Vote",C:"Vote",J:1},{P:"ClearUserData",D:"Clears the user data set on this vote.",W:"Vote",C:"Vote",J:1},{P:"Waypoint",D:"Waypoint for monsters to follow.",W:"Waypoint",C:"Class"},{P:"vecLocation",D:"Location of this waypoint.",W:"Waypoint",C:"Waypoint",J:1},{P:"vecJumpVelocity",D:"Saved jump velocity.",W:"Waypoint",C:"Waypoint",J:1},{P:"vecLadderVelocity",D:"Saved ladder velocity.",W:"Waypoint",C:"Waypoint",J:1},{P:"hDoor",D:"Handle to a door to use.",W:"Waypoint",C:"Waypoint",J:1},{P:"flSavedMoveWait",D:"How long to wait on this waypoint.",W:"Waypoint",C:"Waypoint",J:1},{P:"iType",D:"Type(s) of this waypoint.",W:"Waypoint",C:"Waypoint",J:1},{P:"Activity",D:"Activity currently being played by a monster",W:"Activity",C:"Enum"},{P:"ACT_RESET",D:"Set m_Activity to this invalid value to force a reset to m_IdealActivity",W:"Activity",C:"Activity",J:1},{P:"ACT_IDLE",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_GUARD",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_WALK",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_RUN",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLY",D:"Fly (and flap if appropriate)",W:"Activity",C:"Activity",J:1},{P:"ACT_SWIM",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_HOP",D:"vertical jump",W:"Activity",C:"Activity",J:1},{P:"ACT_LEAP",D:"long forward jump",W:"Activity",C:"Activity",J:1},{P:"ACT_FALL",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_LAND",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_STRAFE_LEFT",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_STRAFE_RIGHT",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_ROLL_LEFT",D:"tuck and roll, left",W:"Activity",C:"Activity",J:1},{P:"ACT_ROLL_RIGHT",D:"tuck and roll, right",W:"Activity",C:"Activity",J:1},{P:"ACT_TURN_LEFT",D:"turn quickly left (stationary)",W:"Activity",C:"Activity",J:1},{P:"ACT_TURN_RIGHT",D:"turn quickly right (stationary)",W:"Activity",C:"Activity",J:1},{P:"ACT_CROUCH",D:"the act of crouching down from a standing position",W:"Activity",C:"Activity",J:1},{P:"ACT_CROUCHIDLE",D:"holding body in crouched position (loops)",W:"Activity",C:"Activity",J:1},{P:"ACT_STAND",D:"the act of standing from a crouched position",W:"Activity",C:"Activity",J:1},{P:"ACT_USE",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_SIGNAL1",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_SIGNAL2",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_SIGNAL3",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_TWITCH",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_COWER",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_SMALL_FLINCH",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_BIG_FLINCH",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_RANGE_ATTACK1",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_RANGE_ATTACK2",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_MELEE_ATTACK1",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_MELEE_ATTACK2",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_RELOAD",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_ARM",D:"pull out gun, for instance",W:"Activity",C:"Activity",J:1},{P:"ACT_DISARM",D:"reholster gun",W:"Activity",C:"Activity",J:1},{P:"ACT_EAT",D:"monster chowing on a large food item (loop)",W:"Activity",C:"Activity",J:1},{P:"ACT_DIESIMPLE",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_DIEBACKWARD",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_DIEFORWARD",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_DIEVIOLENT",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_BARNACLE_HIT",D:"barnacle tongue hits a monster",W:"Activity",C:"Activity",J:1},{P:"ACT_BARNACLE_PULL",D:"barnacle is lifting the monster ( loop )",W:"Activity",C:"Activity",J:1},{P:"ACT_BARNACLE_CHOMP",D:"barnacle latches on to the monster",W:"Activity",C:"Activity",J:1},{P:"ACT_BARNACLE_CHEW",D:"barnacle is holding the monster in its mouth ( loop )",W:"Activity",C:"Activity",J:1},{P:"ACT_SLEEP",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_INSPECT_FLOOR",D:"for active idles, look at something on or near the floor",W:"Activity",C:"Activity",J:1},{P:"ACT_INSPECT_WALL",D:"for active idles, look at something directly ahead of you ( doesn't HAVE to be a wall or on a wall )",W:"Activity",C:"Activity",J:1},{P:"ACT_IDLE_ANGRY",D:"alternate idle animation in which the monster is clearly agitated. (loop)",W:"Activity",C:"Activity",J:1},{P:"ACT_WALK_HURT",D:"limp  (loop)",W:"Activity",C:"Activity",J:1},{P:"ACT_RUN_HURT",D:"limp  (loop)",W:"Activity",C:"Activity",J:1},{P:"ACT_HOVER",D:"Idle while in flight",W:"Activity",C:"Activity",J:1},{P:"ACT_GLIDE",D:"Fly (don't flap)",W:"Activity",C:"Activity",J:1},{P:"ACT_FLY_LEFT",D:"Turn left in flight",W:"Activity",C:"Activity",J:1},{P:"ACT_FLY_RIGHT",D:"Turn right in flight",W:"Activity",C:"Activity",J:1},{P:"ACT_DETECT_SCENT",D:"this means the monster smells a scent carried by the air",W:"Activity",C:"Activity",J:1},{P:"ACT_SNIFF",D:"this is the act of actually sniffing an item in front of the monster",W:"Activity",C:"Activity",J:1},{P:"ACT_BITE",D:"some large monsters can eat small things in one bite. This plays one time, EAT loops.",W:"Activity",C:"Activity",J:1},{P:"ACT_THREAT_DISPLAY",D:"without attacking, monster demonstrates that it is angry. (Yell, stick out chest, etc )",W:"Activity",C:"Activity",J:1},{P:"ACT_FEAR_DISPLAY",D:"monster just saw something that it is afraid of",W:"Activity",C:"Activity",J:1},{P:"ACT_EXCITED",D:"for some reason, monster is excited. Sees something he really likes to eat, or whatever.",W:"Activity",C:"Activity",J:1},{P:"ACT_SPECIAL_ATTACK1",D:"very monster specific special attacks.",W:"Activity",C:"Activity",J:1},{P:"ACT_SPECIAL_ATTACK2",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_COMBAT_IDLE",D:"agitated idle.",W:"Activity",C:"Activity",J:1},{P:"ACT_WALK_SCARED",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_RUN_SCARED",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_VICTORY_DANCE",D:"killed a player, do a victory dance.",W:"Activity",C:"Activity",J:1},{P:"ACT_DIE_HEADSHOT",D:"die, hit in head. ",W:"Activity",C:"Activity",J:1},{P:"ACT_DIE_CHESTSHOT",D:"die, hit in chest",W:"Activity",C:"Activity",J:1},{P:"ACT_DIE_GUTSHOT",D:"die, hit in gut",W:"Activity",C:"Activity",J:1},{P:"ACT_DIE_BACKSHOT",D:"die, hit in back",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_HEAD",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_CHEST",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_STOMACH",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_LEFTARM",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_RIGHTARM",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_LEFTLEG",D:"",W:"Activity",C:"Activity",J:1},{P:"ACT_FLINCH_RIGHTLEG",D:"",W:"Activity",C:"Activity",J:1},{P:"AddPlayerItemResult",D:"Return values for CBaseEntity::AddPlayerItem",W:"AddPlayerItemResult",C:"Enum"},{P:"APIR_NotAdded",D:"Player could not pick up this item",W:"AddPlayerItemResult",C:"AddPlayerItemResult",J:1},{P:"APIR_DuplicateAdd",D:"Player was able to add it as duplicate",W:"AddPlayerItemResult",C:"AddPlayerItemResult",J:1},{P:"APIR_Added",D:"Player picked up this item",W:"AddPlayerItemResult",C:"AddPlayerItemResult",J:1},{P:"AdminLevel_t",D:"Admin levels",W:"AdminLevel_t",C:"Enum"},{P:"ADMIN_INIT",D:"Level on connect, tells functions not to use cached level",W:"AdminLevel_t",C:"AdminLevel_t",J:1},{P:"ADMIN_NO",D:"Not an administrator",W:"AdminLevel_t",C:"AdminLevel_t",J:1},{P:"ADMIN_YES",D:"Server administrator",W:"AdminLevel_t",C:"AdminLevel_t",J:1},{P:"ADMIN_OWNER",D:"Server owner (applies to a listenserver host player)",W:"AdminLevel_t",C:"AdminLevel_t",J:1},{P:"AITRIGGER",D:"trigger conditions for scripted AI",W:"AITRIGGER",C:"Enum"},{P:"AITRIGGER_NONE",D:"No Trigger",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_SEEPLAYER_ANGRY_AT_PLAYER",D:"See Player",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_TAKEDAMAGE",D:"Take Damage",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_HALFHEALTH",D:"50% Health Remaining",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_DEATH",D:"Death",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_SQUADMEMBERDIE",D:"Squad Member Dead",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_SQUADLEADERDIE",D:"Squad Leader Dead",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_HEARWORLD",D:"Hear World",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_HEARPLAYER",D:"Hear Player",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_HEARCOMBAT",D:"Hear Combat",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_SEEPLAYER_UNCONDITIONAL",D:"See Player Unconditional",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"AITRIGGER_SEEPLAYER_NOT_IN_COMBAT",D:"See Player, Not In Combat",W:"AITRIGGER",C:"AITRIGGER",J:1},{P:"ALERT_TYPE",D:"Alert type for console messages",W:"ALERT_TYPE",C:"Enum"},{P:"at_notice",D:"Prints 'NOTICE: <message>'",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"at_console",D:"Outputs text to the console only if developer is larger than 0",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"at_aiconsole",D:"Only shown if developer is 2 or larger",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"at_warning",D:"Prints 'Warning: <message>'",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"at_error",D:"Prints 'Error: <message>'",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"at_logged",D:"Server print to console (only in multiplayer games)",W:"ALERT_TYPE",C:"ALERT_TYPE",J:1},{P:"ArgumentType",D:"Which type a reflection argument is",W:"ArgumentType",C:"Enum"},{P:"AT_NONE",D:"Argument has no type. If an argument has this type it means something went wrong during parsing.",W:"ArgumentType",C:"ArgumentType",J:1},{P:"AT_VOID",D:"Argument is void.",W:"ArgumentType",C:"ArgumentType",J:1},{P:"AT_PRIMITIVE",D:"Argument is a primitive type.",W:"ArgumentType",C:"ArgumentType",J:1},{P:"AT_OBJECT",D:"Argument is an object type.",W:"ArgumentType",C:"ArgumentType",J:1},{P:"AT_ENUM",D:"Argument is an enum type.",W:"ArgumentType",C:"ArgumentType",J:1},{P:"BeamFlags",D:"Beam flags used by CBeam::SetFlags",W:"BeamFlags",C:"Enum"},{P:"BEAM_FSINE",D:"Beam shape follows a sinus shape",W:"BeamFlags",C:"BeamFlags",J:1},{P:"BEAM_FSOLID",D:"Beam is a solid shape",W:"BeamFlags",C:"BeamFlags",J:1},{P:"BEAM_FSHADEIN",D:"Beam fades in at its start point",W:"BeamFlags",C:"BeamFlags",J:1},{P:"BEAM_FSHADEOUT",D:"Beam fades out at its end point",W:"BeamFlags",C:"BeamFlags",J:1},{P:"BeamType",D:"Beam types used by CBeam::SetType",W:"BeamType",C:"Enum"},{P:"BEAM_POINTS",D:"Beam is a beam between 2 points",W:"BeamType",C:"BeamType",J:1},{P:"BEAM_ENTPOINT",D:"Beam is a beam between point and entity",W:"BeamType",C:"BeamType",J:1},{P:"BEAM_ENTS",D:"Beam is a beam between entities",W:"BeamType",C:"BeamType",J:1},{P:"BEAM_HOSE",D:"I don't even know what this does",W:"BeamType",C:"BeamType",J:1},{P:"bits_CAPABILITY",D:"Tells us what a monster can do.\nSee MonsterEntity::m_afCapability",W:"bits_CAPABILITY",C:"Enum"},{P:"bits_CAP_DUCK",D:"crouch",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_JUMP",D:"jump/leap",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_STRAFE",D:"strafe ( walk/run sideways)",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_SQUAD",D:"can form squads",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_SWIM",D:"proficiently navigate in water",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_CLIMB",D:"climb ladders/ropes",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_USE",D:"open doors/push buttons/pull levers",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_HEAR",D:"can hear forced sounds",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_AUTO_DOORS",D:"can trigger auto doors",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_OPEN_DOORS",D:"can open manual doors",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_TURN_HEAD",D:"can turn head, always bone controller 0",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_RANGE_ATTACK1",D:"can do a range attack 1",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_RANGE_ATTACK2",D:"can do a range attack 2",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_MELEE_ATTACK1",D:"can do a melee attack 1",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_MELEE_ATTACK2",D:"can do a melee attack 2",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_FLY",D:"can fly, move all around",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_USE_TANK",D:"can use func_tanks",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_FALL_DAMAGE",D:"can take fall damage",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_CAP_DOORS_GROUP",D:"Combination of bits_CAP_USE, bits_CAP_AUTO_DOORS, and bits_CAP_OPEN_DOORS",W:"bits_CAPABILITY",C:"bits_CAPABILITY",J:1},{P:"bits_SOUND",D:"Sound flags for monster schedules.",W:"bits_SOUND",C:"Enum"},{P:"bits_SOUND_NONE",D:"",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_COMBAT",D:"gunshots, explosions",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_WORLD",D:"door opening/closing, glass breaking",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_PLAYER",D:"all noises generated by player. walking, shooting, falling, splashing",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_CARCASS",D:"dead body",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_MEAT",D:"gib or pork chop",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_DANGER",D:"pending danger. Grenade that is about to explode, explosive barrel that is damaged, falling crate",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_GARBAGE",D:"trash cans, banana peels, old fast food bags.",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_SOUND_BULLETHIT",D:"a bullet just hit at this location",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"bits_ALL_SOUNDS",D:"All sound flags",W:"bits_SOUND",C:"bits_SOUND",J:1},{P:"BLOOD_COLOR",D:"Blood color",W:"BLOOD_COLOR",C:"Enum"},{P:"DONT_BLEED",D:"Don't bleed",W:"BLOOD_COLOR",C:"BLOOD_COLOR",J:1},{P:"BLOOD_COLOR_RED",D:"Red blood",W:"BLOOD_COLOR",C:"BLOOD_COLOR",J:1},{P:"BLOOD_COLOR_YELLOW",D:"Yellow blood",W:"BLOOD_COLOR",C:"BLOOD_COLOR",J:1},{P:"BLOOD_COLOR_GREEN",D:"Green blood",W:"BLOOD_COLOR",C:"BLOOD_COLOR",J:1},{P:"BREAK",D:"Break model defines for message SVC_TEMPENTITY::TE_BREAKMODEL",W:"BREAK",C:"Enum"},{P:"BREAK_TYPEMASK",D:"Bit mask for all BREAK types.",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_GLASS",D:"",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_METAL",D:"",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_FLESH",D:"",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_WOOD",D:"",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_SMOKE",D:"Adds a smoke trail",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_TRANS",D:"Model is transparent",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_CONCRETE",D:"",W:"BREAK",C:"BREAK",J:1},{P:"BREAK_2",D:"Not used",W:"BREAK",C:"BREAK",J:1},{P:"Bullet",D:"bullet types",W:"Bullet",C:"Enum"},{P:"BULLET_NONE",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_9MM",D:"Glock",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_MP5",D:"mp5",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_SAW",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_SNIPER",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_357",D:"Python",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_EAGLE",D:"Desert eagle",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_BUCKSHOT",D:"Shotgun",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_CROWBAR",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_PLAYER_CUSTOMDAMAGE",D:"normal bullet with custom damage",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_9MM",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_MP5",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_SAW",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_12MM",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_EAGLE",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_SNIPER",D:"",W:"Bullet",C:"Bullet",J:1},{P:"BULLET_MONSTER_BUCKSHOT",D:"Monster shotgun",W:"Bullet",C:"Bullet",J:1},{P:"DECAL_SCORCH_MARK",D:"",W:"Bullet",C:"Bullet",J:1},{P:"ButtonCode",D:"Button codes used by CBaseButton",W:"ButtonCode",C:"Enum"},{P:"BUTTON_NOTHING",D:"Do nothing",W:"ButtonCode",C:"ButtonCode",J:1},{P:"BUTTON_ACTIVATE",D:"Activate the button",W:"ButtonCode",C:"ButtonCode",J:1},{P:"BUTTON_RETURN",D:"Return the button to its default state",W:"ButtonCode",C:"ButtonCode",J:1},{P:"CBeamSpawnflags",D:"CBeam spawn flags",W:"CBeamSpawnflags",C:"Enum"},{P:"SF_BEAM_STARTON",D:"Whether the beam should start on",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_TOGGLE",D:"Whether the beam should be togglable by triggering it",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_RANDOM",D:"Whether beams are created to a randomly selected entity with the given target name",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_RING",D:"Whether this beam is a ring between 2 points",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_SPARKSTART",D:"Whether to allow creation of sparks at the beam's start point",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_SPARKEND",D:"Whether to allow creation of sparks at the beam's end point",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_DECALS",D:"Whether to create decals when the beam does damage to BSP models",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_SHADEIN",D:"Whether to fade the beam in at its start point",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_SHADEOUT",D:"Whether to fade the beam out at its end point",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"SF_BEAM_TEMPORARY",D:"Whether the beam is a temporary entity",W:"CBeamSpawnflags",C:"CBeamSpawnflags",J:1},{P:"CDMG",D:"Damage over time types.",W:"CDMG",C:"Enum"},{P:"itbd_Paralyze",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_NerveGas",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_Poison",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_Radiation",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_DrownRecover",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_Acid",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_SlowBurn",D:"",W:"CDMG",C:"CDMG",J:1},{P:"itbd_SlowFreeze",D:"",W:"CDMG",C:"CDMG",J:1},{P:"CDMG_TIMEBASED",D:"Number of damage over time types",W:"CDMG",C:"CDMG",J:1},{P:"CLASS",D:"Entity classification\nCan be set on entities with KeyValue using key 'classify'.",W:"CLASS",C:"Enum"},{P:"CLASS_FORCE_NONE",D:"Forces class override to none",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_NONE",D:"No classification",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_MACHINE",D:"Is machine",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_PLAYER",D:"Is player",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_HUMAN_PASSIVE",D:"Is passive human",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_HUMAN_MILITARY",D:"Is military human",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_MILITARY",D:"Is military alien",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_PASSIVE",D:"Is passive alien",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_MONSTER",D:"Is monster alien",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_PREY",D:"Is prey alien",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_PREDATOR",D:"Is predator alien",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_INSECT",D:"Is insect",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_PLAYER_ALLY",D:"is player ally",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_PLAYER_BIOWEAPON",D:"Is player bioweapon",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_ALIEN_BIOWEAPON",D:"Is alien bioweapon",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_XRACE_PITDRONE",D:"Is X-Race pitdrone",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_XRACE_SHOCK",D:"Is X-Race shock trooper (also Voltigores)",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_TEAM1",D:"Is on Team 1",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_TEAM2",D:"Is on Team 2",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_TEAM3",D:"Is on Team 3",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_TEAM4",D:"Is on Team 4",W:"CLASS",C:"CLASS",J:1},{P:"CLASS_BARNACLE",D:"Is Barnacle",W:"CLASS",C:"CLASS",J:1},{P:"ClientSayType",D:"Type of say the client used",W:"ClientSayType",C:"Enum"},{P:"CLIENTSAY_SAY",D:"Say",W:"ClientSayType",C:"ClientSayType",J:1},{P:"CLIENTSAY_SAYTEAM",D:"Say team",W:"ClientSayType",C:"ClientSayType",J:1},{P:"CommonEntityFlags",D:"Common entity flags used by various entities.",W:"CommonEntityFlags",C:"Enum"},{P:"SF_NORESPAWN",D:"set this bit on guns and stuff that should never respawn.",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"SF_DELAYREMOVE",D:"A weapon will be removed from the map after 60sec",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"SF_CREATEDWEAPON",D:"this flag indicates that this entity is a weapon created for players,\nas opposed to being created by being placed by a mapper",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"SF_DODAMAGE",D:"this flag indicates that a player thrown weapon should deal damage to things it hits",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"SF_GIVENITEM",D:"This item is being given to the player -- can't fall out of map",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"SF_NODEFAULTAMMO",D:"Don't allow default ammo to be set. Prevents players from getting too much ammo from cross map inventory",W:"CommonEntityFlags",C:"CommonEntityFlags",J:1},{P:"CompareType",D:"Compare type.",W:"CompareType",C:"Enum"},{P:"CaseSensitive",D:"",W:"CompareType",C:"CompareType",J:1},{P:"CaseInsensitive",D:"",W:"CompareType",C:"CompareType",J:1},{P:"ConCommandFlag",D:"Console command flags",W:"ConCommandFlag",C:"Enum"},{P:"None",D:"No flags to set",W:"ConCommandFlag",C:"ConCommandFlag",J:1},{P:"AdminOnly",D:"If set, the invoking player (if any) must have admin access.",W:"ConCommandFlag",C:"ConCommandFlag",J:1},{P:"Cheat",D:"If set, the invoking player (if any) must have cheat access.",W:"ConCommandFlag",C:"ConCommandFlag",J:1},{P:"CONTENTS",D:"Contents of a spot in the world",W:"CONTENTS",C:"Enum"},{P:"CONTENTS_EMPTY",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_SOLID",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_WATER",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_SLIME",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_LAVA",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_SKY",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"CONTENTS_LADDER",D:"",W:"CONTENTS",C:"CONTENTS",J:1},{P:"DAMAGE",D:"entvars_t::takedamage values",W:"DAMAGE",C:"Enum"},{P:"DAMAGE_NO",D:"Don't allow damage",W:"DAMAGE",C:"DAMAGE",J:1},{P:"DAMAGE_YES",D:"Allow damage",W:"DAMAGE",C:"DAMAGE",J:1},{P:"DAMAGE_AIM",D:"allow auto-aim",W:"DAMAGE",C:"DAMAGE",J:1},{P:"DEAD",D:"Entity entvars_t::deadflag values",W:"DEAD",C:"Enum"},{P:"DEAD_NO",D:"alive",W:"DEAD",C:"DEAD",J:1},{P:"DEAD_DYING",D:"playing death animation or still falling off of a ledge waiting to hit ground",W:"DEAD",C:"DEAD",J:1},{P:"DEAD_DEAD",D:"dead. lying still.",W:"DEAD",C:"DEAD",J:1},{P:"DEAD_RESPAWNABLE",D:"The player is in a state where they can be respawned.",W:"DEAD",C:"DEAD",J:1},{P:"DEAD_DISCARDBODY",D:"No direct use of this",W:"DEAD",C:"DEAD",J:1},{P:"decal_e",D:"Dynamic decals used by code to place decals like scorch marks in the world",W:"decal_e",C:"Enum"},{P:"DECAL_GUNSHOT1",D:"Gunshot 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GUNSHOT2",D:"Gunshot 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GUNSHOT3",D:"Gunshot 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GUNSHOT4",D:"Gunshot 4",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GUNSHOT5",D:"Gunshot 5",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA1",D:"Lambda 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA2",D:"Lambda 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA3",D:"Lambda 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA4",D:"Lambda 4",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA5",D:"Lambda 5",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_LAMBDA6",D:"Lambda 6",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SCORCH1",D:"Scorch 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SCORCH2",D:"Scorch 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD1",D:"(Red) Blood 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD2",D:"(Red) Blood 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD3",D:"(Red) Blood 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD4",D:"(Red) Blood 4",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD5",D:"(Red) Blood 5",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BLOOD6",D:"(Red) Blood 6",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD1",D:"Yellow blood 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD2",D:"Yellow blood 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD3",D:"Yellow blood 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD4",D:"Yellow blood 4",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD5",D:"Yellow blood 5",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_YBLOOD6",D:"Yellow blood 6",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GLASSBREAK1",D:"Glass break 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GLASSBREAK2",D:"Glass break 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GLASSBREAK3",D:"Glass break 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BIGSHOT1",D:"Big shot 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BIGSHOT2",D:"Big shot 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BIGSHOT3",D:"Big shot 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BIGSHOT4",D:"Big shot 4",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BIGSHOT5",D:"Big shot 5",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SPIT1",D:"Spit 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SPIT2",D:"Spit 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_BPROOF1",D:"Bulletproof glass decal",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_GARGSTOMP1",D:"gargantua stomp crack",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SMALLSCORCH1",D:"Small scorch 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SMALLSCORCH2",D:"Small scorch 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SMALLSCORCH3",D:"Small scorch 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_MOMMABIRTH",D:"Big momma birth splatter",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_MOMMASPLAT",D:"Big momma splat",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_OFSCORCH1",D:"Opposing force scorch 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_OFSCORCH2",D:"Opposing force scorch 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_OFSCORCH3",D:"Opposing force scorch 3",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SPORESPLAT1",D:"Spore splat 1",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SPORESPLAT2",D:"Spore splat 2",W:"decal_e",C:"decal_e",J:1},{P:"DECAL_SPORESPLAT3",D:"Spore splat 3",W:"decal_e",C:"decal_e",J:1},{P:"DMG",D:"Damage types.",W:"DMG",C:"Enum"},{P:"DMG_GENERIC",D:"Generic damage.",W:"DMG",C:"DMG",J:1},{P:"DMG_CRUSH",D:"Crush damage. By falling or moving object.",W:"DMG",C:"DMG",J:1},{P:"DMG_BULLET",D:"Bullet. Shot.",W:"DMG",C:"DMG",J:1},{P:"DMG_SLASH",D:"Slash. Cut, clawed, stabbed.",W:"DMG",C:"DMG",J:1},{P:"DMG_BURN",D:"Burn. Heat burned.",W:"DMG",C:"DMG",J:1},{P:"DMG_FREEZE",D:"Freeze. Frozen.",W:"DMG",C:"DMG",J:1},{P:"DMG_FALL",D:"Fall. Fell too far.",W:"DMG",C:"DMG",J:1},{P:"DMG_BLAST",D:"Blast. Explosive blast damage.",W:"DMG",C:"DMG",J:1},{P:"DMG_CLUB",D:"Club. Crowbar, punch, headbutt.",W:"DMG",C:"DMG",J:1},{P:"DMG_SHOCK",D:"Shock. Electric shock.",W:"DMG",C:"DMG",J:1},{P:"DMG_SONIC",D:"Sonic. Sound pulse shockwave.",W:"DMG",C:"DMG",J:1},{P:"DMG_ENERGYBEAM",D:"Energy beam. Laser or other high energy beam.",W:"DMG",C:"DMG",J:1},{P:"DMG_NEVERGIB",D:"Never gib. With this bit OR'd in, no damage type will be able to gib victims upon death.",W:"DMG",C:"DMG",J:1},{P:"DMG_ALWAYSGIB",D:"Always gib. With this bit OR'd in, any damage type can be made to gib victims upon death.",W:"DMG",C:"DMG",J:1},{P:"DMG_LAUNCH",D:"Launch. Launch into air.",W:"DMG",C:"DMG",J:1},{P:"DMG_DROWN",D:"Drown. Drowning.",W:"DMG",C:"DMG",J:1},{P:"DMG_TIMEBASED",D:"Mash for time-based damage.",W:"DMG",C:"DMG",J:1},{P:"DMG_PARALYZE",D:"Paralyze. Slows affected creature down.",W:"DMG",C:"DMG",J:1},{P:"DMG_NERVEGAS",D:"Nerve gas. Nerve toxins, very bad.",W:"DMG",C:"DMG",J:1},{P:"DMG_POISON",D:"Poison. Blood poisoning.",W:"DMG",C:"DMG",J:1},{P:"DMG_RADIATION",D:"Radiation. Radiation exposure.",W:"DMG",C:"DMG",J:1},{P:"DMG_DROWNRECOVER",D:"Drown recover. Drowning recovery.",W:"DMG",C:"DMG",J:1},{P:"DMG_ACID",D:"Acid. Toxic chemicals or acid burns.",W:"DMG",C:"DMG",J:1},{P:"DMG_SLOWBURN",D:"Slow burn. In an oven.",W:"DMG",C:"DMG",J:1},{P:"DMG_SLOWFREEZE",D:"Slow freeze. In a subzero freezer.",W:"DMG",C:"DMG",J:1},{P:"DMG_MORTAR",D:"Mortar. Hit by air raid (done to distinguish grenade from mortar)",W:"DMG",C:"DMG",J:1},{P:"DMG_SNIPER",D:"Sniper. Hit by a Sniper.",W:"DMG",C:"DMG",J:1},{P:"DMG_MEDKITHEAL",D:"Medkit heal. Medkit healing.",W:"DMG",C:"DMG",J:1},{P:"DMG_SHOCK_GLOW",D:"Shock glow. Flag for shock glow effect.",W:"DMG",C:"DMG",J:1},{P:"DMG_GIB_CORPSE",D:"Gib corpse. These are the damage types that are allowed to gib corpses.",W:"DMG",C:"DMG",J:1},{P:"DMG_SHOWNHUD",D:"Shown on HUD. These are the damage types that have clien hud art.",W:"DMG",C:"DMG",J:1},{P:"DoorFlag",D:"Door flags.",W:"DoorFlag",C:"Enum"},{P:"SF_DOOR_ROTATE_Y",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_START_OPEN",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_ROTATE_BACKWARDS",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_PASSABLE",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_ONEWAY",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_NO_AUTO_RETURN",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_ROTATE_Z",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_ROTATE_X",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_USE_ONLY",D:"door must be opened by player's use button.",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_NOMONSTERS",D:"Monster can't open",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_SILENT",D:"",W:"DoorFlag",C:"DoorFlag",J:1},{P:"SF_DOOR_NO_LINK_CHECKING",D:"Don't make sure the doors are in-sync.",W:"DoorFlag",C:"DoorFlag",J:1},{P:"EdictFlags",D:"entvars_t::flags constants",W:"EdictFlags",C:"Enum"},{P:"FL_FLY",D:"Changes the SV_Movestep() behavior to not need to be on ground",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_SWIM",D:"Changes the SV_Movestep() behavior to not need to be on ground (but stay in water)",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_CONVEYOR",D:"If set, entities standing on this entity are moved as if this were a conveyor",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_CLIENT",D:"If set, this is a player",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_INWATER",D:"If set, this entity is in water. Only applies to players",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_MONSTER",D:"If set, this is a monster",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_GODMODE",D:"If set, this entity is invincible. Only applies to players",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_NOTARGET",D:"If set, this entity will not be targeted by monster AI",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_SKIPLOCALHOST",D:"Don't send entity to local host, it's predicting this entity itself",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_ONGROUND",D:"At rest / on the ground",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_PARTIALGROUND",D:"not all corners are valid",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_WATERJUMP",D:"player jumping out of water",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_FROZEN",D:"Player is frozen for 3rd person camera",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_FAKECLIENT",D:"JAC: fake client, simulated server side; don't send network messages to them",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_DUCKING",D:"Player flag -- Player is fully crouched",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_FLOAT",D:"Apply floating force to this entity when in water",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_GRAPHED",D:"worldgraph has this ent listed as something that blocks a connection",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_IMMUNE_WATER",D:"If set, players don't take drown damage",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_IMMUNE_SLIME",D:"If set, players don't take damage from slime",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_IMMUNE_LAVA",D:"If set, players don't take damage from lava",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_PROXY",D:"This is a spectator proxy",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_ALWAYSTHINK",D:"Brush model flag -- call think every frame regardless of nextthink - ltime (for constantly changing velocity/path)",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_BASEVELOCITY",D:"Base velocity has been applied this frame (used to convert base velocity into momentum)",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_MONSTERCLIP",D:"Only collide in with monsters who have FL_MONSTERCLIP set",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_ONTRAIN",D:"Player is _controlling_ a train, so movement commands should be ignored on client during prediction.",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_WORLDBRUSH",D:"Not moveable/removeable brush entity (really part of the world, but represented as an entity for transparency or something)",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_SPECTATOR",D:"This client is a spectator, don't run touch functions, etc.",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_NOWEAPONS",D:"This client is being denied weapon usage",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_CUSTOMENTITY",D:"This is a custom entity",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_KILLME",D:"This entity is marked for death -- This allows the engine to kill ents at the appropriate time",W:"EdictFlags",C:"EdictFlags",J:1},{P:"FL_DORMANT",D:"Entity is dormant, no updates to client",W:"EdictFlags",C:"EdictFlags",J:1},{P:"EFFECTS",D:"entvars_t::effects constants",W:"EFFECTS",C:"Enum"},{P:"EF_BRIGHTFIELD",D:"swirling cloud of particles",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_MUZZLEFLASH",D:"single frame ELIGHT on entity attachment 0",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_BRIGHTLIGHT",D:"DLIGHT centered at entity origin",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_DIMLIGHT",D:"player flashlight",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_INVLIGHT",D:"get lighting from ceiling",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_NOINTERP",D:"don't interpolate the next frame",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_LIGHT",D:"rocket flare glow sprite",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_NODRAW",D:"don't draw entity",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_NODECALS",D:"don't draw decals on this entity",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_NOANIMTEXTURES",D:"Don't animate brush entities",W:"EFFECTS",C:"EFFECTS",J:1},{P:"EF_FRAMEANIMTEXTURES",D:"Use the value in pev->frame to set the texture on a brush entity",W:"EFFECTS",C:"EFFECTS",J:1},{P:"Entvartype",D:"Entity variable type",W:"Entvartype",C:"Enum"},{P:"VAR_INVALID",D:"Invalid type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_STRING",D:"String type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_VECTOR",D:"Vector type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_FLOAT",D:"Float type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_INTEGER",D:"Integer type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_EDICT",D:"Edict type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_BYTE4",D:"4 byte array type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_BYTE2",D:"2 byte array type",W:"Entvartype",C:"Entvartype",J:1},{P:"VAR_CUSTOM",D:"Custom type",W:"Entvartype",C:"Entvartype",J:1},{P:"FCAP",D:"CBaseEntity caps (CBaseEntity::ObjectCaps())",W:"FCAP",C:"Enum"},{P:"FCAP_CUSTOMSAVE",D:"Custom save method",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_ACROSS_TRANSITION",D:"Across transition",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_MUST_SPAWN",D:"Must spawn",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_DONT_SAVE",D:"Don't save",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_IMPULSE_USE",D:"Impulse use",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_CONTINUOUS_USE",D:"Continuous use",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_ONOFF_USE",D:"On/off use",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_DIRECTIONAL_USE",D:"Directional use",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_MASTER",D:"Is a master",W:"FCAP",C:"FCAP",J:1},{P:"FCAP_FORCE_TRANSITION",D:"Force transition",W:"FCAP",C:"FCAP",J:1},{P:"FCVAR",D:"Console variable flags.",W:"FCVAR",C:"Enum"},{P:"FCVAR_ARCHIVE",D:"Save this cvar.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_USERINFO",D:"Changes the client's info string.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_SERVER",D:"Notifies players when changed.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_EXTDLL",D:"Defined by external dll.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_CLIENTDLL",D:"Defined by the client dll.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_PROTECTED",D:"It's a server cvar, but we don't send the data since it's a password, etc.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_SPONLY",D:"This cvar cannot be changed by clients connected to a multiplayer server.",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_PRINTABLEONLY",D:"This cvar's string cannot contain unprintable characters (e.g. used for player name etc)",W:"FCVAR",C:"FCVAR",J:1},{P:"FCVAR_UNLOGGED",D:"If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log",W:"FCVAR",C:"FCVAR",J:1},{P:"FFADE",D:"Fade flags for CPlayerFuncs::ScreenFade and ScreenFadeAll",W:"FFADE",C:"Enum"},{P:"FFADE_IN",D:"Just here so we don't pass 0 into the function",W:"FFADE",C:"FFADE",J:1},{P:"FFADE_OUT",D:"Fade out (not in)",W:"FFADE",C:"FFADE",J:1},{P:"FFADE_MODULATE",D:"Modulate (don't blend)",W:"FFADE",C:"FFADE",J:1},{P:"FFADE_STAYOUT",D:"ignores the duration, stays faded out until new ScreenFade message received",W:"FFADE",C:"FFADE",J:1},{P:"FireBulletsDrawMode",D:"FireBullets draw mode options",W:"FireBulletsDrawMode",C:"Enum"},{P:"FBDM_DONTDRAW",D:"Don't draw impact decal",W:"FireBulletsDrawMode",C:"FireBulletsDrawMode",J:1},{P:"FBDM_DRAW",D:"Draw impact decal",W:"FireBulletsDrawMode",C:"FireBulletsDrawMode",J:1},{P:"FixAngleMode",D:"entvars_t::fixangle modes",W:"FixAngleMode",C:"Enum"},{P:"FAM_NOTHING",D:"Do nothing",W:"FixAngleMode",C:"FixAngleMode",J:1},{P:"FAM_FORCEVIEWANGLES",D:"Force player view angles to entvars_t::angles",W:"FixAngleMode",C:"FixAngleMode",J:1},{P:"FAM_ADDAVELOCITY",D:"Add avelocity to player view angles",W:"FixAngleMode",C:"FixAngleMode",J:1},{P:"FlagType",D:"Regular expression flags. These can be bitwise OR'd together to combine options.",W:"FlagType",C:"Enum"},{P:"icase",D:"",W:"FlagType",C:"FlagType",J:1},{P:"nosubs",D:"",W:"FlagType",C:"FlagType",J:1},{P:"optimize",D:"",W:"FlagType",C:"FlagType",J:1},{P:"collate",D:"",W:"FlagType",C:"FlagType",J:1},{P:"ECMAScript",D:"",W:"FlagType",C:"FlagType",J:1},{P:"basic",D:"",W:"FlagType",C:"FlagType",J:1},{P:"extended",D:"",W:"FlagType",C:"FlagType",J:1},{P:"awk",D:"",W:"FlagType",C:"FlagType",J:1},{P:"grep",D:"",W:"FlagType",C:"FlagType",J:1},{P:"egrep",D:"",W:"FlagType",C:"FlagType",J:1},{P:"GIB",D:"when calling Killed(), a value that governs gib behavior is expected to be one of these three values",W:"GIB",C:"Enum"},{P:"GIB_NORMAL",D:"gib if entity was overkilled",W:"GIB",C:"GIB",J:1},{P:"GIB_NEVER",D:"never gib, no matter how much death damage is done ( freezing, etc )",W:"GIB",C:"GIB",J:1},{P:"GIB_ALWAYS",D:"always gib ( Houndeye Shock, Barnacle Bite )",W:"GIB",C:"GIB",J:1},{P:"GIB_NOPENALTY",D:"No penalty applied to players that died",W:"GIB",C:"GIB",J:1},{P:"GLOBALESTATE",D:"Global state values",W:"GLOBALESTATE",C:"Enum"},{P:"GLOBAL_OFF",D:"Global state when off",W:"GLOBALESTATE",C:"GLOBALESTATE",J:1},{P:"GLOBAL_ON",D:"Global state when on",W:"GLOBALESTATE",C:"GLOBALESTATE",J:1},{P:"GLOBAL_DEAD",D:"Global state when removed",W:"GLOBALESTATE",C:"GLOBALESTATE",J:1},{P:"HITGROUP",D:"Hit Group standards",W:"HITGROUP",C:"Enum"},{P:"HITGROUP_GENERIC",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_HEAD",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_CHEST",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_STOMACH",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_LEFTARM",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_RIGHTARM",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_LEFTLEG",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HITGROUP_RIGHTLEG",D:"",W:"HITGROUP",C:"HITGROUP",J:1},{P:"HookReturnCode",D:"Hook function return codes.",W:"HookReturnCode",C:"Enum"},{P:"HOOK_CONTINUE",D:"Returned when a hook function has not handled the call",W:"HookReturnCode",C:"HookReturnCode",J:1},{P:"HOOK_HANDLED",D:"Returned when a hook function has handled the call",W:"HookReturnCode",C:"HookReturnCode",J:1},{P:"HUD",D:"Used to dictate where client print commands print the given text.",W:"HUD",C:"Enum"},{P:"HUD_PRINTNOTIFY",D:"Print notify",W:"HUD",C:"HUD",J:1},{P:"HUD_PRINTCONSOLE",D:"Print to console",W:"HUD",C:"HUD",J:1},{P:"HUD_PRINTTALK",D:"Print to chat",W:"HUD",C:"HUD",J:1},{P:"HUD_PRINTCENTER",D:"Print to center of screen",W:"HUD",C:"HUD",J:1},{P:"HUD_EFFECT",D:"HUD element effects.",W:"HUD_EFFECT",C:"Enum"},{P:"HUD_EFFECT_NONE",D:"No effect.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_RAMP_UP",D:"Linear ramp up from color1 to color2.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_RAMP_DOWN",D:"Linear ramp down from color2 to color1.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_TRIANGLE",D:"Linear ramp up and ramp down from color1 through color2 back to color1.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_COSINE_UP",D:"Cosine ramp up from color1 to color2.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_COSINE_DOWN",D:"Cosine ramp down from color2 to color1.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_COSINE",D:"Cosine ramp up and ramp down from color1 through color2 back to color1.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_TOGGLE",D:"Toggle between color1 and color2.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_EFFECT_SINE_PULSE",D:"Sine pulse from color1 through zero to color2.",W:"HUD_EFFECT",C:"HUD_EFFECT",J:1},{P:"HUD_ELEM",D:"Common flags used by all custom HUD elements.",W:"HUD_ELEM",C:"Enum"},{P:"HUD_ELEM_ABSOLUTE_X",D:"X position in pixels.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_ABSOLUTE_Y",D:"Y position in pixels.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_SCR_CENTER_X",D:"X position relative to the center of the screen.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_SCR_CENTER_Y",D:"Y position relative to the center of the screen.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_NO_BORDER",D:"Ignore the client-side HUD border (hud_bordersize).",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_HIDDEN",D:"Create a hidden element.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_EFFECT_ONCE",D:"Play the effect only once.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_DEFAULT_ALPHA",D:"Use the default client-side HUD alpha (hud_defaultalpha).",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_ELEM_DYNAMIC_ALPHA",D:"Use the default client-side HUD alpha and flash the element when updated.",W:"HUD_ELEM",C:"HUD_ELEM",J:1},{P:"HUD_NUM",D:"Flags used by custom numeric displays.",W:"HUD_NUM",C:"Enum"},{P:"HUD_NUM_RIGHT_ALIGN",D:"Draw right aligned element.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_NUM_SEPARATOR",D:"Draw separator.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_NUM_DONT_DRAW_ZERO",D:"Hide the element if the value is zero.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_NUM_LEADING_ZEROS",D:"Draw leading zeros.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_NUM_NEGATIVE_NUMBERS",D:"Allow negative values.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_NUM_PLUS_SIGN",D:"Draw sign for positive values.",W:"HUD_NUM",C:"HUD_NUM",J:1},{P:"HUD_SPR",D:"Flags used by custom HUD sprites.",W:"HUD_SPR",C:"Enum"},{P:"HUD_SPR_OPAQUE",D:"Draw opaque sprite.",W:"HUD_SPR",C:"HUD_SPR",J:1},{P:"HUD_SPR_MASKED",D:"Draw masked sprite.",W:"HUD_SPR",C:"HUD_SPR",J:1},{P:"HUD_SPR_PLAY_ONCE",D:"Play the animation only once.",W:"HUD_SPR",C:"HUD_SPR",J:1},{P:"HUD_SPR_HIDE_WHEN_STOPPED",D:"Hide the sprite when the animation stops.",W:"HUD_SPR",C:"HUD_SPR",J:1},{P:"HUD_TIME",D:"Flags used by custom time displays.",W:"HUD_TIME",C:"Enum"},{P:"HUD_TIME_RIGHT_ALIGN",D:"Draw right aligned element.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_HOURS",D:"Draw hours.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_MINUTES",D:"Draw minutes.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_SECONDS",D:"Draw seconds.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_MILLISECONDS",D:"Draw milliseconds.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_ZERO_HOURS",D:"Draw hours even if the value is zero.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_FREEZE",D:"Freeze the displayed value.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HUD_TIME_COUNT_DOWN",D:"Count down.",W:"HUD_TIME",C:"HUD_TIME",J:1},{P:"HULL_NUMBER",D:"Ignore glass options.\nFlag for certain trace functions.",W:"HULL_NUMBER",C:"Enum"},{P:"point_hull",D:"Point hull. No size.",W:"HULL_NUMBER",C:"HULL_NUMBER",J:1},{P:"human_hull",D:"Human sized hull.",W:"HULL_NUMBER",C:"HULL_NUMBER",J:1},{P:"large_hull",D:"Large hull.",W:"HULL_NUMBER",C:"HULL_NUMBER",J:1},{P:"head_hull",D:"Head hull.",W:"HULL_NUMBER",C:"HULL_NUMBER",J:1},{P:"IGNORE_GLASS",D:"Ignore glass options.\nFlag for certain trace functions.",W:"IGNORE_GLASS",C:"Enum"},{P:"ignore_glass",D:"Ignore glass",W:"IGNORE_GLASS",C:"IGNORE_GLASS",J:1},{P:"dont_ignore_glass",D:"Don't ignore glass",W:"IGNORE_GLASS",C:"IGNORE_GLASS",J:1},{P:"IGNORE_MONSTERS",D:"Ignore monsters options.\nFlag for certain trace functions.",W:"IGNORE_MONSTERS",C:"Enum"},{P:"ignore_monsters",D:"Ignore monsters",W:"IGNORE_MONSTERS",C:"IGNORE_MONSTERS",J:1},{P:"dont_ignore_monsters",D:"Don't ignore monsters",W:"IGNORE_MONSTERS",C:"IGNORE_MONSTERS",J:1},{P:"missile",D:"Object doing the trace is a missile",W:"IGNORE_MONSTERS",C:"IGNORE_MONSTERS",J:1},{P:"In_Buttons",D:"Bit field values for entvars_t.buttons.\nUsed by players to determine which buttons have been pressed",W:"In_Buttons",C:"Enum"},{P:"IN_ATTACK",D:"Primary attack",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_JUMP",D:"Jump",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_DUCK",D:"Duck",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_FORWARD",D:"Move forward",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_BACK",D:"Move backward",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_USE",D:"Use",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_CANCEL",D:"",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_LEFT",D:"",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_RIGHT",D:"",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_MOVELEFT",D:"Move left",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_MOVERIGHT",D:"Move right",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_ATTACK2",D:"Secondary attack",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_RUN",D:"Run/Walk",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_RELOAD",D:"Reload",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_ALT1",D:"Tertiary attack",W:"In_Buttons",C:"In_Buttons",J:1},{P:"IN_SCORE",D:"Used by client.dll for when scoreboard is held down",W:"In_Buttons",C:"In_Buttons",J:1},{P:"ItemFlag",D:"Item flags used by ItemInfo::iFlags",W:"ItemFlag",C:"Enum"},{P:"ITEM_FLAG_SELECTONEMPTY",D:"Allow this weapon to be selected if it has no ammo.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_NOAUTORELOAD",D:"Don't automatically reload this weapon.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_NOAUTOSWITCHEMPTY",D:"Don't automatically switch away from this weapon when it runs out of ammo.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_LIMITINWORLD",D:"If there are few entity slots left, this item will not respawn.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_EXHAUSTIBLE",D:"A player can totally exhaust their ammo supply and lose this weapon.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_DUALWIELD",D:"Use a special HUD ammo configuration unique to a dual wielded weapons.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_IGNOREWEAPONSTAY",D:"Ignore weaponstay settings when respawning this weapon.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"ITEM_FLAG_ESSENTIAL",D:"This weapon should not be dropped straight away when the player dies, only if he is gibbed or if he respawned.",W:"ItemFlag",C:"ItemFlag",J:1},{P:"KeyCode",D:"Key Codes",W:"KeyCode",C:"Enum"},{P:"KEY_0",D:0,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_1",D:1,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_2",D:2,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_3",D:3,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_4",D:4,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_5",D:5,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_6",D:6,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_7",D:7,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_8",D:8,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_9",D:9,W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_A",D:"A",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_B",D:"B",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_C",D:"C",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_D",D:"D",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_E",D:"E",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F",D:"F",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_G",D:"G",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_H",D:"H",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_I",D:"I",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_J",D:"J",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_K",D:"K",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_L",D:"L",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_M",D:"M",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_N",D:"N",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_O",D:"O",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_P",D:"P",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_Q",D:"Q",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_R",D:"R",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_S",D:"S",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_T",D:"T",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_U",D:"U",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_V",D:"V",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_W",D:"W",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_X",D:"X",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_Y",D:"Y",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_Z",D:"Z",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_0",D:"Numpad 0",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_1",D:"Numpad 1",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_2",D:"Numpad 2",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_3",D:"Numpad 3",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_4",D:"Numpad 4",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_5",D:"Numpad 5",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_6",D:"Numpad 6",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_7",D:"Numpad 7",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_8",D:"Numpad 8",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_9",D:"Numpad 9",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_DIVIDE",D:"Numpad DIVIDE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_MULTIPLY",D:"Numpad MULTIPLY",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_MINUS",D:"Numpad MINUS",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_PLUS",D:"Numpad PLUS",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_ENTER",D:"Numpad ENTER",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAD_DECIMAL",D:"Numpad DECIMAL",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LBRACKET",D:"LBRACKET",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RBRACKET",D:"RBRACKET",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_SEMICOLON",D:"SEMICOLON",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_APOSTROPHE",D:"APOSTROPHE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_BACKQUOTE",D:"BACKQUOTE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_COMMA",D:"COMMA",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PERIOD",D:"PERIOD",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_SLASH",D:"SLASH",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_BACKSLASH",D:"BACKSLASH",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_MINUS",D:"MINUS",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_EQUAL",D:"EQUAL",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_ENTER",D:"ENTER",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_SPACE",D:"SPACE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_BACKSPACE",D:"BACKSPACE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_TAB",D:"TAB",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_CAPSLOCK",D:"CAPSLOCK",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_NUMLOCK",D:"NUMLOCK",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_ESCAPE",D:"ESCAPE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_SCROLLLOCK",D:"SCROLLLOCK",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_INSERT",D:"INSERT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_DELETE",D:"DELETE",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_HOME",D:"HOME",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_END",D:"END",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAGEUP",D:"PAGEUP",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_PAGEDOWN",D:"PAGEDOWN",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_BREAK",D:"BREAK",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LSHIFT",D:"LSHIFT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RSHIFT",D:"RSHIFT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LALT",D:"LALT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RALT",D:"RALT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LCONTROL",D:"LCONTROL",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RCONTROL",D:"RCONTROL",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LWIN",D:"LWIN",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RWIN",D:"RWIN",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_APP",D:"APP",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_UP",D:"UP",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LEFT",D:"LEFT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_DOWN",D:"DOWN",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_RIGHT",D:"RIGHT",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F1",D:"F1",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F2",D:"F2",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F3",D:"F3",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F4",D:"F4",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F5",D:"F5",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F6",D:"F6",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F7",D:"F7",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F8",D:"F8",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F9",D:"F9",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F10",D:"F10",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F11",D:"F11",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_F12",D:"F12",W:"KeyCode",C:"KeyCode",J:1},{P:"KEY_LAST",D:"The last number in the range of key codes.",W:"KeyCode",C:"KeyCode",J:1},{P:"MatchFlagType",D:"Match format flags. These can be bitwise OR'd together to combine options.",W:"MatchFlagType",C:"Enum"},{P:"match_default",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_not_bol",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_not_eol",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_not_bow",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_not_eow",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_any",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_not_null",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_continuous",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"match_prev_avail",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"format_default",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"format_sed",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"format_no_copy",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"format_first_only",D:"",W:"MatchFlagType",C:"MatchFlagType",J:1},{P:"Materials",D:"Material types supported by breakables",W:"Materials",C:"Enum"},{P:"matGlass",D:"",W:"Materials",C:"Materials",J:1},{P:"matWood",D:"",W:"Materials",C:"Materials",J:1},{P:"matMetal",D:"",W:"Materials",C:"Materials",J:1},{P:"matFlesh",D:"",W:"Materials",C:"Materials",J:1},{P:"matCinderBlock",D:"",W:"Materials",C:"Materials",J:1},{P:"matCeilingTile",D:"",W:"Materials",C:"Materials",J:1},{P:"matComputer",D:"",W:"Materials",C:"Materials",J:1},{P:"matUnbreakableGlass",D:"",W:"Materials",C:"Materials",J:1},{P:"matRocks",D:"",W:"Materials",C:"Materials",J:1},{P:"matNone",D:"",W:"Materials",C:"Materials",J:1},{P:"matLastMaterial",D:"",W:"Materials",C:"Materials",J:1},{P:"MonsterCondition",D:"these bits represent conditions that may befall the monster, of which some are allowed\nto interrupt certain schedules. ",W:"MonsterCondition",C:"Enum"},{P:"bits_COND_NO_AMMO_LOADED",D:"weapon needs to be reloaded!",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_HATE",D:"see something that you hate",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_FEAR",D:"see something that you are afraid of",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_DISLIKE",D:"see something that you dislike",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_ENEMY",D:"target entity is in full view.",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_ENEMY_OCCLUDED",D:"target entity occluded by the world",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SMELL_FOOD",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_ENEMY_TOOFAR",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_LIGHT_DAMAGE",D:"hurt a little",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_HEAVY_DAMAGE",D:"hurt a lot",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_RANGE_ATTACK1",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_MELEE_ATTACK1",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_RANGE_ATTACK2",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_MELEE_ATTACK2",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_PROVOKED",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_NEW_ENEMY",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_HEAR_SOUND",D:"there is an interesting sound",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SMELL",D:"there is an interesting scent",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_ENEMY_FACING_ME",D:"enemy is facing me",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_ENEMY_DEAD",D:"enemy was killed. If you get this in combat, try to find another enemy. If you get it in alert, victory dance.",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_CLIENT",D:"see a client",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SEE_NEMESIS",D:"see my nemesis",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_RANGE_ATTACK1_MOVING",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_MELEE_ATTACK1_MOVING",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_RANGE_ATTACK2_MOVING",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_MELEE_ATTACK2_MOVING",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SPECIAL1",D:"Defined by individual monster",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SPECIAL2",D:"Defined by individual monster",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_TASK_FAILED",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_SCHEDULE_DONE",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_USE_TANK",D:"This monster can use a func_tank now",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_ALL_SPECIAL",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"bits_COND_CAN_ATTACK",D:"",W:"MonsterCondition",C:"MonsterCondition",J:1},{P:"MonsterEventType",D:"Monster event types",W:"MonsterEventType",C:"Enum"},{P:"EVENT_SPECIFIC",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"EVENT_SCRIPTED",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"EVENT_SHARED",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"EVENT_CLIENT",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"MONSTER_EVENT_BODYDROP_LIGHT",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"MONSTER_EVENT_BODYDROP_HEAVY",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"MONSTER_EVENT_FOOTSTEP",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"MONSTER_EVENT_SWISHSOUND",D:"",W:"MonsterEventType",C:"MonsterEventType",J:1},{P:"MonsterMemory",D:"these bits represent the monster's memory",W:"MonsterMemory",C:"Enum"},{P:"MEMORY_CLEAR",D:"No memory.",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_PROVOKED",D:"right now only used for houndeyes.",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_INCOVER",D:"monster knows it is in a covered position.",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_SUSPICIOUS",D:"Ally is suspicious of the player, and will move to provoked more easily",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_PATH_FINISHED",D:"Finished monster path (just used by big momma for now)",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_ON_PATH",D:"Moving on a path",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_MOVE_FAILED",D:"Movement has already failed",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_FLINCHED",D:"Has already flinched",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_KILLED",D:"HACKHACK -- remember that I've already called my Killed()",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_MOVE_RADIUS_ONLY",D:"Can only get there within radius",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_CUSTOM4",D:"Monster-specific memory",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_CUSTOM3",D:"Monster-specific memory",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_CUSTOM2",D:"Monster-specific memory",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"bits_MEMORY_CUSTOM1",D:"Monster-specific memory",W:"MonsterMemory",C:"MonsterMemory",J:1},{P:"MONSTERSTATE",D:"Current state of a monster",W:"MONSTERSTATE",C:"Enum"},{P:"MONSTERSTATE_NONE",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_IDLE",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_COMBAT",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_ALERT",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_HUNT",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_PRONE",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_SCRIPT",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_PLAYDEAD",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MONSTERSTATE_DEAD",D:"",W:"MONSTERSTATE",C:"MONSTERSTATE",J:1},{P:"MOVE_TYPE",D:"MoveToOrigin move type.",W:"MOVE_TYPE",C:"Enum"},{P:"MOVE_NORMAL",D:"Normal move in the direction monster is facing.",W:"MOVE_TYPE",C:"MOVE_TYPE",J:1},{P:"MOVE_STRAFE",D:"Moves in direction specified, no matter which way monster is facing.",W:"MOVE_TYPE",C:"MOVE_TYPE",J:1},{P:"MoveFlag",D:"these MoveFlag values are assigned to a WayPoint's TYPE in order to demonstrate the\ntype of movement the monster should use to get there.",W:"MoveFlag",C:"Enum"},{P:"bits_MF_TO_TARGETENT",D:"local move to targetent.",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_ENEMY",D:"local move to enemy",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_COVER",D:"local move to a hiding place",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_DETOUR",D:"local move to detour point.",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_PATHCORNER",D:"local move to a path corner",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_NODE",D:"local move to a node",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_LOCATION",D:"local move to an arbitrary point",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_IS_GOAL",D:"this waypoint is the goal of the whole move.",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_DONT_SIMPLIFY",D:"Don't let the route code simplify this waypoint",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_JUMP",D:"Jumping...",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_LADDER",D:"Ladder...",W:"MoveFlag",C:"MoveFlag",J:1},{P:"bits_MF_TO_ELEVATOR",D:"Elevator",W:"MoveFlag",C:"MoveFlag",J:1},{P:"MOVETYPE",D:"entvars_t::movetype constants",W:"MOVETYPE",C:"Enum"},{P:"MOVETYPE_NONE_EXPLICIT",D:"never moves (forced by map)",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_NONE",D:"never moves",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_WALK",D:"Player only - moving on the ground",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_STEP",D:"gravity, special edge handling -- monsters use this",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_FLY",D:"No gravity, but still collides with stuff",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_TOSS",D:"gravity/collisions",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_PUSH",D:"no clip to world, push and crush",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_NOCLIP",D:"No gravity, no collisions, still do velocity/avelocity",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_FLYMISSILE",D:"extra size to monsters",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_BOUNCE",D:"Just like Toss, but reflect velocity when contacting surfaces",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_BOUNCEMISSILE",D:"bounce w/o gravity",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_FOLLOW",D:"track movement of aiment",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"MOVETYPE_PUSHSTEP",D:"BSP model that needs physics/world collisions (uses nearest hull for world collision)",W:"MOVETYPE",C:"MOVETYPE",J:1},{P:"NetworkMessageDest",D:"Network message destination types.",W:"NetworkMessageDest",C:"Enum"},{P:"MSG_BROADCAST",D:"unreliable to all",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_ONE",D:"reliable to one (msg_entity)",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_ALL",D:"reliable to all",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_INIT",D:"write to the init string",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_PVS",D:"Ents in PVS of org",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_PAS",D:"Ents in PAS of org",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_PVS_R",D:"Reliable to PVS",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_PAS_R",D:"Reliable to PAS",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_ONE_UNRELIABLE",D:"Send to one client, but don't put in reliable stream, put in unreliable datagram ( could be dropped )",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"MSG_SPEC",D:"Sends to all spectator proxies",W:"NetworkMessageDest",C:"NetworkMessageDest",J:1},{P:"NetworkMessageType",D:"Network message types",W:"NetworkMessageType",C:"Enum"},{P:"SVC_TEMPENTITY",D:"Creates temporary entities on the client side.",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SVC_INTERMISSION",D:"Enables intermission for clients.",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SVC_STUFFTEXT",D:"Executes command on the client side.",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SelAmmo",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CurWeapon",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Geiger",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Flashlight",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"FlashBat",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Health",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Damage",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Battery",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Train",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"HudText",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SayText",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TextMsg",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"WeaponList",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CustWeapon",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ResetHUD",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"InitHUD",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CdAudio",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"GameTitle",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"DeathMsg",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ScoreInfo",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TeamInfo",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TeamScore",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"GameMode",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"MOTD",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"AmmoPickup",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"WeapPickup",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ItemPickup",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"HideHUD",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SetFOV",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ShowMenu",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ScreenShake",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ScreenFade",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"AmmoX",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Gib",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Spectator",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TE_CUSTOM",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Speaksent",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TimeEnd",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"MapList",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CbElec",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"EndVote",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"VoteMenu",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"NextMap",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"StartSound",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SoundList",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ToxicCloud",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ShkFlash",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CreateBlood",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"GargSplash",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SporeTrail",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TracerDecal",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SRDetonate",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SRPrimed",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"SRPrimedOff",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"RampSprite",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ShieldRic",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Playlist",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"VGUIMenu",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ServerName",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TeamNames",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ServerVer",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ServerBuild",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"WeatherFX",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CameraMouse",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Fog",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"PrtlUpdt",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ASScriptName",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"PrintKB",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"InvAdd",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"InvRemove",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Concuss",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ViewMode",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"Flamethwr",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ClassicMode",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"WeaponSpr",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ToggleElem",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"CustSpr",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"NumDisplay",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"UpdateNum",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"TimeDisplay",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"UpdateTime",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"VModelPos",D:"User message",W:"NetworkMessageType",C:"NetworkMessageType",J:1},{P:"ObserverMode",D:"Observer modes",W:"ObserverMode",C:"Enum"},{P:"OBS_ENTERING",D:"Player in the process of entering observer mode",W:"ObserverMode",C:"ObserverMode",J:1},{P:"OBS_NONE",D:"Player not in observer mode",W:"ObserverMode",C:"ObserverMode",J:1},{P:"OBS_CHASE_LOCKED",D:"Chase locked",W:"ObserverMode",C:"ObserverMode",J:1},{P:"OBS_CHASE_FREE",D:"Free movement",W:"ObserverMode",C:"ObserverMode",J:1},{P:"OBS_ROAMING",D:"Roaming",W:"ObserverMode",C:"ObserverMode",J:1},{P:"OpenFile",D:"Flags passed to FileSystem::OpenFile.",W:"OpenFile",C:"Enum"},{P:"READ",D:"Open file for reading.",W:"OpenFile",C:"OpenFile",J:1},{P:"WRITE",D:"Open file for writing.",W:"OpenFile",C:"OpenFile",J:1},{P:"APPEND",D:"Open file for appending.",W:"OpenFile",C:"OpenFile",J:1},{P:"BINARY",D:"Open in binary mode.",W:"OpenFile",C:"OpenFile",J:1},{P:"PathTrackSpawnFlags",D:"path_track spawnflags",W:"PathTrackSpawnFlags",C:"Enum"},{P:"SF_PATH_DISABLED",D:"",W:"PathTrackSpawnFlags",C:"PathTrackSpawnFlags",J:1},{P:"SF_PATH_FIREONCE",D:"",W:"PathTrackSpawnFlags",C:"PathTrackSpawnFlags",J:1},{P:"SF_PATH_ALTREVERSE",D:"",W:"PathTrackSpawnFlags",C:"PathTrackSpawnFlags",J:1},{P:"SF_PATH_DISABLE_TRAIN",D:"",W:"PathTrackSpawnFlags",C:"PathTrackSpawnFlags",J:1},{P:"SF_PATH_ALTERNATE",D:"",W:"PathTrackSpawnFlags",C:"PathTrackSpawnFlags",J:1},{P:"PFLAG",D:"Player physics flags used in CBasePlayer::m_afPhysicsFlags",W:"PFLAG",C:"Enum"},{P:"PFLAG_ONLADDER",D:"",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_ONSWING",D:"",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_ONTRAIN",D:"",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_ONBARNACLE",D:"",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_DUCKING",D:"In the process of ducking, but totally squatted yet",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_USING",D:"Using a continuous entity",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_OBSERVER",D:"player is locked in stationary cam mode. Spectators can move, observers can't.",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_GRAPPLE",D:"Toggle grapple use",W:"PFLAG",C:"PFLAG",J:1},{P:"PFLAG_CAMERA",D:"Looking through a trigger_camera",W:"PFLAG",C:"PFLAG",J:1},{P:"PITCH",D:"Pitch values. Other values are possible. Range: 0 - 255, where 255 is very high.",W:"PITCH",C:"Enum"},{P:"PITCH_NORM",D:"non-pitch shifted",W:"PITCH",C:"PITCH",J:1},{P:"PITCH_LOW",D:"low pitch",W:"PITCH",C:"PITCH",J:1},{P:"PITCH_HIGH",D:"high pitch",W:"PITCH",C:"PITCH",J:1},{P:"PLAYER_ANIM",D:"Player animations, set using CBasePlayer::SetAnimation.",W:"PLAYER_ANIM",C:"Enum"},{P:"PLAYER_IDLE",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_WALK",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_JUMP",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_SUPERJUMP",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_DIE",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_ATTACK1",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_RELOAD",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_DEPLOY",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_BARNACLE_HIT",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_BARNACLE_PULL",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_BARNACLE_CHOMP",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PLAYER_BARNACLE_CHEW",D:"",W:"PLAYER_ANIM",C:"PLAYER_ANIM",J:1},{P:"PlayerHookFlag",D:"Player hook flags. Used to skip execution of code when a hook performs an action that overrides built-in behavior.",W:"PlayerHookFlag",C:"Enum"},{P:"PlrHook_SkipVehicles",D:"Don't run vehicle checks",W:"PlayerHookFlag",C:"PlayerHookFlag",J:1},{P:"PlrHook_SkipUse",D:"Don't run +use checks",W:"PlayerHookFlag",C:"PlayerHookFlag",J:1},{P:"PlayerViewMode",D:"Player view mode.",W:"PlayerViewMode",C:"Enum"},{P:"ViewMode_FirstPerson",D:"",W:"PlayerViewMode",C:"PlayerViewMode",J:1},{P:"ViewMode_ThirdPerson",D:"",W:"PlayerViewMode",C:"PlayerViewMode",J:1},{P:"PRINT_TYPE",D:"Print type",W:"PRINT_TYPE",C:"Enum"},{P:"print_console",D:"Print to the console",W:"PRINT_TYPE",C:"PRINT_TYPE",J:1},{P:"print_center",D:"Print to the center of the screen",W:"PRINT_TYPE",C:"PRINT_TYPE",J:1},{P:"print_chat",D:"Print to chat. Note: does not work. Use CPlayerFuncs::ClientPrint with HUD_PRINTTALK instead.",W:"PRINT_TYPE",C:"PRINT_TYPE",J:1},{P:"RELATIONSHIP",D:"Relationship between (monster) entities",W:"RELATIONSHIP",C:"Enum"},{P:"R_AL",D:"Ally. Good alternative to R_NO when applicable.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"R_NO",D:"No relationship. Disregard.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"R_DL",D:"Dislike. Will attack.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"R_HT",D:"Hate. Will attack this character instead of any DISLIKE'd characters.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"R_NM",D:"Nemesis. A monster will ALWAYS attack its nemesis, no matter what.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"R_FR",D:"Fear. Will attack.",W:"RELATIONSHIP",C:"RELATIONSHIP",J:1},{P:"RenderFX",D:"Render FX modes (entvars_t::renderfx)",W:"RenderFX",C:"Enum"},{P:"kRenderFxNone",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxPulseSlow",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxPulseFast",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxPulseSlowWide",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxPulseFastWide",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxFadeSlow",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxFadeFast",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxSolidSlow",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxSolidFast",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxStrobeSlow",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxStrobeFast",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxStrobeFaster",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxFlickerSlow",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxFlickerFast",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxNoDissipation",D:"",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxDistort",D:"Distort/scale/translate flicker",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxHologram",D:"kRenderFxDistort + distance fade",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxDeadPlayer",D:"kRenderAmt is the player index",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxExplode",D:"Scale up really big!",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxGlowShell",D:"Glowing Shell",W:"RenderFX",C:"RenderFX",J:1},{P:"kRenderFxClampMinScale",D:"Keep this sprite from getting very small (SPRITES only!)",W:"RenderFX",C:"RenderFX",J:1},{P:"RenderModes",D:"Render modes used by entities (entvars_t::rendermode)",W:"RenderModes",C:"Enum"},{P:"kRenderNormal",D:"src",W:"RenderModes",C:"RenderModes",J:1},{P:"kRenderTransColor",D:"c*a+dest*(1-a)",W:"RenderModes",C:"RenderModes",J:1},{P:"kRenderTransTexture",D:"src*a+dest*(1-a)",W:"RenderModes",C:"RenderModes",J:1},{P:"kRenderGlow",D:"src*a+dest -- No Z buffer checks",W:"RenderModes",C:"RenderModes",J:1},{P:"kRenderTransAlpha",D:"src*srca+dest*(1-srca)",W:"RenderModes",C:"RenderModes",J:1},{P:"kRenderTransAdd",D:"src*a+dest",W:"RenderModes",C:"RenderModes",J:1},{P:"SATCHELCODE",D:"Satchel codes",W:"SATCHELCODE",C:"Enum"},{P:"SATCHEL_DETONATE",D:"Detonates all satchel charges owned by a player",W:"SATCHELCODE",C:"SATCHELCODE",J:1},{P:"SATCHEL_RELEASE",D:"Release all satches charges owner by a player from their owner",W:"SATCHELCODE",C:"SATCHELCODE",J:1},{P:"SCHEDULE_TYPE",D:"Schedule types for monster AI",W:"SCHEDULE_TYPE",C:"Enum"},{P:"SCHED_NONE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_IDLE_STAND",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_IDLE_WALK",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAKE_ANGRY",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAKE_CALLED",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_ALERT_FACE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_ALERT_SMALL_FLINCH",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_ALERT_BIG_FLINCH",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_ALERT_STAND",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_INVESTIGATE_SOUND",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_INVESTIGATE_COMBAT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_COMBAT_FACE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_COMBAT_STAND",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_CHASE_ENEMY",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_CHASE_ENEMY_FAILED",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_VICTORY_DANCE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TARGET_FACE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TARGET_CHASE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_SMALL_FLINCH",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TAKE_COVER_FROM_ENEMY",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TAKE_COVER_FROM_BEST_SOUND",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TAKE_COVER_FROM_ORIGIN",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_COWER",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_MELEE_ATTACK1",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_MELEE_ATTACK2",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_RANGE_ATTACK1",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_RANGE_ATTACK2",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_SPECIAL_ATTACK1",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_SPECIAL_ATTACK2",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_STANDOFF",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_ARM_WEAPON",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_RELOAD",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_GUARD",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_AMBUSH",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_DIE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAIT_TRIGGER",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAIT_TILL_SEEN",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_FOLLOW",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_SLEEP",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAKE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_BARNACLE_VICTIM_GRAB",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_BARNACLE_VICTIM_CHOMP",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_AISCRIPT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_FAIL",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TARGET_PLAYERFACE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TARGET_PLAYERCHASE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TARGET_PLAYERCHASE_FORCE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_MOVE_AWAY_PLAYERFOLLOW",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_MOVE_TO_TANK",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_WAIT_AT_TANK",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_FIND_ATTACK_POINT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_LOSE_ENEMY",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_RANGE_ATTACK1_DEFAULT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_SMALL_FLINCH_SPECIAL",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_TELEPORT_FALL",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_GUARD_POINT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCHED_PATH_WAYPOINT",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"LAST_COMMON_SCHEDULE",D:"",W:"SCHEDULE_TYPE",C:"SCHEDULE_TYPE",J:1},{P:"SCRIPTSTATE",D:"The state of a monster's script.",W:"SCRIPTSTATE",C:"Enum"},{P:"SCRIPT_PLAYING",D:"Playing the sequence",W:"SCRIPTSTATE",C:"SCRIPTSTATE",J:1},{P:"SCRIPT_WAIT",D:"Waiting on everyone in the script to be ready",W:"SCRIPTSTATE",C:"SCRIPTSTATE",J:1},{P:"SCRIPT_CLEANUP",D:"Cancelling the script / cleaning up",W:"SCRIPTSTATE",C:"SCRIPTSTATE",J:1},{P:"SCRIPT_WALK_TO_MARK",D:"Walk to mark",W:"SCRIPTSTATE",C:"SCRIPTSTATE",J:1},{P:"SCRIPT_RUN_TO_MARK",D:"Run to mark",W:"SCRIPTSTATE",C:"SCRIPTSTATE",J:1},{P:"SeekFile",D:"Mode flags passed to File::Seek.",W:"SeekFile",C:"Enum"},{P:"SET",D:"Seek from the start of the file.",W:"SeekFile",C:"SeekFile",J:1},{P:"CUR",D:"Seek from the current offset in the file.",W:"SeekFile",C:"SeekFile",J:1},{P:"END",D:"Seek from the end of the file.",W:"SeekFile",C:"SeekFile",J:1},{P:"SOLID",D:"entvars_t::solid constants.\nNOTE: Some movetypes will cause collisions independent of SOLID_NOT/SOLID_TRIGGER when the entity moves\nSOLID only effects OTHER entities colliding with this one when they move - UGH!",W:"SOLID",C:"Enum"},{P:"SOLID_NOT_EXPLICIT",D:"no interaction with other objects (forced by map)",W:"SOLID",C:"SOLID",J:1},{P:"SOLID_NOT",D:"no interaction with other objects",W:"SOLID",C:"SOLID",J:1},{P:"SOLID_TRIGGER",D:"touch on edge, but not blocking",W:"SOLID",C:"SOLID",J:1},{P:"SOLID_BBOX",D:"touch on edge, block",W:"SOLID",C:"SOLID",J:1},{P:"SOLID_SLIDEBOX",D:"touch on edge, but not an onground",W:"SOLID",C:"SOLID",J:1},{P:"SOLID_BSP",D:"bsp clip, touch on edge, block",W:"SOLID",C:"SOLID",J:1},{P:"SOUND_CHANNEL",D:"Audio channels",W:"SOUND_CHANNEL",C:"Enum"},{P:"CHAN_AUTO",D:"Automatically selects a channel for use. You cannot stop sounds while using this channel with StopSound, or in conjunction with the SND_STOP flag.",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_WEAPON",D:"",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_VOICE",D:"",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_ITEM",D:"",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_BODY",D:"",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_STREAM",D:"allocate stream channel from the static or dynamic area",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_STATIC",D:"allocate channel from the static area",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"CHAN_MUSIC",D:"",W:"SOUND_CHANNEL",C:"SOUND_CHANNEL",J:1},{P:"SoundFlag",D:"Sound flags",W:"SoundFlag",C:"Enum"},{P:"SND_VOLUME",D:"Volume flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_PITCH",D:"Pitch flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_ATTENUATION",D:"Attenuation flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_ORIGIN",D:"Origin flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_ENT",D:"Entity flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_STOP",D:"Stop flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_CHANGE_VOL",D:"Change volume flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_CHANGE_PITCH",D:"Change pitch flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_SENTENCE",D:"Sentence flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_REFRESH",D:"Refresh flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_FORCE_SINGLE",D:"Force single flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_FORCE_LOOP",D:"Force loop flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_LINEAR",D:"Linear flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SND_SKIP_ORIGIN_USE_ENT",D:"Skip Origin and use entity flag",W:"SoundFlag",C:"SoundFlag",J:1},{P:"SQLiteMode",D:"SQLite Open Mode",W:"SQLiteMode",C:"Enum"},{P:"SQLITE_OPEN_READONLY",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_READWRITE",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_CREATE",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_DELETEONCLOSE",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_EXCLUSIVE",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_AUTOPROXY",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_URI",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_MEMORY",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_MAIN_DB",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_TEMP_DB",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_TRANSIENT_DB",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_MAIN_JOURNAL",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_TEMP_JOURNAL",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_SUBJOURNAL",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_SUPER_JOURNAL",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_NOMUTEX",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_FULLMUTEX",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_SHAREDCACHE",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_PRIVATECACHE",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_WAL",D:"VFS only",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_NOFOLLOW",D:"Ok for sqlite3_open_v2()",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLITE_OPEN_EXRESCODE",D:"Extended result codes",W:"SQLiteMode",C:"SQLiteMode",J:1},{P:"SQLiteResult",D:"SQLite Return Value",W:"SQLiteResult",C:"Enum"},{P:"SQLITE_OK",D:"Successful result ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_ERROR",D:"Generic error ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_INTERNAL",D:"Internal logic error in SQLite ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_PERM",D:"Access permission denied ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_ABORT",D:"Callback routine requested an abort ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_BUSY",D:"The database file is locked ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_LOCKED",D:"A table in the database is locked ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_NOMEM",D:"A malloc() failed ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_READONLY",D:"Attempt to write a readonly database ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_INTERRUPT",D:"Operation terminated by sqlite3_interrupt()",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_IOERR",D:"Some kind of disk I/O error occurred ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_CORRUPT",D:"The database disk image is malformed ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_NOTFOUND",D:"Unknown opcode in sqlite3_file_control() ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_FULL",D:"Insertion failed because database is full ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_CANTOPEN",D:"Unable to open the database file ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_PROTOCOL",D:"Database lock protocol error ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_EMPTY",D:"Internal use only ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_SCHEMA",D:"The database schema changed ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_TOOBIG",D:"String or BLOB exceeds size limit ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_CONSTRAINT",D:"Abort due to constraint violation ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_MISMATCH",D:"Data type mismatch ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_MISUSE",D:"Library used incorrectly ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_NOLFS",D:"Uses OS features not supported on host ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_AUTH",D:"Authorization denied ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_FORMAT",D:"Not used ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_RANGE",D:"2nd parameter to sqlite3_bind out of range ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_NOTADB",D:"File opened that is not a database file ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_NOTICE",D:"Notifications from sqlite3_log() ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_WARNING",D:"Warnings from sqlite3_log() ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_ROW",D:"sqlite3_step() has another row ready ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_DONE",D:"sqlite3_step() has finished executing ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"SQLITE_CLOSED",D:"sql has been closed ",W:"SQLiteResult",C:"SQLiteResult",J:1},{P:"TANKBULLET",D:"func_tank bullet types",W:"TANKBULLET",C:"Enum"},{P:"TANK_BULLET_NONE",D:"No bullet. Nothing is fired when this is set",W:"TANKBULLET",C:"TANKBULLET",J:1},{P:"TANK_BULLET_9MM",D:"9mm rounds",W:"TANKBULLET",C:"TANKBULLET",J:1},{P:"TANK_BULLET_MP5",D:"MP5 rounds",W:"TANKBULLET",C:"TANKBULLET",J:1},{P:"TANK_BULLET_12MM",D:"12 mm rounds",W:"TANKBULLET",C:"TANKBULLET",J:1},{P:"TankFlags",D:"func_tank spawn flags",W:"TankFlags",C:"Enum"},{P:"SF_TANK_ACTIVE",D:"Whether the tank is active or not",W:"TankFlags",C:"TankFlags",J:1},{P:"SF_TANK_LINEOFSIGHT",D:"Whether to only attack if the tank has a direct line of sight of its target or continue firing.",W:"TankFlags",C:"TankFlags",J:1},{P:"SF_TANK_CANCONTROL",D:"Whether this func_tank is controllable or not",W:"TankFlags",C:"TankFlags",J:1},{P:"SF_TANK_USERELATIONS",D:"If set, uses the relationship specified when dealing with player targets. Otherwise, defaults to always attacking monsters.",W:"TankFlags",C:"TankFlags",J:1},{P:"SF_TANK_PLAYERCANTFIRE",D:"If set, controlling player can't fire this tank.",W:"TankFlags",C:"TankFlags",J:1},{P:"TASK_TYPE",D:"Task types for the monster AI",W:"TASK_TYPE",C:"Enum"},{P:"TASK_INVALID",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FACE_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_PVS",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SUGGEST_STATE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WALK_TO_TARGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RUN_TO_TARGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MOVE_TO_TARGET_RANGE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_ENEMY_LKP",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_ENEMY_CORPSE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_LEADER",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_SPOT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_TARGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_HINTNODE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_LASTPOSITION",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_BESTSOUND",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_BESTSCENT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RUN_PATH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WALK_PATH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STRAFE_PATH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_CLEAR_MOVE_WAIT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STORE_LASTPOSITION",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_CLEAR_LASTPOSITION",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_ACTIVE_IDLE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_HINTNODE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_CLEAR_HINTNODE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SMALL_FLINCH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_IDEAL",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_ROUTE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_HINTNODE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_TARGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_LASTPOSITION",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RANGE_ATTACK1",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RANGE_ATTACK2",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MELEE_ATTACK1",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MELEE_ATTACK2",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RELOAD",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RANGE_ATTACK1_NOTURN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RANGE_ATTACK2_NOTURN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MELEE_ATTACK1_NOTURN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MELEE_ATTACK2_NOTURN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RELOAD_NOTURN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SPECIAL_ATTACK1",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SPECIAL_ATTACK2",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_CROUCH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STAND",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GUARD",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STEP_LEFT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STEP_RIGHT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STEP_FORWARD",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STEP_BACK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_DODGE_LEFT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_DODGE_RIGHT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_ANGRY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_DEATH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SET_ACTIVITY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SET_SCHEDULE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SET_FAIL_SCHEDULE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_CLEAR_FAIL_SCHEDULE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_SEQUENCE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_SEQUENCE_FACE_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_SEQUENCE_FACE_TARGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_IDLE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_WAKE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_PAIN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_SOUND_DIE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_COVER_FROM_BEST_SOUND",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_COVER_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_LATERAL_COVER_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_NODE_COVER_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_NEAR_NODE_COVER_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_FAR_NODE_COVER_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_COVER_FROM_ORIGIN",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_EAT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_DIE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FOR_SCRIPT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_SCRIPT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_ENABLE_SCRIPT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLANT_ON_SCRIPT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FACE_SCRIPT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_RANDOM",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_INDEFINITE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_STOP_MOVING",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_TURN_LEFT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_TURN_RIGHT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_REMEMBER",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FORGET",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FOR_MOVEMENT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FOR_MOVEMENT_AP",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FOR_MOVEMENT_ENEMY_OCCLUDED",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WALK_PLAYERPATH_FOR_UNITS",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MOVE_AWAY_PLAYERPATH",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_TANK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_TANK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_AT_TANK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_ATTACKPOINT_TO_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_WAIT_FOR_MOVEMENT_GRENADE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MOVE_TO_TARGET_RANGE_FORCE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PLAY_SEQUENCE_COWER",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_USE_TANK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_RUN_TO_TANK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_FIND_COVER_DISTANCE_FROM_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_GET_PATH_TO_BESTCOMBATSOUND",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_MOVE_TO_ENEMY",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_INITIALIZE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_MOVEMENT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_ANGLES",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_ARRIVAL",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_WAIT",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TASK_PATH_WAYPOINT_DEPARTURE",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"LAST_COMMON_TASK",D:"",W:"TASK_TYPE",C:"TASK_TYPE",J:1},{P:"TaskData",D:"These go in the flData member of TASK_WALK_TO_TARGET, TASK_RUN_TO_TARGET",W:"TaskData",C:"Enum"},{P:"TARGET_MOVE_NORMAL",D:"Move normally",W:"TaskData",C:"TaskData",J:1},{P:"TARGET_MOVE_SCRIPTED",D:"Move scripted",W:"TaskData",C:"TaskData",J:1},{P:"TE_BOUNCE",D:"Temp entity bounce sound types",W:"TE_BOUNCE",C:"Enum"},{P:"TE_BOUNCE_NULL",D:"",W:"TE_BOUNCE",C:"TE_BOUNCE",J:1},{P:"TE_BOUNCE_SHELL",D:"",W:"TE_BOUNCE",C:"TE_BOUNCE",J:1},{P:"TE_BOUNCE_SHOTSHELL",D:"",W:"TE_BOUNCE",C:"TE_BOUNCE",J:1},{P:"TE_ExplosionFlag",D:"TE_EXPLOSION flags",W:"TE_ExplosionFlag",C:"Enum"},{P:"TE_EXPLFLAG_NONE",D:"All flags clear makes default Half-Life explosion",W:"TE_ExplosionFlag",C:"TE_ExplosionFlag",J:1},{P:"TE_EXPLFLAG_NOADDITIVE",D:"Sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)",W:"TE_ExplosionFlag",C:"TE_ExplosionFlag",J:1},{P:"TE_EXPLFLAG_NODLIGHTS",D:"Do not render dynamic lights",W:"TE_ExplosionFlag",C:"TE_ExplosionFlag",J:1},{P:"TE_EXPLFLAG_NOSOUND",D:"Do not play client explosion sound",W:"TE_ExplosionFlag",C:"TE_ExplosionFlag",J:1},{P:"TE_EXPLFLAG_NOPARTICLES",D:"Do not draw particles",W:"TE_ExplosionFlag",C:"TE_ExplosionFlag",J:1},{P:"TE_FireFieldFlag",D:"TE_FIREFIELD flags",W:"TE_FireFieldFlag",C:"Enum"},{P:"TEFIRE_FLAG_ALLFLOAT",D:"All sprites will drift upwards as they animate",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TEFIRE_FLAG_SOMEFLOAT",D:"Some of the sprites will drift upwards. (50% chance)",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TEFIRE_FLAG_LOOP",D:"If set, sprite plays at 15 fps, otherwise plays at whatever rate stretches the animation over the sprite's duration.",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TEFIRE_FLAG_ALPHA",D:"If set, sprite is rendered alpha blended at 50% else, opaque",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TEFIRE_FLAG_PLANAR",D:"If set, all fire sprites have same initial Z instead of randomly filling a cube. ",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TEFIRE_FLAG_ADDITIVE",D:"If set, sprite is rendered non-opaque with additive",W:"TE_FireFieldFlag",C:"TE_FireFieldFlag",J:1},{P:"TempEntityType",D:"Temporary entity types. Used in network messages of type SVC_TEMPENTITY.",W:"TempEntityType",C:"Enum"},{P:"TE_BEAMPOINTS",D:"Beam effect between two points",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMENTPOINT",D:"Beam effect between point and entity",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_GUNSHOT",D:"Particle effect plus ricochet sound",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_EXPLOSION",D:"Additive sprite, 2 dynamic lights, flickering particles, explosion sound, move vertically 8 pps",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_TAREXPLOSION",D:"Quake1 \"tarbaby\" explosion with sound",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SMOKE",D:"Alphablend sprite, move vertically 30 pps",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_TRACER",D:"Tracer effect from point to point",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_LIGHTNING",D:"TE_BEAMPOINTS with simplified parameters",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMENTS",D:"Beam effect between two entities",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SPARKS",D:"Spark effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_LAVASPLASH",D:"Lava splash effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_TELEPORT",D:"Teleport effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_EXPLOSION2",D:"Explosion effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BSPDECAL",D:"Decal from the .BSP file ",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_IMPLOSION",D:"Tracers moving toward a point",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SPRITETRAIL",D:"Line of moving glow sprites with gravity, fadeout, and collisions",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SPRITE",D:"Additive sprite, plays 1 cycle",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMSPRITE",D:"A beam with a sprite at the end",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMTORUS",D:"Screen aligned beam ring, expands to max radius over lifetime",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMDISK",D:"Disk that expands to max radius over lifetime",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMCYLINDER",D:"Cylinder that expands to max radius over lifetime",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMFOLLOW",D:"Create a line of decaying beam segments until entity stops moving",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_GLOWSPRITE",D:"Glowing sprite",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BEAMRING",D:"Connect a beam ring to two entities",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_STREAK_SPLASH",D:"Oriented shower of tracers",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_DLIGHT",D:"Dynamic light effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_ELIGHT",D:"Point entity light, no world effect",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_TEXTMESSAGE",D:"Text message",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_LINE",D:"Draws a line",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BOX",D:"Draws a box",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_KILLBEAM",D:"Kill all beams attached to entity",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_LARGEFUNNEL",D:"Creates a large funnel",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BLOODSTREAM",D:"Particle spray",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SHOWLINE",D:"Line of particles every 5 units, dies in 30 seconds",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BLOOD",D:"Particle spray",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_DECAL",D:"Decal applied to a brush entity (not the world)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_FIZZ",D:"Create alpha sprites inside of entity, float upwards",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_MODEL",D:"Create a moving model that bounces and makes a sound when it hits",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_EXPLODEMODEL",D:"Spherical shower of models, picks from sets",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BREAKMODEL",D:"Box of models or sprites",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_GUNSHOTDECAL",D:"Decal and ricochet sound",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SPRITE_SPRAY",D:"Spray of alpha sprites",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_ARMOR_RICOCHET",D:"Quick spark sprite, client ricochet sound. ",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_PLAYERDECAL",D:"Draw a player decal (spray paint)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BUBBLES",D:"Create alpha sprites inside of box, float upwards",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BUBBLETRAIL",D:"Create alpha sprites along a line, float upwards",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_BLOODSPRITE",D:"Spray of opaque sprite1's that fall, single sprite2 for 1..2 secs (this is a high-priority tent)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_WORLDDECAL",D:"Decal applied to the world brush",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_WORLDDECALHIGH",D:"Decal (with texture index > 256) applied to world brush",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_DECALHIGH",D:"Same as TE_DECAL, but the texture index was greater than 256",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_PROJECTILE",D:"Makes a projectile (like a nail) (this is a high-priority tent)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_SPRAY",D:"Throws a shower of sprites or models",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_PLAYERSPRITES",D:"Sprites emit from a player's bounding box (ONLY use for players!)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_PARTICLEBURST",D:"Very similar to lavasplash.",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_FIREFIELD",D:"Makes a field of fire.",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_PLAYERATTACHMENT",D:"Attaches a TENT to a player (this is a high-priority tent)",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_KILLPLAYERATTACHMENTS",D:"Will expire all TENTS attached to a player.",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_MULTIGUNSHOT",D:"Much more compact shotgun message",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TE_USERTRACER",D:"Larger message than the standard tracer, but allows some customization.",W:"TempEntityType",C:"TempEntityType",J:1},{P:"TextureType",D:"Texture types used by the game.",W:"TextureType",C:"Enum"},{P:"CHAR_TEX_CONCRETE",D:"Concrete (Default)",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_METAL",D:"Metal",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_DIRT",D:"Dirt",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_VENT",D:"Vent",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_GRATE",D:"Grate",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_TILE",D:"Tile",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_SLOSH",D:"Slosh",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_WOOD",D:"Wood",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_COMPUTER",D:"Computer",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_GLASS",D:"Glass",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_FLESH",D:"Flesh",W:"TextureType",C:"TextureType",J:1},{P:"CHAR_TEX_SNOW",D:"Snow",W:"TextureType",C:"TextureType",J:1},{P:"TOGGLE_STATE",D:"Toggle state for entities that can be toggled.",W:"TOGGLE_STATE",C:"Enum"},{P:"TS_AT_TOP",D:"Entity is at top",W:"TOGGLE_STATE",C:"TOGGLE_STATE",J:1},{P:"TS_AT_BOTTOM",D:"Entity is at bottom",W:"TOGGLE_STATE",C:"TOGGLE_STATE",J:1},{P:"TS_GOING_UP",D:"Entity is going up",W:"TOGGLE_STATE",C:"TOGGLE_STATE",J:1},{P:"TS_GOING_DOWN",D:"Entity is going down",W:"TOGGLE_STATE",C:"TOGGLE_STATE",J:1},{P:"Train",D:"Train modes used by CBasePlayer::m_iTrain",W:"Train",C:"Enum"},{P:"TRAIN_ACTIVE",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_NEW",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_OFF",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_NEUTRAL",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_SLOW",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_MEDIUM",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_FAST",D:"",W:"Train",C:"Train",J:1},{P:"TRAIN_BACK",D:"",W:"Train",C:"Train",J:1},{P:"Type",D:"Console command kind.",W:"Type",C:"Enum"},{P:"ConCommand",D:"This console command is a command",W:"Type",C:"Type",J:1},{P:"ClientCommand",D:"This console command is a client command",W:"Type",C:"Type",J:1},{P:"CVar",D:"This console command is a cvar",W:"Type",C:"Type",J:1},{P:"USE_TYPE",D:"Use type for entities. Not all entities support all use types.\nPassed to the Use method on entities.",W:"USE_TYPE",C:"Enum"},{P:"USE_OFF",D:"Turns off an entity",W:"USE_TYPE",C:"USE_TYPE",J:1},{P:"USE_ON",D:"Turns on an entity",W:"USE_TYPE",C:"USE_TYPE",J:1},{P:"USE_SET",D:"Sets the state of an entity (use float parameter in Use)",W:"USE_TYPE",C:"USE_TYPE",J:1},{P:"USE_TOGGLE",D:"Toggles the state of an entity",W:"USE_TYPE",C:"USE_TYPE",J:1},{P:"USE_KILL",D:"Kills an entity",W:"USE_TYPE",C:"USE_TYPE",J:1},{P:"WALKMOVE",D:"Walk move types",W:"WALKMOVE",C:"Enum"},{P:"WALKMOVE_NORMAL",D:"normal walkmove",W:"WALKMOVE",C:"WALKMOVE",J:1},{P:"WALKMOVE_WORLDONLY",D:"doesn't hit ANY entities, no matter what the solid type",W:"WALKMOVE",C:"WALKMOVE",J:1},{P:"WALKMOVE_CHECKONLY",D:"move, but don't touch triggers",W:"WALKMOVE",C:"WALKMOVE",J:1},{P:"WATERLEVEL",D:"entvars_t waterlevel values",W:"WATERLEVEL",C:"Enum"},{P:"WATERLEVEL_DRY",D:"Not in water",W:"WATERLEVEL",C:"WATERLEVEL",J:1},{P:"WATERLEVEL_FEET",D:"Feet underwater",W:"WATERLEVEL",C:"WATERLEVEL",J:1},{P:"WATERLEVEL_WAIST",D:"Waist underwater",W:"WATERLEVEL",C:"WATERLEVEL",J:1},{P:"WATERLEVEL_HEAD",D:"Head underwater (completely submerged)",W:"WATERLEVEL",C:"WATERLEVEL",J:1},{P:"WeaponIds",D:"Weapon id values",W:"WeaponIds",C:"Enum"},{P:"WEAPON_NONE",D:"Weapon id used for invalid weapon ids.",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_CROWBAR",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_GLOCK",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_PYTHON",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_MP5",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_CHAINGUN",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_CROSSBOW",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SHOTGUN",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_RPG",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_GAUSS",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_EGON",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_HORNETGUN",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_HANDGRENADE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_TRIPMINE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SATCHEL",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SNARK",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_UZI",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_MEDKIT",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_CROWBAR_ELECTRIC",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_PIPEWRENCH",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_MINIGUN",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_GRAPPLE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SNIPERRIFLE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_M249",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_M16",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SPORELAUNCHER",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_DESERT_EAGLE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_SHOCKRIFLE",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"WEAPON_DISPLACER",D:"",W:"WeaponIds",C:"WeaponIds",J:1},{P:"MAX_WEAPONS",D:"Maximum number of weapons that the game supports",W:"WeaponIds",C:"WeaponIds",J:1},{P:"isalnum",D:"Returns whether character is alphanumeric.",W:"Functions",C:"Global Function",J:1},{P:"isalpha",D:"Returns whether character is alphabetic.",W:"Functions",C:"Global Function",J:1},{P:"iscntrl",D:"Returns whether character is control.",W:"Functions",C:"Global Function",J:1},{P:"isdigit",D:"Returns whether character is a decimal digit character.",W:"Functions",C:"Global Function",J:1},{P:"isgraph",D:"Returns whether character is graph.",W:"Functions",C:"Global Function",J:1},{P:"islower",D:"Returns whether character is lower.",W:"Functions",C:"Global Function",J:1},{P:"isprint",D:"Returns whether character is print.",W:"Functions",C:"Global Function",J:1},{P:"ispunct",D:"Returns whether character is punctuality.",W:"Functions",C:"Global Function",J:1},{P:"isspace",D:"Returns whether character is space.",W:"Functions",C:"Global Function",J:1},{P:"isupper",D:"Returns whether character is upper.",W:"Functions",C:"Global Function",J:1},{P:"isxdigit",D:"Returns whether character is a hexadecimal numeric character.",W:"Functions",C:"Global Function",J:1},{P:"tolower",D:"Converts the given character to lower case.",W:"Functions",C:"Global Function",J:1},{P:"toupper",D:"Converts the given character to upper case.",W:"Functions",C:"Global Function",J:1},{P:"atof",D:"Converts the given string to a float.",W:"Functions",C:"Global Function",J:1},{P:"atod",D:"Converts the given string to a double.",W:"Functions",C:"Global Function",J:1},{P:"atoi",D:"Converts the given string to an integer.",W:"Functions",C:"Global Function",J:1},{P:"atoi64",D:"Converts the given string to a 64 bit integer.",W:"Functions",C:"Global Function",J:1},{P:"atoui",D:"Converts the given string to an unsigned integer.",W:"Functions",C:"Global Function",J:1},{P:"atoui64",D:"Converts the given string to a 64 bit unsigned integer.",W:"Functions",C:"Global Function",J:1},{P:"atobool",D:"Converts the given string to a boolean.",W:"Functions",C:"Global Function",J:1},{P:"formatInt",D:"Formats a signed integer into a string.\nThe options string is a combination of the following characters:\n'l' = left justify\n'0' = pad with zeroes\n'+' = always include the sign, even if positive\n' ' = add a space in case of positive number\n'h' = hexadecimal integer small letters\n'H' = hexadecimal integer capital letters\n",W:"Functions",C:"Global Function",J:1},{P:"formatUInt",D:"Formats a unsigned integer into a string.\nThe options string is a combination of the following characters:\n'l' = left justify\n'0' = pad with zeroes\n'+' = always include the sign, even if positive\n' ' = add a space in case of positive number\n'h' = hexadecimal integer small letters\n'H' = hexadecimal integer capital letters\n",W:"Functions",C:"Global Function",J:1},{P:"formatFloat",D:"Formats a double into a string.\nThe options string is a combination of the following characters:\n'l' = left justify\n'0' = pad with zeroes\n'+' = always include the sign, even if positive\n' ' = add a space in case of positive number\n'e' = exponent character with small e\n'E' = exponent character with capital E\n",W:"Functions",C:"Global Function",J:1},{P:"snprintf",D:"Prints the format string to the destination buffer. Uses SC printf formatting style.",W:"Functions",C:"Global Function",J:1},{P:"Match",D:"Performs are regular expression matching operation.\nReturns true if the match succeeded, false otherwise",W:"Functions",C:"Global Function",J:1},{P:"Search",D:"Returns whether some sub-sequence in the target sequence (the subject) matches the regular expression pRegex.",W:"Functions",C:"Global Function",J:1},{P:"Replace",D:"Makes a copy of the target sequence (the subject) with all matches of the regular expression pRegex (the pattern) replaced by szFormat (the replacement).",W:"Functions",C:"Global Function",J:1},{P:"FlagsValid",D:"Returns whether the given open flags are valid.",W:"Functions",C:"Global Function",J:1},{P:"FilterFlags",D:"Filters the given flags, removing unnecessary flags.",W:"Functions",C:"Global Function",J:1},{P:"FormatOpenFlags",D:"Formats the open flags into a string that represents the flags.",W:"Functions",C:"Global Function",J:1},{P:"get_g_Scheduler",D:"Gets the current script's scheduler.",W:"Functions",C:"Global Function",J:1},{P:"DotProduct",D:"Returns a dot product of the given vectors",W:"Functions",C:"Global Function",J:1},{P:"CrossProduct",D:"Returns the cross product of the given vectors",W:"Functions",C:"Global Function",J:1},{P:"TrainSpeed",D:"",W:"Functions",C:"Global Function",J:1},{P:"FNullEnt",D:"Checks edict for nullity",W:"Functions",C:"Global Function",J:1},{P:"GetSoundEntInstance",D:"Gets the current global sound manager entity",W:"Functions",C:"Global Function",J:1},{P:"PathTrackEntity_Instance",D:"",W:"Functions",C:"Global Function",J:1},{P:"get_g_Persistence",D:"Gets the map script's persistence manager.",W:"Functions",C:"Global Function",J:1},{P:"UnixTimestamp",D:"Gets the current time as a unix timestamp.",W:"Functions",C:"Global Function",J:1},{P:"get_g_Hooks",D:"Gets the current script's hook manager.",W:"Functions",C:"Global Function",J:1},{P:"get_g_Module",D:"Gets the current script's module.",W:"Functions",C:"Global Function",J:1},{P:"WORLD_BOUNDARY",D:"Distance from the world origin to the world boundary in a single axis\nValue: 65536.0",W:"Properties",C:"Global Property",J:1},{P:"DEFAULT_COMPARE",D:"Default comparison type.",W:"Properties",C:"Global Property",J:1},{P:"EMPTY_STRING",D:"Empty string. Useful when a reference to a string is needed.",W:"Properties",C:"Global Property",J:1},{P:"WHITESPACE_CHARACTERS",D:"A string that contains one instance of every whitespace character.",W:"Properties",C:"Global Property",J:1},{P:"INVALID_INDEX",D:"Sentinel value used by string methods.\nValue: 4294967295",W:"Properties",C:"Global Property",J:1},{P:"NO_MORE_TOKENS",D:"Sentinel value used by string tokenization when there are no tokens remaining.\nValue: 4294967294",W:"Properties",C:"Global Property",J:1},{P:"g_Reflection",D:"Reflection global class instance.",W:"Properties",C:"Global Property",J:1},{P:"g_FileSystem",D:"Global file system instance",W:"Properties",C:"Global Property",J:1},{P:"g_Debugger",D:"Debugger instance.",W:"Properties",C:"Global Property",J:1},{P:"g_vecZero",D:"Zero vector (0, 0, 0)",W:"Properties",C:"Global Property",J:1},{P:"Math",D:"Math functions instance",W:"Properties",C:"Global Property",J:1},{P:"VIEW_FIELD_FULL",D:"Full view field\nValue: -1.0",W:"Properties",C:"Global Property",J:1},{P:"VIEW_FIELD_WIDE",D:"Wide view field\nValue: -0.7",W:"Properties",C:"Global Property",J:1},{P:"VIEW_FIELD_NARROW",D:"Narrow view field\nValue: 0.7",W:"Properties",C:"Global Property",J:1},{P:"VIEW_FIELD_ULTRA_NARROW",D:"Ultra narrow view field\nValue: 0.9",W:"Properties",C:"Global Property",J:1},{P:"g_Decals",D:"Dynamic decal manager instance",W:"Properties",C:"Global Property",J:1},{P:"g_ActivityMap",D:"Activity map instance",W:"Properties",C:"Global Property",J:1},{P:"slIdleStand",D:"",W:"Properties",C:"Global Property",J:1},{P:"slIdleTrigger",D:"",W:"Properties",C:"Global Property",J:1},{P:"slIdleWalk",D:"",W:"Properties",C:"Global Property",J:1},{P:"slWakeAngry",D:"",W:"Properties",C:"Global Property",J:1},{P:"slAlertFace",D:"",W:"Properties",C:"Global Property",J:1},{P:"slAlertStand",D:"",W:"Properties",C:"Global Property",J:1},{P:"slCombatStand",D:"",W:"Properties",C:"Global Property",J:1},{P:"slCombatFace",D:"",W:"Properties",C:"Global Property",J:1},{P:"slReload",D:"",W:"Properties",C:"Global Property",J:1},{P:"slRangeAttack1",D:"",W:"Properties",C:"Global Property",J:1},{P:"slRangeAttack2",D:"",W:"Properties",C:"Global Property",J:1},{P:"slChaseEnemy",D:"",W:"Properties",C:"Global Property",J:1},{P:"slSmallFlinch",D:"",W:"Properties",C:"Global Property",J:1},{P:"slDie",D:"",W:"Properties",C:"Global Property",J:1},{P:"slError",D:"",W:"Properties",C:"Global Property",J:1},{P:"slWalkToScript",D:"",W:"Properties",C:"Global Property",J:1},{P:"slRunToScript",D:"",W:"Properties",C:"Global Property",J:1},{P:"slWaitScript",D:"",W:"Properties",C:"Global Property",J:1},{P:"slTakeCoverFromBestSound",D:"",W:"Properties",C:"Global Property",J:1},{P:"slFail",D:"",W:"Properties",C:"Global Property",J:1},{P:"MAX_OLD_ENEMIES",D:"How many old enemies to remember\nValue: 4",W:"Properties",C:"Global Property",J:1},{P:"ROUTE_SIZE",D:"How many waypoints a monster can store at one time\nValue: 8",W:"Properties",C:"Global Property",J:1},{P:"VEC_HULL_MIN",D:"Default hull minimum. Used with CEntityFuncs::SetSize\nValue: (-16.0, -16.0, -36.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_HULL_MAX",D:"Default hull maximum. Used with CEntityFuncs::SetSize\nValue: (16.0, 16.0, 36.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_HUMAN_HULL_MIN",D:"Default human hull maximum. Used with CEntityFuncs::SetSize\nValue: (-16.0, -16.0, 0.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_HUMAN_HULL_MAX",D:"Default human hull maximum while standing. Used with CEntityFuncs::SetSize\nValue: (16.0, 16.0, 72.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_HUMAN_HULL_DUCK",D:"Default human hull maximum while ducking. Used with CEntityFuncs::SetSize\nValue: (16.0, 16.0, 36.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_VIEW",D:"View offset.\nValue: (0.0, 0.0, 28.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_DUCK_HULL_MIN",D:"Hull minimum while ducking. Used with CEntityFuncs::SetSize\nValue: (-16.0, -16.0, -18.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_DUCK_HULL_MAX",D:"Hull maximum while ducking. Used with CEntityFuncs::SetSize\nValue: (16.0, 16.0, 18.0)",W:"Properties",C:"Global Property",J:1},{P:"VEC_DUCK_VIEW",D:"Hull view offset while ducking.\nValue: (0.0, 0.0, 12.0)",W:"Properties",C:"Global Property",J:1},{P:"MAX_AMMO_TYPES",D:"Maximum number of ammo types\nValue: 64",W:"Properties",C:"Global Property",J:1},{P:"MAX_ITEM_TYPES",D:"HUD item selection slots\nValue: 10",W:"Properties",C:"Global Property",J:1},{P:"AUTOAIM_2DEGREES",D:"Autoaim\nValue: 0.034899",W:"Properties",C:"Global Property",J:1},{P:"AUTOAIM_5DEGREES",D:"Autoaim\nValue: 0.087156",W:"Properties",C:"Global Property",J:1},{P:"AUTOAIM_8DEGREES",D:"Autoaim\nValue: 0.139173",W:"Properties",C:"Global Property",J:1},{P:"AUTOAIM_10DEGREES",D:"Autoaim\nValue: 0.173648",W:"Properties",C:"Global Property",J:1},{P:"PLAYERCOMMAND_WAIT",D:"Time between player vocal client commands\nValue: 4.0",W:"Properties",C:"Global Property",J:1},{P:"g_EngineFuncs",D:"Engine functions instance",W:"Properties",C:"Global Property",J:1},{P:"g_ModelFuncs",D:"Model functions instance",W:"Properties",C:"Global Property",J:1},{P:"MAX_WORLD_SOUNDS",D:"maximum number of sounds handled by the world at one time.\nSee CSoundEnt.\nValue: 1024",W:"Properties",C:"Global Property",J:1},{P:"SOUNDLIST_EMPTY",D:"Indicates that the sound list is empty.\nSee CSoundEnt.\nValue: -1",W:"Properties",C:"Global Property",J:1},{P:"SOUNDLISTTYPE_FREE",D:"Identifiers passed to functions that can operate on either list, to indicate which list to operate on.\nSee CSoundEnt.\nValue: 1",W:"Properties",C:"Global Property",J:1},{P:"SOUNDLISTTYPE_ACTIVE",D:"Identifiers passed to functions that can operate on either list, to indicate which list to operate on.\nSee CSoundEnt.\nValue: 2",W:"Properties",C:"Global Property",J:1},{P:"SOUND_NEVER_EXPIRE",D:"With this set as a sound's ExpireTime, the sound will never expire.\nSee CSoundEnt.\nValue: -1",W:"Properties",C:"Global Property",J:1},{P:"g_InventoryMisc",D:"Inventory misc functions instance",W:"Properties",C:"Global Property",J:1},{P:"LOUD_GUN_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 1536",W:"Properties",C:"Global Property",J:1},{P:"NORMAL_GUN_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 1024",W:"Properties",C:"Global Property",J:1},{P:"QUIET_GUN_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 200",W:"Properties",C:"Global Property",J:1},{P:"BRIGHT_GUN_FLASH",D:"Value used in CBasePlayer::m_iWeaponFlash\nValue: 512",W:"Properties",C:"Global Property",J:1},{P:"NORMAL_GUN_FLASH",D:"Value used in CBasePlayer::m_iWeaponFlash\nValue: 256",W:"Properties",C:"Global Property",J:1},{P:"DIM_GUN_FLASH",D:"Value used in CBasePlayer::m_iWeaponFlash\nValue: 128",W:"Properties",C:"Global Property",J:1},{P:"BIG_EXPLOSION_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 2048",W:"Properties",C:"Global Property",J:1},{P:"NORMAL_EXPLOSION_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 1024",W:"Properties",C:"Global Property",J:1},{P:"SMALL_EXPLOSION_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 512",W:"Properties",C:"Global Property",J:1},{P:"WEAPON_ACTIVITY_VOLUME",D:"Parameter for CSoundEnt::InsertSound iVolume\nValue: 64",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_1DEGREES",D:"(0.008730, 0.008730, 0.008730)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_2DEGREES",D:"(0.017450, 0.017450, 0.017450)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_3DEGREES",D:"(0.026180, 0.026180, 0.026180)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_4DEGREES",D:"(0.034900, 0.034900, 0.034900)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_5DEGREES",D:"(0.043620, 0.043620, 0.043620)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_6DEGREES",D:"(0.052340, 0.052340, 0.052340)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_7DEGREES",D:"(0.061050, 0.061050, 0.061050)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_8DEGREES",D:"(0.069760, 0.069760, 0.069760)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_9DEGREES",D:"(0.078460, 0.078460, 0.078460)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_10DEGREES",D:"(0.087160, 0.087160, 0.087160)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_15DEGREES",D:"(0.130530, 0.130530, 0.130530)",W:"Properties",C:"Global Property",J:1},{P:"VECTOR_CONE_20DEGREES",D:"(0.173650, 0.173650, 0.173650)",W:"Properties",C:"Global Property",J:1},{P:"WEAPON_NOCLIP",D:"Used for clips that don't use ammo.\nValue: -1",W:"Properties",C:"Global Property",J:1},{P:"g_ItemRegistry",D:"Item registry global instance.",W:"Properties",C:"Global Property",J:1},{P:"g_EntityLoader",D:"Entity loader global instance",W:"Properties",C:"Global Property",J:1},{P:"g_CustomEntityFuncs",D:"Custom entity functions global instance.",W:"Properties",C:"Global Property",J:1},{P:"g_Utility",D:"Utility methods instance",W:"Properties",C:"Global Property",J:1},{P:"g_Game",D:"Game functions instance",W:"Properties",C:"Global Property",J:1},{P:"ATTN_NONE",D:"0.0",W:"Properties",C:"Global Property",J:1},{P:"ATTN_NORM",D:"0.8",W:"Properties",C:"Global Property",J:1},{P:"ATTN_IDLE",D:"2.0",W:"Properties",C:"Global Property",J:1},{P:"ATTN_STATIC",D:"1.25",W:"Properties",C:"Global Property",J:1},{P:"VOL_NORM",D:"Volume value normal\nValue: 1.0",W:"Properties",C:"Global Property",J:1},{P:"g_SoundSystem",D:"Sound engine instance",W:"Properties",C:"Global Property",J:1},{P:"g_Engine",D:"Engine global variables instance",W:"Properties",C:"Global Property",J:1},{P:"FTRACE_SIMPLEBOX",D:"Goes into g_Engine.trace_flags\nTraceline with a simple box\nValue: 1",W:"Properties",C:"Global Property",J:1},{P:"g_EntityFuncs",D:"Global entity functions instance",W:"Properties",C:"Global Property",J:1},{P:"RGBA_WHITE",D:"White\n(255, 255, 255, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_BLACK",D:"Black\n(0, 0, 0, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_RED",D:"Red\n(255, 0, 0, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_GREEN",D:"Green\n(0, 255, 0, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_BLUE",D:"Blue\n(0, 0, 255, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_YELLOW",D:"Yellow\n(255, 255, 0, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_ORANGE",D:"Orange\n(255, 128, 0, 255)",W:"Properties",C:"Global Property",J:1},{P:"RGBA_SVENCOOP",D:"Sven Co-op HUD color\n(100, 130, 200, 255)",W:"Properties",C:"Global Property",J:1},{P:"g_PlayerFuncs",D:"Global player functions instance",W:"Properties",C:"Global Property",J:1},{P:"g_WeaponFuncs",D:"Weapon functions global instance.",W:"Properties",C:"Global Property",J:1},{P:"g_GlobalState",D:"Global state manager instance",W:"Properties",C:"Global Property",J:1},{P:"g_Angelscript",D:"Angelscript debugging functions instance",W:"Properties",C:"Global Property",J:1},{P:"g_MapCycle",D:"Map cycle manager instance",W:"Properties",C:"Global Property",J:1},{P:"g_Map",D:"Map state variables instance",W:"Properties",C:"Global Property",J:1},{P:"g_PluginManager",D:"Plugin manager global instance.",W:"Properties",C:"Global Property",J:1},{P:"g_StartInventory",D:"Player start inventory manager instance",W:"Properties",C:"Global Property",J:1},{P:"g_TextMenus",D:"Text menu manager global instance",W:"Properties",C:"Global Property",J:1},{P:"g_AdminControl",D:"CAdminControl instance for plugins",W:"Properties",C:"Global Property",J:1},{P:"g_Log",D:"Log global instance",W:"Properties",C:"Global Property",J:1},{P:"g_ConCommandSystem",D:"CConCommandSystem global instance",W:"Properties",C:"Global Property",J:1},{P:"g_ClassicMode",D:"Classic Mode global instance.",W:"Properties",C:"Global Property",J:1},{P:"g_SurvivalMode",D:"Survival Mode global instance.",W:"Properties",C:"Global Property",J:1},{P:"QueryCvar2",D:"Get called when svc_querycvar2 response is received",W:"Properties",C:"Global Property",J:1},{P:"QueryCvar",D:"Get called when svc_querycvar response is received",W:"Properties",C:"Global Property",J:1},{P:"PlayerMovePlaySoundFX",D:"Get called when playing player move sound",W:"Properties",C:"Global Property",J:1},{P:"PlayerMovePlayStepSound",D:"Get called when playing step sound",W:"Properties",C:"Global Property",J:1},{P:"PlayerTouchPlayer",D:"Get called when player touches a player, player's velocity is temporarily set to impactvelocity",W:"Properties",C:"Global Property",J:1},{P:"PlayerTouchImpact",D:"Get called when player impacts a solid entities or world, player's velocity is temporarily set to impactvelocity",W:"Properties",C:"Global Property",J:1},{P:"PlayerTouchTrigger",D:"Get called when player touches a trigger",W:"Properties",C:"Global Property",J:1},{P:"PlayerPostThinkPost",D:"Post call of gEntityInterface.pfnPlayerPostThink",W:"Properties",C:"Global Property",J:1},{P:"PlayerAddToFullPack",D:"Post call of gEntityInterface.pfnAddToFullPack, only visible entity goes here",W:"Properties",C:"Global Property",J:1},{P:"AddAmmo556",D:"AddAmmo556",W:"Properties",C:"Global Property",J:1},{P:"GameEnd",D:"Pre call before game_end or changelevel",W:"Properties",C:"Global Property",J:1},{P:"PlayerMedikShot",D:"Pre call before medik shot",W:"Properties",C:"Global Property",J:1},{P:"SendScoreInfo",D:"Pre call before sending hud info to edict",W:"Properties",C:"Global Property",J:1},{P:"GrappleGetMonsterType",D:"Pre call before Weapon Grapple checking monster type",W:"Properties",C:"Global Property",J:1},{P:"BreakableTakeDamage",D:"Pre call before a breakable took damage",W:"Properties",C:"Global Property",J:1},{P:"BreakableDie",D:"Pre call before a breakable died",W:"Properties",C:"Global Property",J:1},{P:"BreakableTraceAttack",D:"Pre call before a breakable trace attack",W:"Properties",C:"Global Property",J:1},{P:"MonsterKilled",D:"Pre call before a monster died",W:"Properties",C:"Global Property",J:1},{P:"MonsterPostTakeDamage",D:"Post call before a monster took damage",W:"Properties",C:"Global Property",J:1},{P:"MonsterTakeDamage",D:"Pre call before a monster took damage",W:"Properties",C:"Global Property",J:1},{P:"MonsterTraceAttack",D:"Pre call before a monster trace attack",W:"Properties",C:"Global Property",J:1},{P:"MonsterSpawn",D:"Post call after a monster spawn",W:"Properties",C:"Global Property",J:1},{P:"IRelationship",D:"Pre call before checking relation",W:"Properties",C:"Global Property",J:1},{P:"EntitySpawn",D:"Post call after a Entity spawn",W:"Properties",C:"Global Property",J:1},{P:"PlayerCallGrenade",D:"Pre call before a player call grenade",W:"Properties",C:"Global Property",J:1},{P:"PlayerCallMedic",D:"Pre call before a player call medic",W:"Properties",C:"Global Property",J:1},{P:"PlayerTakeHealth",D:"Pre call before a player took health",W:"Properties",C:"Global Property",J:1},{P:"PlayerPostTakeDamage",D:"Pre call before a player took damage",W:"Properties",C:"Global Property",J:1},{P:"PlayerUserInfoChanged",D:"Pre call before a player info changed",W:"Properties",C:"Global Property",J:1},{P:"WeaponTertiaryAttack",D:"Called when a player fires a weapon's tertiary attack.\nValue: 0",W:"Properties",C:"Global Property",J:1},{P:"WeaponSecondaryAttack",D:"Called when a player fires a weapon's secondary attack.\nValue: 1",W:"Properties",C:"Global Property",J:1},{P:"WeaponPrimaryAttack",D:"Called when a player fires a weapon's primary attack.\nValue: 2",W:"Properties",C:"Global Property",J:1},{P:"PlayerPreDecal",D:"Called when a player attempts to spraypaint a decal onto a surface. The given trace result contains the surface information. Set bResult to false if the player shouldn't be able to spray. \nValue: 3",W:"Properties",C:"Global Property",J:1},{P:"PlayerDecal",D:"Called when a player is spraypainting a decal onto a surface. The given trace result contains the surface information. \nValue: 4",W:"Properties",C:"Global Property",J:1},{P:"GetPlayerSpawnSpot",D:"Called when a player is about to get a spawn point before (re)spawning.\nValue: 5",W:"Properties",C:"Global Property",J:1},{P:"PlayerPostThink",D:"Called when the player is processing post think events.\nValue: 6",W:"Properties",C:"Global Property",J:1},{P:"PlayerPreThink",D:"Called when the player is processing pre think events.\nValue: 7",W:"Properties",C:"Global Property",J:1},{P:"PlayerUse",D:"Called when the game is processing player use input. Note that this occurs even if the player has not pressed their use key.\nValue: 8",W:"Properties",C:"Global Property",J:1},{P:"PlayerLeftObserver",D:"Called when a player leaves observer mode.\nValue: 9",W:"Properties",C:"Global Property",J:1},{P:"PlayerEnteredObserver",D:"Called when a player enters observer mode.\nValue: 10",W:"Properties",C:"Global Property",J:1},{P:"PlayerKilled",D:"Called when a player is killed.\nValue: 11",W:"Properties",C:"Global Property",J:1},{P:"PlayerTakeDamage",D:"Called when a player takes damage. Note that the victim entity can't be changed at this point.\nValue: 12",W:"Properties",C:"Global Property",J:1},{P:"PlayerCanRespawn",D:"Called when the game wants to know if the player should be able to respawn or not.Set bCanRespawn to false to disallow, default true.\nValue: 13",W:"Properties",C:"Global Property",J:1},{P:"PlayerSpawn",D:"Called when a player (re)spawns.\nValue: 14",W:"Properties",C:"Global Property",J:1},{P:"ClientConnected",D:"Called when a player connects to the server. if bDisallowJoin is set to false, the player is disconnected. szRejectReason is shown to the player if disconnected. The maximum length of the reject reason string is 127 characters.\nValue: 15",W:"Properties",C:"Global Property",J:1},{P:"Collected",D:"Called when a pickup object is collected by a player. \nValue: 16",W:"Properties",C:"Global Property",J:1},{P:"Materialize",D:"Called when a pickup object materializes.\nValue: 17",W:"Properties",C:"Global Property",J:1},{P:"CanCollect",D:"Called when a pickup object is about to be collected by a player. Note that basic checks are done before this hook is called.\nValue: 18",W:"Properties",C:"Global Property",J:1},{P:"CanPlayerUseReservedSlot",D:"Called when a player connects to the server, and the number of slots left on the server is <= the number of reserved slots. Set bAllowJoin to true to allow the player to join (default false).\nValue: 19",W:"Properties",C:"Global Property",J:1},{P:"ClientSay",D:"Called when a player says something in game chat. The SayParameters class can be used to manipulate input and veto the message.\nValue: 20",W:"Properties",C:"Global Property",J:1},{P:"ClientPutInServer",D:"Called when a player has finished connecting and is put into the world. It is safe to send network messages to the player at this point.\nValue: 21",W:"Properties",C:"Global Property",J:1},{P:"ClientDisconnect",D:"Called when a player disconnects. Note that this is only called if the player was fully connected, meaning the player went through ClientPutInServer. This is never called for the local host.\nValue: 22",W:"Properties",C:"Global Property",J:1},{P:"EntityCreated",D:"Called when a new entity is created. At this point the entity is not spawned yet and may not be fully initialized.\nValue: 23",W:"Properties",C:"Global Property",J:1},{P:"MapChange",D:"Called when the map changes. This happens when the world is destroyed. There may still be entities that exist at this point.\nValue: 24",W:"Properties",C:"Global Property",J:1},{P:"size_t",D:"Size type used for denoting sizes",W:"Typedefs",C:"Typedef",J:1},{P:"OpenFileFlags_t",D:"Open File Flags",W:"Typedefs",C:"Typedef",J:1},{P:"SeekFileFlags_t",D:"Seek File Flags",W:"Typedefs",C:"Typedef",J:1},{P:"PersistID_t",D:"Persistence object id type.",W:"Typedefs",C:"Typedef",J:1},{P:"TextMenuId_t",D:"Menu id.",W:"Typedefs",C:"Typedef",J:1},{P:"time_t",D:"Unix timestamp type.",W:"Typedefs",C:"Typedef",J:1},{P:"ConCommandFlags_t",D:"Type to store console command flags in",W:"Typedefs",C:"Typedef",J:1},{P:"ThinkFunction",D:"Function definition for custom entity Think functions",W:"FuncDefs",C:"FuncDef",J:1},{P:"UseFunction",D:"Function definition for custom entity Use functions",W:"FuncDefs",C:"FuncDef",J:1},{P:"TouchFunction",D:"Function definition for custom entity Touch functions",W:"FuncDefs",C:"FuncDef",J:1},{P:"BlockedFunction",D:"Function definition for custom entity Blocked functions",W:"FuncDefs",C:"FuncDef",J:1},{P:"TextMenuPlayerSlotCallback",D:"Player slot callback for text menus.",W:"FuncDefs",C:"FuncDef",J:1},{P:"VoteBlocked",D:"Funcdef for vote blocked callbacks. The given time is when the active vote has ended.",W:"FuncDefs",C:"FuncDef",J:1},{P:"VoteEnd",D:"Funcdef for vote ended callbacks. If fResult is true, users voted for yes. Otherwise, voted for no.",W:"FuncDefs",C:"FuncDef",J:1},{P:"ConCommandCallback",D:"Callback for server console commands.",W:"FuncDefs",C:"FuncDef",J:1},{P:"ClientCommandCallback",D:"Callback for client console commands.",W:"FuncDefs",C:"FuncDef",J:1},{P:"CVarCallback",D:"Callback for cvars.",W:"FuncDefs",C:"FuncDef",J:1},{P:"fnSQLiteCallback",D:"SQLite Callback",W:"FuncDefs",C:"FuncDef",J:1},{P:"QueryCvar2ResponseCallback",D:"callback for svc_querycvar2 response",W:"FuncDefs",C:"FuncDef",J:1},{P:"QueryCvar2Hook",D:"Get called when svc_querycvar2 response is received",W:"FuncDefs",C:"FuncDef",J:1},{P:"QueryCvarHook",D:"Get called when svc_querycvar response is received",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerMovePlaySoundFXHook",D:"Get called when playing player move sound",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerMovePlayStepSoundHook",D:"Get called when playing step sound",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerTouchPlayerHook",D:"Get called when player touches a player, player's velocity is temporarily set to impactvelocity",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerTouchImpactHook",D:"Get called when player impacts a solid entities or world, player's velocity is temporarily set to impactvelocity",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerTouchTriggerHook",D:"Get called when player touches a trigger",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerPostThinkPostHook",D:"Post call of gEntityInterface.pfnPlayerPostThink",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerAddToFullPackHook",D:"Post call of gEntityInterface.pfnAddToFullPack, only visible entity goes here",W:"FuncDefs",C:"FuncDef",J:1},{P:"AddAmmo556Hook",D:"AddAmmo556",W:"FuncDefs",C:"FuncDef",J:1},{P:"GameEndHook",D:"Pre call before game_end or changelevel",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerMedikShotHook",D:"Pre call before medik shot",W:"FuncDefs",C:"FuncDef",J:1},{P:"SendScoreInfoHook",D:"Pre call before sending hud info to edict",W:"FuncDefs",C:"FuncDef",J:1},{P:"GrappleGetMonsterTypeHook",D:"Pre call before Weapon Grapple checking monster type",W:"FuncDefs",C:"FuncDef",J:1},{P:"BreakableTakeDamageHook",D:"Pre call before a breakable took damage",W:"FuncDefs",C:"FuncDef",J:1},{P:"BreakableDieHook",D:"Pre call before a breakable died",W:"FuncDefs",C:"FuncDef",J:1},{P:"BreakableTraceAttackHook",D:"Pre call before a breakable trace attack",W:"FuncDefs",C:"FuncDef",J:1},{P:"MonsterKilledHook",D:"Pre call before a monster died",W:"FuncDefs",C:"FuncDef",J:1},{P:"MonsterPostTakeDamageHook",D:"Post call before a monster took damage",W:"FuncDefs",C:"FuncDef",J:1},{P:"MonsterTakeDamageHook",D:"Pre call before a monster took damage",W:"FuncDefs",C:"FuncDef",J:1},{P:"MonsterTraceAttackHook",D:"Pre call before a monster trace attack",W:"FuncDefs",C:"FuncDef",J:1},{P:"MonsterSpawnHook",D:"Post call after a monster spawn",W:"FuncDefs",C:"FuncDef",J:1},{P:"IRelationshipHook",D:"Pre call before checking relation",W:"FuncDefs",C:"FuncDef",J:1},{P:"EntitySpawnHook",D:"Post call after a Entity spawn",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerCallGrenadeHook",D:"Pre call before a player call grenade",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerCallMedicHook",D:"Pre call before a player call medic",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerTakeHealthHook",D:"Pre call before a player took health",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerPostTakeDamageHook",D:"Pre call before a player took damage",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerUserInfoChangedHook",D:"Pre call before a player info changed",W:"FuncDefs",C:"FuncDef",J:1},{P:"WeaponTertiaryAttackHook",D:"Called when a player fires a weapon's tertiary attack.",W:"FuncDefs",C:"FuncDef",J:1},{P:"WeaponSecondaryAttackHook",D:"Called when a player fires a weapon's secondary attack.",W:"FuncDefs",C:"FuncDef",J:1},{P:"WeaponPrimaryAttackHook",D:"Called when a player fires a weapon's primary attack.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerPreDecalHook",D:"Called when a player attempts to spraypaint a decal onto a surface. The given trace result contains the surface information. Set bResult to false if the player shouldn't be able to spray. ",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerDecalHook",D:"Called when a player is spraypainting a decal onto a surface. The given trace result contains the surface information. ",W:"FuncDefs",C:"FuncDef",J:1},{P:"GetPlayerSpawnSpotHook",D:"Called when a player is about to get a spawn point before (re)spawning.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerPostThinkHook",D:"Called when the player is processing post think events.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerPreThinkHook",D:"Called when the player is processing pre think events.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerUseHook",D:"Called when the game is processing player use input. Note that this occurs even if the player has not pressed their use key.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerLeftObserverHook",D:"Called when a player leaves observer mode.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerEnteredObserverHook",D:"Called when a player enters observer mode.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerKilledHook",D:"Called when a player is killed.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerTakeDamageHook",D:"Called when a player takes damage. Note that the victim entity can't be changed at this point.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerCanRespawnHook",D:"Called when the game wants to know if the player should be able to respawn or not.Set bCanRespawn to false to disallow, default true.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerSpawnHook",D:"Called when a player (re)spawns.",W:"FuncDefs",C:"FuncDef",J:1},{P:"ClientConnectedHook",D:"Called when a player connects to the server. if bDisallowJoin is set to false, the player is disconnected. szRejectReason is shown to the player if disconnected. The maximum length of the reject reason string is 127 characters.",W:"FuncDefs",C:"FuncDef",J:1},{P:"CollectedHook",D:"Called when a pickup object is collected by a player. ",W:"FuncDefs",C:"FuncDef",J:1},{P:"MaterializeHook",D:"Called when a pickup object materializes.",W:"FuncDefs",C:"FuncDef",J:1},{P:"CanCollectHook",D:"Called when a pickup object is about to be collected by a player. Note that basic checks are done before this hook is called.",W:"FuncDefs",C:"FuncDef",J:1},{P:"CanPlayerUseReservedSlotHook",D:"Called when a player connects to the server, and the number of slots left on the server is <= the number of reserved slots. Set bAllowJoin to true to allow the player to join (default false).",W:"FuncDefs",C:"FuncDef",J:1},{P:"ClientSayHook",D:"Called when a player says something in game chat. The SayParameters class can be used to manipulate input and veto the message.",W:"FuncDefs",C:"FuncDef",J:1},{P:"ClientPutInServerHook",D:"Called when a player has finished connecting and is put into the world. It is safe to send network messages to the player at this point.",W:"FuncDefs",C:"FuncDef",J:1},{P:"ClientDisconnectHook",D:"Called when a player disconnects. Note that this is only called if the player was fully connected, meaning the player went through ClientPutInServer. This is never called for the local host.",W:"FuncDefs",C:"FuncDef",J:1},{P:"EntityCreatedHook",D:"Called when a new entity is created. At this point the entity is not spawned yet and may not be fully initialized.",W:"FuncDefs",C:"FuncDef",J:1},{P:"MapChangeHook",D:"Called when the map changes. This happens when the world is destroyed. There may still be entities that exist at this point.",W:"FuncDefs",C:"FuncDef",J:1},{P:"PlayerInVolumeListener",D:"Listener for CountPlayersInBrushVolume.",W:"PlayerInVolumeListener",C:"Interface"},{P:"PlayerDetected",D:"Called whenever a player is detected.",W:"PlayerInVolumeListener",C:"PlayerInVolumeListener",J:1},{P:"ScriptClassInterface",D:"Script class interface",W:"ScriptClassInterface",C:"Interface"}];