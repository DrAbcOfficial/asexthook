<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="Networked entity variables">
	<meta property="og:title" content="entvars_t">
	<meta property="og:description" content="Networked entity variables">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>entvars_t</title>
</head>
<body>
	<h1>entvars_t</h1>
	<p>Networked entity variables</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>bool ClassNameIs(const string& in szClassName)</td>
			<td>Returns whether the given class name is this entity's class name</td>
		</tr>
		<tr>
			<td>int8 get_controller(uint)</td>
			<td>Get entity controller by index (0..3). Used by entities with studio models to get bone controller settings.</td>
		</tr>
		<tr>
			<td>void set_controller(uint, int8)</td>
			<td>Set entity controller by index (0..3, 0..255) Used by entities with studio models to set bone controller settings.</td>
		</tr>
		<tr>
			<td>int8 get_blending(uint)</td>
			<td>Get entity blending by index (0..1). Used by entities with models to get x or y axis blending.</td>
		</tr>
		<tr>
			<td>void set_blending(uint, int8)</td>
			<td>Set entity blending by index (0..1, 0..255). Used by entities with models to set x or y axis blending.</td>
		</tr>
		<tr>
			<td>bool SpawnFlagBitSet(int iFlags)</td>
			<td>Returns whether the given flag(s) are set on the entvars spawnflags variable</td>
		</tr>
		<tr>
			<td>bool FlagBitSet(int iFlags)</td>
			<td>Returns whether the given flag(s) are set on the entvars flags variable</td>
		</tr>
		<tr>
			<td>edict_t@ get_pContainingEntity() const</td>
			<td>Entity containing entity. pContainingEntity.vars equals this entvars instance.</td>
		</tr>
	</table>
	</div>
	<div><h2>Properties</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>const string_t classname</td>
			<td>The entity class name</td>
		</tr>
		<tr>
			<td>string_t globalname</td>
			<td>The entity global name</td>
		</tr>
		<tr>
			<td>Vector origin</td>
			<td>Entity origin. Must be set using g_EntityFuncs.SetOrigin.</td>
		</tr>
		<tr>
			<td>Vector oldorigin</td>
			<td>Old entity origin. Used by some entities to store off their original origin before moving to a different location.</td>
		</tr>
		<tr>
			<td>Vector velocity</td>
			<td>Entity velocity</td>
		</tr>
		<tr>
			<td>Vector basevelocity</td>
			<td>Entity base velocity. Used when standing on another entity that applies velocity to entities standing on it, for instance conveyors.</td>
		</tr>
		<tr>
			<td>Vector movedir</td>
			<td>Entity move direction. Used by some entities for movement directions, but some entities use it for other purposes.</td>
		</tr>
		<tr>
			<td>Vector angles</td>
			<td>Entity angles, in degrees.</td>
		</tr>
		<tr>
			<td>Vector avelocity</td>
			<td>Entity angular velocity, in degrees/sec. Applied to the entity's angles.</td>
		</tr>
		<tr>
			<td>Vector punchangle</td>
			<td>Player punch angle. These angles are applied to players when they are 'punched'.These angles are automatically interpolated back to the null vector over time.</td>
		</tr>
		<tr>
			<td>Vector v_angle</td>
			<td>Player view angle. These are the angles used for the player's view, and differ from the regular angles variable.</td>
		</tr>
		<tr>
			<td>Vector endpos</td>
			<td>Entity end position. Reserved for future use.</td>
		</tr>
		<tr>
			<td>Vector startpos</td>
			<td>Entity start position. Reserved for future use.</td>
		</tr>
		<tr>
			<td>float impacttime</td>
			<td>Entity impact time. Reserved for future use.</td>
		</tr>
		<tr>
			<td>float starttime</td>
			<td>Entity start time. Reserved for future use.</td>
		</tr>
		<tr>
			<td>int fixangle</td>
			<td>Entity fix angle. Engine uses this value to change player view angles, and then resets it to FAM_NOTHING. See FixAngleMode enum.</td>
		</tr>
		<tr>
			<td>float idealpitch</td>
			<td>Entity ideal pitch. Used in conjunction with pitch_speed to interpolate the entity's current pitch angle to this value.</td>
		</tr>
		<tr>
			<td>float pitch_speed</td>
			<td>Entity pitch speed. See idealpitch.</td>
		</tr>
		<tr>
			<td>float ideal_yaw</td>
			<td>Entity ideal yaw. Used in conjunction with yaw_speed to interpolate the entity's current yaw angle to this value.</td>
		</tr>
		<tr>
			<td>float yaw_speed</td>
			<td>Entity yaw speed. See ideal_yaw.</td>
		</tr>
		<tr>
			<td>const int modelindex</td>
			<td>Entity model index. If this entity has a model, is the unique index of the model. Otherwise, is 0.</td>
		</tr>
		<tr>
			<td>string_t model</td>
			<td>The entity model name. If this entity has a model, is the name of that model. Otherwise, is an empty string.Use g_EntityFuncs.SetModel to set this variable.</td>
		</tr>
		<tr>
			<td>string_t viewmodel</td>
			<td>Player view model index. If this player has a visible weapon, is the name of that view (v_) model. Otherwise, is an empty string.</td>
		</tr>
		<tr>
			<td>string_t weaponmodel</td>
			<td>Entity weapon model index. If this player has a visible weapon, is the name of that third person (p_) model. Otherwise, is an empty string.</td>
		</tr>
		<tr>
			<td>Vector absmin</td>
			<td>Entity absolute minimum size. Is an absolute position in the world. Automatically updated by the engine.</td>
		</tr>
		<tr>
			<td>Vector absmax</td>
			<td>Entity absolute maximum size. Is an absolute position in the world. Automatically updated by the engine.</td>
		</tr>
		<tr>
			<td>Vector mins</td>
			<td>Entity minimum size. Relative to the player's origin.</td>
		</tr>
		<tr>
			<td>Vector maxs</td>
			<td>Entity maximum size. Relative to the player's origin.</td>
		</tr>
		<tr>
			<td>Vector size</td>
			<td>Entity size. Equivalent to maxs - mins</td>
		</tr>
		<tr>
			<td>float ltime</td>
			<td>Entity ltime. The last time this entity has executed its think function. Otherwise, is 0.</td>
		</tr>
		<tr>
			<td>float nextthink</td>
			<td>Entity next think time. The next time this entity will execute its think function, as an absolute time value. Otherwise, is 0.</td>
		</tr>
		<tr>
			<td>int movetype</td>
			<td>Entity movetype<br>See MOVETYPE enum.</td>
		</tr>
		<tr>
			<td>int solid</td>
			<td>Entity solid flag<br>See SOLID enum.</td>
		</tr>
		<tr>
			<td>int skin</td>
			<td>Entity skin index. Used by entities with studio models to set which skin to use.</td>
		</tr>
		<tr>
			<td>int body</td>
			<td>Entity body index. Used by entities with studio models to set which body to use.</td>
		</tr>
		<tr>
			<td>int effects</td>
			<td>Entity effects<br>See EFFECTS enum.</td>
		</tr>
		<tr>
			<td>float gravity</td>
			<td>Entity gravity. Is a scalar between 0 and 1, inclusive.</td>
		</tr>
		<tr>
			<td>float friction</td>
			<td>Entity friction. Is a scalar between 0 and 1, inclusive.</td>
		</tr>
		<tr>
			<td>int light_level</td>
			<td>Player only light level. This is a single value between 0 and 255 inclusive. Use g_EngineFuncs.GetEntityIllum to retrieve this value.</td>
		</tr>
		<tr>
			<td>int sequence</td>
			<td>Entity sequence. Used by entities with studio models to set which sequence to use.</td>
		</tr>
		<tr>
			<td>int gaitsequence</td>
			<td>Entity gait sequence. Used by entities with studio models for walking sequences.</td>
		</tr>
		<tr>
			<td>float frame</td>
			<td>Entity frame. Used by entities with studio models to set the current frame that a sequence is using. Automatically incremented.Used by brush models for animated textures: 1 for animated, 0 for off.</td>
		</tr>
		<tr>
			<td>float animtime</td>
			<td>Entity animation time. Used for internal operations.</td>
		</tr>
		<tr>
			<td>float framerate</td>
			<td>Entity framerate. used by entities with studio models to control sequence frame rate.</td>
		</tr>
		<tr>
			<td>float scale</td>
			<td>Entity rendering scale (0..255). Applies to studio and sprite models.</td>
		</tr>
		<tr>
			<td>int rendermode</td>
			<td>Entity render mode. See RenderModes enum.</td>
		</tr>
		<tr>
			<td>float renderamt</td>
			<td>Entity render amount (0..255)</td>
		</tr>
		<tr>
			<td>Vector rendercolor</td>
			<td>Entity render color (rgb)</td>
		</tr>
		<tr>
			<td>int renderfx</td>
			<td>Entity render fx</td>
		</tr>
		<tr>
			<td>float health</td>
			<td>Entity health. Do not set directly unless you are absolutely sure you know what you are doing.</td>
		</tr>
		<tr>
			<td>float frags</td>
			<td>Entity frags. Usually used for the number of kills or score.</td>
		</tr>
		<tr>
			<td>int weapons</td>
			<td>Entity weapons bit vector. Largely used by monsters to track which weapons they have, and by players for internal purposes.</td>
		</tr>
		<tr>
			<td>float takedamage</td>
			<td>Entity take damage flag<br>See DAMAGE enum.</td>
		</tr>
		<tr>
			<td>int deadflag</td>
			<td>Entity dead flag<br>See DEAD enum.</td>
		</tr>
		<tr>
			<td>Vector view_ofs</td>
			<td>Entity view offset. Used to set an eye offset.</td>
		</tr>
		<tr>
			<td>int button</td>
			<td>Entity button bit vector. Usually used to track which buttons the player is currently pressing.</td>
		</tr>
		<tr>
			<td>int impulse</td>
			<td>Entity impulse bit vector. Used for various internal operations.</td>
		</tr>
		<tr>
			<td>edict_t@ chain</td>
			<td>Entity pointer when linked into a linked list. Used for temporary lists.</td>
		</tr>
		<tr>
			<td>edict_t@ dmg_inflictor</td>
			<td>Entity damage inflictor</td>
		</tr>
		<tr>
			<td>edict_t@ enemy</td>
			<td>Entity enemy</td>
		</tr>
		<tr>
			<td>edict_t@ aiment</td>
			<td>Entity pointer when MOVETYPE_FOLLOW</td>
		</tr>
		<tr>
			<td>edict_t@ owner</td>
			<td>Entity owner</td>
		</tr>
		<tr>
			<td>edict_t@ groundentity</td>
			<td>Entity ground entity</td>
		</tr>
		<tr>
			<td>int spawnflags</td>
			<td>Entity spawn flags</td>
		</tr>
		<tr>
			<td>int flags</td>
			<td>Entity flags<br>See EdictFlags enum.</td>
		</tr>
		<tr>
			<td>int colormap</td>
			<td>Entity color map. Used for player model colors.</td>
		</tr>
		<tr>
			<td>int team</td>
			<td>Entity team. Reserved for future use.</td>
		</tr>
		<tr>
			<td>float max_health</td>
			<td>Entity maximum health</td>
		</tr>
		<tr>
			<td>float teleport_time</td>
			<td>Entity teleport time. Intended for internal operations.</td>
		</tr>
		<tr>
			<td>float armortype</td>
			<td>Entity armor type. Represents maximum armor (similar to max_health).</td>
		</tr>
		<tr>
			<td>float armorvalue</td>
			<td>Entity armor value</td>
		</tr>
		<tr>
			<td>int waterlevel</td>
			<td>Entity water level<br>See WATERLEVEL enum.</td>
		</tr>
		<tr>
			<td>int watertype</td>
			<td>Player only. Contains the type of water contents the player is currently in. See CONTENTS enum.</td>
		</tr>
		<tr>
			<td>string_t target</td>
			<td>The entity target. If set, is the name of one or more targets to trigger. Otherwise, is empty.</td>
		</tr>
		<tr>
			<td>string_t targetname</td>
			<td>The entity target name</td>
		</tr>
		<tr>
			<td>string_t netname</td>
			<td>The entity net name. Used for various things, such as the player's name.</td>
		</tr>
		<tr>
			<td>string_t message</td>
			<td>The entity message. Used for various things.</td>
		</tr>
		<tr>
			<td>float dmg_take</td>
			<td>Entity damage take. Used for internal operations.</td>
		</tr>
		<tr>
			<td>float dmg_save</td>
			<td>Entity damage save. Used for internal operations.</td>
		</tr>
		<tr>
			<td>float dmg</td>
			<td>Entity damage. Usually stores how much damage this entity can do to other entities.</td>
		</tr>
		<tr>
			<td>float dmgtime</td>
			<td>Entity damage time. Time at which this entity last took damage. Usually used to limit damage effects from being shown too often.</td>
		</tr>
		<tr>
			<td>string_t noise</td>
			<td>Entity noise. Usually used to store a sound name.</td>
		</tr>
		<tr>
			<td>string_t noise1</td>
			<td>Entity noise 1. Usually used to store a sound name.</td>
		</tr>
		<tr>
			<td>string_t noise2</td>
			<td>Entity noise 2. Usually used to store a sound name.</td>
		</tr>
		<tr>
			<td>string_t noise3</td>
			<td>Entity noise 3. Usually used to store a sound name.</td>
		</tr>
		<tr>
			<td>float speed</td>
			<td>Entity speed</td>
		</tr>
		<tr>
			<td>float air_finished</td>
			<td>Player air finished. Time at which the player runs out of air when underwater.</td>
		</tr>
		<tr>
			<td>float pain_finished</td>
			<td>Player pain finished. Time at which the player can take damage again while drowning.</td>
		</tr>
		<tr>
			<td>float radsuit_finished</td>
			<td>Entity radiation suit finished. Reserved for future use.</td>
		</tr>
		<tr>
			<td>int playerclass</td>
			<td>Entity player class. Reserved for future use.</td>
		</tr>
		<tr>
			<td>float maxspeed</td>
			<td>Entity maximum speed</td>
		</tr>
		<tr>
			<td>float fov</td>
			<td>Player field of view</td>
		</tr>
		<tr>
			<td>int weaponanim</td>
			<td>Player weapon animation</td>
		</tr>
		<tr>
			<td>int pushmsec</td>
			<td>Entity push milliseconds. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int bInDuck</td>
			<td>Entity ducking flag. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int flTimeStepSound</td>
			<td>Entity time of step sound. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int flSwimTime</td>
			<td>Entity swim time. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int flDuckTime</td>
			<td>Entity duck time. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int iStepLeft</td>
			<td>Entity step left flag. Used for internal operations.</td>
		</tr>
		<tr>
			<td>float flFallVelocity</td>
			<td>Player fall velocity.</td>
		</tr>
		<tr>
			<td>int gamestate</td>
			<td>Entity gamestate. Reserved for future use.</td>
		</tr>
		<tr>
			<td>int oldbuttons</td>
			<td>Player old buttons. Previous frame's contents of buttons.</td>
		</tr>
		<tr>
			<td>int groupinfo</td>
			<td>Entity group info. Used for internal operations.</td>
		</tr>
		<tr>
			<td>int iuser1</td>
			<td>User variable 1 (integer)</td>
		</tr>
		<tr>
			<td>int iuser2</td>
			<td>User variable 2 (integer)</td>
		</tr>
		<tr>
			<td>int iuser3</td>
			<td>User variable 3 (integer)</td>
		</tr>
		<tr>
			<td>int iuser4</td>
			<td>User variable 4 (integer)</td>
		</tr>
		<tr>
			<td>float fuser1</td>
			<td>User variable 1 (float)</td>
		</tr>
		<tr>
			<td>float fuser2</td>
			<td>User variable 2 (float)</td>
		</tr>
		<tr>
			<td>float fuser3</td>
			<td>User variable 3 (float)</td>
		</tr>
		<tr>
			<td>float fuser4</td>
			<td>User variable 4 (float)</td>
		</tr>
		<tr>
			<td>Vector vuser1</td>
			<td>User variable 1 (Vector)</td>
		</tr>
		<tr>
			<td>Vector vuser2</td>
			<td>User variable 2 (Vector)</td>
		</tr>
		<tr>
			<td>Vector vuser3</td>
			<td>User variable 3 (Vector)</td>
		</tr>
		<tr>
			<td>Vector vuser4</td>
			<td>User variable 4 (Vector)</td>
		</tr>
		<tr>
			<td>edict_t@ euser1</td>
			<td>User variable 1 (Edict)</td>
		</tr>
		<tr>
			<td>edict_t@ euser2</td>
			<td>User variable 2 (Edict)</td>
		</tr>
		<tr>
			<td>edict_t@ euser3</td>
			<td>User variable 3 (Edict)</td>
		</tr>
		<tr>
			<td>edict_t@ euser4</td>
			<td>User variable 4 (Edict)</td>
		</tr>
	</table>
	</div>
</body>
</html>
