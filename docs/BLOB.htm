<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="Binary Large OBject class used for storing arbitrary amounts of binary data.">
	<meta property="og:title" content="BLOB">
	<meta property="og:description" content="Binary Large OBject class used for storing arbitrary amounts of binary data.">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>BLOB</title>
</head>
<body>
	<h1>BLOB</h1>
	<p>Binary Large OBject class used for storing arbitrary amounts of binary data.</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>bool HasAllocatedBuffer() const</td>
			<td>Returns whether this instance has allocated a buffer.</td>
		</tr>
		<tr>
			<td>size_t GetSizeInBytes() const</td>
			<td>Gets the size of this BLOB, in bytes.</td>
		</tr>
		<tr>
			<td>size_t GetReadOffset() const</td>
			<td>Gets the read offset, in bytes.</td>
		</tr>
		<tr>
			<td>bool ReadReachedEnd() const</td>
			<td>Returns whether the last read operation reached the end of data that was written to this BLOB.</td>
		</tr>
		<tr>
			<td>bool ReadSizeValid(size_t uiSizeInBytes) const</td>
			<td>Returns whether the given amount of bytes can be read from this BLOB.</td>
		</tr>
		<tr>
			<td>size_t GetWriteOffset() const</td>
			<td>Gets the write offset, in bytes. This is the number of bytes written to this buffer.</td>
		</tr>
		<tr>
			<td>bool CanWriteSize(size_t uiSizeInBytes) const</td>
			<td>Returns whether the given amount of bytes can be written to this BLOB.</td>
		</tr>
		<tr>
			<td>size_t GetWriteBytesLeft() const</td>
			<td>Gets the number of bytes left that can be written to. This may change if a write operation causes the buffer to be resized.</td>
		</tr>
		<tr>
			<td>bool CanResize() const</td>
			<td>Returns whether this BLOB is allowed to resize its buffer.</td>
		</tr>
		<tr>
			<td>void SetCanResize(bool fState)</td>
			<td>Sets whether this BLOB is allowed to resize its buffer.</td>
		</tr>
		<tr>
			<td>int8 ReadInt8()</td>
			<td>Reads an int8 from this BLOB.</td>
		</tr>
		<tr>
			<td>int16 ReadInt16()</td>
			<td>Reads an int16 from this BLOB.</td>
		</tr>
		<tr>
			<td>int32 ReadInt32()</td>
			<td>Reads an int32 from this BLOB.</td>
		</tr>
		<tr>
			<td>int64 ReadInt64()</td>
			<td>Reads an int64 from this BLOB.</td>
		</tr>
		<tr>
			<td>uint8 ReadUInt8()</td>
			<td>Reads a uint8 from this BLOB.</td>
		</tr>
		<tr>
			<td>int16 ReadUInt16()</td>
			<td>Reads a uint16 from this BLOB.</td>
		</tr>
		<tr>
			<td>int32 ReadUInt32()</td>
			<td>Reads a uint32 from this BLOB.</td>
		</tr>
		<tr>
			<td>int64 ReadUInt64()</td>
			<td>Reads a uint64 from this BLOB.</td>
		</tr>
		<tr>
			<td>float ReadFloat()</td>
			<td>Reads a float from this BLOB.</td>
		</tr>
		<tr>
			<td>double ReadDouble()</td>
			<td>Reads a double from this BLOB.</td>
		</tr>
		<tr>
			<td>int8 ReadInt8(bool& out fSuccess)</td>
			<td>Reads an int8 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int16 ReadInt16(bool& out fSuccess)</td>
			<td>Reads an int16 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int32 ReadInt32(bool& out fSuccess)</td>
			<td>Reads an int32 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int64 ReadInt64(bool& out fSuccess)</td>
			<td>Reads an int64 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>uint8 ReadUInt8(bool& out fSuccess)</td>
			<td>Reads a uint8 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int16 ReadUInt16(bool& out fSuccess)</td>
			<td>Reads a uint16 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int32 ReadUInt32(bool& out fSuccess)</td>
			<td>Reads a uint32 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>int64 ReadUInt64(bool& out fSuccess)</td>
			<td>Reads a uint64 from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>float ReadFloat(bool& out fSuccess)</td>
			<td>Reads a float from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>double ReadDouble(bool& out fSuccess)</td>
			<td>Reads a double from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>string ReadString(size_t uiSizeInBytes)</td>
			<td>Reads a fixed length string from this BLOB.</td>
		</tr>
		<tr>
			<td>string ReadString(size_t uiSizeInBytes, bool& out fSuccess)</td>
			<td>Reads a fixed length string from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>string ReadString(bool& out fSuccess)</td>
			<td>Reads a variable length string from this BLOB. fSuccess is true if the read succeeded.</td>
		</tr>
		<tr>
			<td>string ReadString()</td>
			<td>Reads a variable length string from this BLOB.</td>
		</tr>
		<tr>
			<td>bool WriteBytes(size_t uiSizeInBytes, int iValue = 0)</td>
			<td>Writes a given value a number of bytes to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool WriteBytesUntil(size_t uiEndOffset, int iValue = 0)</td>
			<td>Writes a given value until the given end offset to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(int8 data)</td>
			<td>Writes an int8 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(int16 data)</td>
			<td>Writes an int16 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(int32 data)</td>
			<td>Writes an int32 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(int64 data)</td>
			<td>Writes an int64 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(uint8 data)</td>
			<td>Writes a uint8 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(uint16 data)</td>
			<td>Writes a uint16 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(uint32 data)</td>
			<td>Writes a uint32 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(uint64 data)</td>
			<td>Writes a uint64 to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(float data)</td>
			<td>Writes a float to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(double data)</td>
			<td>Writes a double to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(const string& in szString, size_t uiSizeInBytes)</td>
			<td>Writes a fixed length string to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>bool Write(const string& in szString)</td>
			<td>Writes a variable length string to this BLOB. Returns true if the write succeeded.</td>
		</tr>
		<tr>
			<td>void Resize(size_t uiNewSize)</td>
			<td>Resizes this BLOB. Data may be lost because of this.</td>
		</tr>
		<tr>
			<td>void Reserve(size_t uiMinimumSize)</td>
			<td>Reserves the given amount of space, if needed.</td>
		</tr>
		<tr>
			<td>void ShrinkToFit()</td>
			<td>Shrinks this BLOB to fit the data that was written to it.</td>
		</tr>
		<tr>
			<td>void Clear()</td>
			<td>Clears this BLOB of all data and allocated memory. All flags are reset to their default values.</td>
		</tr>
	</table>
	</div>
</body>
</html>
