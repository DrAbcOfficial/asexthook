<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="List of all documented enums with a brief descriptions of each.">
	<meta property="og:title" content="Enums">
	<meta property="og:description" content="List of all documented enums with a brief descriptions of each.">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>Enums</title>
</head>
<body>
	<div><h1>Enumerations</h1>
	<p>List of all documented enums with a brief descriptions of each.</p>
	</div>
	<div><h2>Enums</h2>
	<table>
		<tr>
			<th>Name</th>
			<th>Description</th>
		</tr>
		<tr>
			<td><a href="CompareType.htm">CompareType</a>
			</td>
			<td>Compare type.</td>
		</tr>
		<tr>
			<td><a href="ArgumentType.htm">ArgumentType</a>
			</td>
			<td>Which type a reflection argument is</td>
		</tr>
		<tr>
			<td><a href="FlagType.htm">FlagType</a>
			</td>
			<td>Regular expression flags. These can be bitwise OR'd together to combine options.</td>
		</tr>
		<tr>
			<td><a href="MatchFlagType.htm">MatchFlagType</a>
			</td>
			<td>Match format flags. These can be bitwise OR'd together to combine options.</td>
		</tr>
		<tr>
			<td><a href="OpenFile.htm">OpenFile</a>
			</td>
			<td>Flags passed to FileSystem::OpenFile.</td>
		</tr>
		<tr>
			<td><a href="SeekFile.htm">SeekFile</a>
			</td>
			<td>Mode flags passed to File::Seek.</td>
		</tr>
		<tr>
			<td><a href="EdictFlags.htm">EdictFlags</a>
			</td>
			<td>entvars_t::flags constants</td>
		</tr>
		<tr>
			<td><a href="MOVETYPE.htm">MOVETYPE</a>
			</td>
			<td>entvars_t::movetype constants</td>
		</tr>
		<tr>
			<td><a href="SOLID.htm">SOLID</a>
			</td>
			<td>entvars_t::solid constants.</td>
		</tr>
		<tr>
			<td><a href="DEAD.htm">DEAD</a>
			</td>
			<td>Entity entvars_t::deadflag values</td>
		</tr>
		<tr>
			<td><a href="DAMAGE.htm">DAMAGE</a>
			</td>
			<td>entvars_t::takedamage values</td>
		</tr>
		<tr>
			<td><a href="EFFECTS.htm">EFFECTS</a>
			</td>
			<td>entvars_t::effects constants</td>
		</tr>
		<tr>
			<td><a href="WATERLEVEL.htm">WATERLEVEL</a>
			</td>
			<td>entvars_t waterlevel values</td>
		</tr>
		<tr>
			<td><a href="FixAngleMode.htm">FixAngleMode</a>
			</td>
			<td>entvars_t::fixangle modes</td>
		</tr>
		<tr>
			<td><a href="USE_TYPE.htm">USE_TYPE</a>
			</td>
			<td>Use type for entities. Not all entities support all use types.</td>
		</tr>
		<tr>
			<td><a href="Entvartype.htm">Entvartype</a>
			</td>
			<td>Entity variable type</td>
		</tr>
		<tr>
			<td><a href="FCAP.htm">FCAP</a>
			</td>
			<td>CBaseEntity caps (CBaseEntity::ObjectCaps())</td>
		</tr>
		<tr>
			<td><a href="CLASS.htm">CLASS</a>
			</td>
			<td>Entity classification</td>
		</tr>
		<tr>
			<td><a href="RELATIONSHIP.htm">RELATIONSHIP</a>
			</td>
			<td>Relationship between (monster) entities</td>
		</tr>
		<tr>
			<td><a href="DMG.htm">DMG</a>
			</td>
			<td>Damage types.</td>
		</tr>
		<tr>
			<td><a href="TOGGLE_STATE.htm">TOGGLE_STATE</a>
			</td>
			<td>Toggle state for entities that can be toggled.</td>
		</tr>
		<tr>
			<td><a href="BLOOD_COLOR.htm">BLOOD_COLOR</a>
			</td>
			<td>Blood color</td>
		</tr>
		<tr>
			<td><a href="decal_e.htm">decal_e</a>
			</td>
			<td>Dynamic decals used by code to place decals like scorch marks in the world</td>
		</tr>
		<tr>
			<td><a href="GIB.htm">GIB</a>
			</td>
			<td>when calling Killed(), a value that governs gib behavior is expected to be one of these three values</td>
		</tr>
		<tr>
			<td><a href="TextureType.htm">TextureType</a>
			</td>
			<td>Texture types used by the game.</td>
		</tr>
		<tr>
			<td><a href="BREAK.htm">BREAK</a>
			</td>
			<td>Break model defines for message SVC_TEMPENTITY::TE_BREAKMODEL</td>
		</tr>
		<tr>
			<td><a href="TE_BOUNCE.htm">TE_BOUNCE</a>
			</td>
			<td>Temp entity bounce sound types</td>
		</tr>
		<tr>
			<td><a href="RenderModes.htm">RenderModes</a>
			</td>
			<td>Render modes used by entities (entvars_t::rendermode)</td>
		</tr>
		<tr>
			<td><a href="RenderFX.htm">RenderFX</a>
			</td>
			<td>Render FX modes (entvars_t::renderfx)</td>
		</tr>
		<tr>
			<td><a href="FireBulletsDrawMode.htm">FireBulletsDrawMode</a>
			</td>
			<td>FireBullets draw mode options</td>
		</tr>
		<tr>
			<td><a href="CommonEntityFlags.htm">CommonEntityFlags</a>
			</td>
			<td>Common entity flags used by various entities.</td>
		</tr>
		<tr>
			<td><a href="Bullet.htm">Bullet</a>
			</td>
			<td>bullet types</td>
		</tr>
		<tr>
			<td><a href="AddPlayerItemResult.htm">AddPlayerItemResult</a>
			</td>
			<td>Return values for CBaseEntity::AddPlayerItem</td>
		</tr>
		<tr>
			<td><a href="Materials.htm">Materials</a>
			</td>
			<td>Material types supported by breakables</td>
		</tr>
		<tr>
			<td><a href="SCRIPTSTATE.htm">SCRIPTSTATE</a>
			</td>
			<td>The state of a monster's script.</td>
		</tr>
		<tr>
			<td><a href="Activity.htm">Activity</a>
			</td>
			<td>Activity currently being played by a monster</td>
		</tr>
		<tr>
			<td><a href="MONSTERSTATE.htm">MONSTERSTATE</a>
			</td>
			<td>Current state of a monster</td>
		</tr>
		<tr>
			<td><a href="TaskData.htm">TaskData</a>
			</td>
			<td>These go in the flData member of TASK_WALK_TO_TARGET, TASK_RUN_TO_TARGET</td>
		</tr>
		<tr>
			<td><a href="MoveFlag.htm">MoveFlag</a>
			</td>
			<td>these MoveFlag values are assigned to a WayPoint's TYPE in order to demonstrate the</td>
		</tr>
		<tr>
			<td><a href="MonsterCondition.htm">MonsterCondition</a>
			</td>
			<td>these bits represent conditions that may befall the monster, of which some are allowed</td>
		</tr>
		<tr>
			<td><a href="CDMG.htm">CDMG</a>
			</td>
			<td>Damage over time types.</td>
		</tr>
		<tr>
			<td><a href="MonsterMemory.htm">MonsterMemory</a>
			</td>
			<td>these bits represent the monster's memory</td>
		</tr>
		<tr>
			<td><a href="AITRIGGER.htm">AITRIGGER</a>
			</td>
			<td>trigger conditions for scripted AI</td>
		</tr>
		<tr>
			<td><a href="SCHEDULE_TYPE.htm">SCHEDULE_TYPE</a>
			</td>
			<td>Schedule types for monster AI</td>
		</tr>
		<tr>
			<td><a href="TASK_TYPE.htm">TASK_TYPE</a>
			</td>
			<td>Task types for the monster AI</td>
		</tr>
		<tr>
			<td><a href="MonsterEventType.htm">MonsterEventType</a>
			</td>
			<td>Monster event types</td>
		</tr>
		<tr>
			<td><a href="bits_CAPABILITY.htm">bits_CAPABILITY</a>
			</td>
			<td>Tells us what a monster can do.</td>
		</tr>
		<tr>
			<td><a href="HITGROUP.htm">HITGROUP</a>
			</td>
			<td>Hit Group standards</td>
		</tr>
		<tr>
			<td><a href="KeyCode.htm">KeyCode</a>
			</td>
			<td>Key Codes</td>
		</tr>
		<tr>
			<td><a href="ObserverMode.htm">ObserverMode</a>
			</td>
			<td>Observer modes</td>
		</tr>
		<tr>
			<td><a href="In_Buttons.htm">In_Buttons</a>
			</td>
			<td>Bit field values for entvars_t.buttons.</td>
		</tr>
		<tr>
			<td><a href="Train.htm">Train</a>
			</td>
			<td>Train modes used by CBasePlayer::m_iTrain</td>
		</tr>
		<tr>
			<td><a href="PFLAG.htm">PFLAG</a>
			</td>
			<td>Player physics flags used in CBasePlayer::m_afPhysicsFlags</td>
		</tr>
		<tr>
			<td><a href="PLAYER_ANIM.htm">PLAYER_ANIM</a>
			</td>
			<td>Player animations, set using CBasePlayer::SetAnimation.</td>
		</tr>
		<tr>
			<td><a href="PlayerViewMode.htm">PlayerViewMode</a>
			</td>
			<td>Player view mode.</td>
		</tr>
		<tr>
			<td><a href="PlayerHookFlag.htm">PlayerHookFlag</a>
			</td>
			<td>Player hook flags. Used to skip execution of code when a hook performs an action that overrides built-in behavior.</td>
		</tr>
		<tr>
			<td><a href="SATCHELCODE.htm">SATCHELCODE</a>
			</td>
			<td>Satchel codes</td>
		</tr>
		<tr>
			<td><a href="ButtonCode.htm">ButtonCode</a>
			</td>
			<td>Button codes used by CBaseButton</td>
		</tr>
		<tr>
			<td><a href="DoorFlag.htm">DoorFlag</a>
			</td>
			<td>Door flags.</td>
		</tr>
		<tr>
			<td><a href="WALKMOVE.htm">WALKMOVE</a>
			</td>
			<td>Walk move types</td>
		</tr>
		<tr>
			<td><a href="CONTENTS.htm">CONTENTS</a>
			</td>
			<td>Contents of a spot in the world</td>
		</tr>
		<tr>
			<td><a href="FCVAR.htm">FCVAR</a>
			</td>
			<td>Console variable flags.</td>
		</tr>
		<tr>
			<td><a href="PRINT_TYPE.htm">PRINT_TYPE</a>
			</td>
			<td>Print type</td>
		</tr>
		<tr>
			<td><a href="MOVE_TYPE.htm">MOVE_TYPE</a>
			</td>
			<td>MoveToOrigin move type.</td>
		</tr>
		<tr>
			<td><a href="bits_SOUND.htm">bits_SOUND</a>
			</td>
			<td>Sound flags for monster schedules.</td>
		</tr>
		<tr>
			<td><a href="ItemFlag.htm">ItemFlag</a>
			</td>
			<td>Item flags used by ItemInfo::iFlags</td>
		</tr>
		<tr>
			<td><a href="WeaponIds.htm">WeaponIds</a>
			</td>
			<td>Weapon id values</td>
		</tr>
		<tr>
			<td><a href="PathTrackSpawnFlags.htm">PathTrackSpawnFlags</a>
			</td>
			<td>path_track spawnflags</td>
		</tr>
		<tr>
			<td><a href="BeamType.htm">BeamType</a>
			</td>
			<td>Beam types used by CBeam::SetType</td>
		</tr>
		<tr>
			<td><a href="BeamFlags.htm">BeamFlags</a>
			</td>
			<td>Beam flags used by CBeam::SetFlags</td>
		</tr>
		<tr>
			<td><a href="CBeamSpawnflags.htm">CBeamSpawnflags</a>
			</td>
			<td>CBeam spawn flags</td>
		</tr>
		<tr>
			<td><a href="TANKBULLET.htm">TANKBULLET</a>
			</td>
			<td>func_tank bullet types</td>
		</tr>
		<tr>
			<td><a href="TankFlags.htm">TankFlags</a>
			</td>
			<td>func_tank spawn flags</td>
		</tr>
		<tr>
			<td><a href="IGNORE_MONSTERS.htm">IGNORE_MONSTERS</a>
			</td>
			<td>Ignore monsters options.</td>
		</tr>
		<tr>
			<td><a href="IGNORE_GLASS.htm">IGNORE_GLASS</a>
			</td>
			<td>Ignore glass options.</td>
		</tr>
		<tr>
			<td><a href="HULL_NUMBER.htm">HULL_NUMBER</a>
			</td>
			<td>Ignore glass options.</td>
		</tr>
		<tr>
			<td><a href="ALERT_TYPE.htm">ALERT_TYPE</a>
			</td>
			<td>Alert type for console messages</td>
		</tr>
		<tr>
			<td><a href="SoundFlag.htm">SoundFlag</a>
			</td>
			<td>Sound flags</td>
		</tr>
		<tr>
			<td><a href="SOUND_CHANNEL.htm">SOUND_CHANNEL</a>
			</td>
			<td>Audio channels</td>
		</tr>
		<tr>
			<td><a href="PITCH.htm">PITCH</a>
			</td>
			<td>Pitch values. Other values are possible. Range: 0 - 255, where 255 is very high.</td>
		</tr>
		<tr>
			<td><a href="AdminLevel_t.htm">AdminLevel_t</a>
			</td>
			<td>Admin levels</td>
		</tr>
		<tr>
			<td><a href="FFADE.htm">FFADE</a>
			</td>
			<td>Fade flags for CPlayerFuncs::ScreenFade and ScreenFadeAll</td>
		</tr>
		<tr>
			<td><a href="HUD.htm">HUD</a>
			</td>
			<td>Used to dictate where client print commands print the given text.</td>
		</tr>
		<tr>
			<td><a href="HUD_EFFECT.htm">HUD_EFFECT</a>
			</td>
			<td>HUD element effects.</td>
		</tr>
		<tr>
			<td><a href="HUD_ELEM.htm">HUD_ELEM</a>
			</td>
			<td>Common flags used by all custom HUD elements.</td>
		</tr>
		<tr>
			<td><a href="HUD_SPR.htm">HUD_SPR</a>
			</td>
			<td>Flags used by custom HUD sprites.</td>
		</tr>
		<tr>
			<td><a href="HUD_NUM.htm">HUD_NUM</a>
			</td>
			<td>Flags used by custom numeric displays.</td>
		</tr>
		<tr>
			<td><a href="HUD_TIME.htm">HUD_TIME</a>
			</td>
			<td>Flags used by custom time displays.</td>
		</tr>
		<tr>
			<td><a href="GLOBALESTATE.htm">GLOBALESTATE</a>
			</td>
			<td>Global state values</td>
		</tr>
		<tr>
			<td><a href="NetworkMessageDest.htm">NetworkMessageDest</a>
			</td>
			<td>Network message destination types.</td>
		</tr>
		<tr>
			<td><a href="TE_ExplosionFlag.htm">TE_ExplosionFlag</a>
			</td>
			<td>TE_EXPLOSION flags</td>
		</tr>
		<tr>
			<td><a href="TE_FireFieldFlag.htm">TE_FireFieldFlag</a>
			</td>
			<td>TE_FIREFIELD flags</td>
		</tr>
		<tr>
			<td><a href="TempEntityType.htm">TempEntityType</a>
			</td>
			<td>Temporary entity types. Used in network messages of type SVC_TEMPENTITY.</td>
		</tr>
		<tr>
			<td><a href="NetworkMessageType.htm">NetworkMessageType</a>
			</td>
			<td>Network message types</td>
		</tr>
		<tr>
			<td><a href="Type.htm">Type</a>
			</td>
			<td>Console command kind.</td>
		</tr>
		<tr>
			<td><a href="ConCommandFlag.htm">ConCommandFlag</a>
			</td>
			<td>Console command flags</td>
		</tr>
		<tr>
			<td><a href="ClientSayType.htm">ClientSayType</a>
			</td>
			<td>Type of say the client used</td>
		</tr>
		<tr>
			<td><a href="SQLiteResult.htm">SQLiteResult</a>
			</td>
			<td>SQLite Return Value</td>
		</tr>
		<tr>
			<td><a href="SQLiteMode.htm">SQLiteMode</a>
			</td>
			<td>SQLite Open Mode</td>
		</tr>
		<tr>
			<td><a href="HookReturnCode.htm">HookReturnCode</a>
			</td>
			<td>Hook function return codes.</td>
		</tr>
	</table>
	</div>
</body>
</html>
