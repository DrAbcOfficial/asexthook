<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta name="generator" content="ASDocGenerator 1.1">
	<meta name="description" content="Global player functions">
	<meta property="og:title" content="CPlayerFuncs">
	<meta property="og:description" content="Global player functions">
	<meta property="og:type" content="website">
	<meta property="og:image" content="https://github.com/baso88/SC_AngelScript/wiki/images/sc_as_logo_media.png">
	<meta property="og:site_name" content="Sven Co-op AngelScript API">
	<link rel="stylesheet" type="text/css" href="doc.css">
	<title>CPlayerFuncs</title>
</head>
<body>
	<h1>CPlayerFuncs</h1>
	<p>Global player functions</p>
	<p><b>Type:</b> Reference type</p>
	<div><h2>Methods</h2>
	<table>
		<tr>
			<th>Declaration</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>void SayText(CBasePlayer@ pTargetPlayer, const string& in szText)</td>
			<td>Says text to a specific player</td>
		</tr>
		<tr>
			<td>void SayTextAll(CBasePlayer@ pOriginatingPlayer, const string& in szText)</td>
			<td>Says text to all players</td>
		</tr>
		<tr>
			<td>void ClientPrint(CBasePlayer@ pTargetPlayer, HUD iMsgDest, const string& in szMessage, const string& in szLine2 = "", const string& in szLine3 = "", const string& in szLine4 = "", const string& in szLine5 = "")</td>
			<td>Prints one or more messages on the HUD of the given player.<br>See HUD enum.</td>
		</tr>
		<tr>
			<td>void ClientPrintAll(HUD iMsgDest, const string& in szMessage, const string& in szLine2 = "", const string& in szLine3 = "", const string& in szLine4 = "", const string& in szLine5 = "")</td>
			<td>Prints one or more messages on the HUD of all players.<br>See HUD enum.</td>
		</tr>
		<tr>
			<td>void CenterPrintAll(const string& in szMessage, const string& in szLine2 = "", const string& in szLine3 = "", const string& in szLine4 = "", const string& in szLine5 = "")</td>
			<td>Prints one or more messages centered on the HUD of all players.</td>
		</tr>
		<tr>
			<td>void ShowMessage(CBasePlayer@ pTargetPlayer, const string& in szString)</td>
			<td>Shows a message to the given player.</td>
		</tr>
		<tr>
			<td>void ShowMessageAll(const string& in szString)</td>
			<td>Shows a message to all players.</td>
		</tr>
		<tr>
			<td>void HudMessage(CBasePlayer@ pTargetPlayer, const HUDTextParams& in textParams, const string& in szMessage)</td>
			<td>Shows a HUD message to a given player.</td>
		</tr>
		<tr>
			<td>void HudMessageAll(const HUDTextParams& in textParams, const string& in szMessage)</td>
			<td>Shows a HUD message to all players.</td>
		</tr>
		<tr>
			<td>void PrintKeyBindingString(CBasePlayer@ pPlayer, const string& in szString)</td>
			<td>Prints a string containing key bindings to the screen of the given player.</td>
		</tr>
		<tr>
			<td>void PrintKeyBindingStringAll(const string& in szString)</td>
			<td>Prints a string containing key bindings to the screen of all players.</td>
		</tr>
		<tr>
			<td>void HudToggleElement(CBasePlayer@ pTargetPlayer, uint8 iChannel, bool fVisible)</td>
			<td>Shows or hides HUD element occupying a given channel.</td>
		</tr>
		<tr>
			<td>void HudCustomSprite(CBasePlayer@ pTargetPlayer, const HUDSpriteParams& in params)</td>
			<td>Shows a custom HUD sprite to a given player or to all players if pTargetPlayer is not specified.</td>
		</tr>
		<tr>
			<td>void HudNumDisplay(CBasePlayer@ pTargetPlayer, const HUDNumDisplayParams& in params)</td>
			<td>Shows a custom numeric display to a given player or to all players if pTargetPlayer is not specified.</td>
		</tr>
		<tr>
			<td>void HudUpdateNum(CBasePlayer@ pTargetPlayer, uint8 iChannel, float flValue)</td>
			<td>Updates value of a custom numberic display.</td>
		</tr>
		<tr>
			<td>void HudTimeDisplay(CBasePlayer@ pTargetPlayer, const HUDNumDisplayParams& in params)</td>
			<td>Shows a custom time display to a given player or to all players if pTargetPlayer is not specified.</td>
		</tr>
		<tr>
			<td>void HudUpdateTime(CBasePlayer@ pTargetPlayer, uint8 iChannel, float flTime)</td>
			<td>Updates value of a custom time display.</td>
		</tr>
		<tr>
			<td>CBasePlayer@ FindPlayerByIndex(int index)</td>
			<td>Finds a player by index</td>
		</tr>
		<tr>
			<td>CBasePlayer@ FindPlayerByName(const string& in szName, bool bCaseSensitive = true)</td>
			<td>Finds a player by name</td>
		</tr>
		<tr>
			<td>int GetNumPlayers() const</td>
			<td>Gets the number of players that are currently connected to the server.</td>
		</tr>
		<tr>
			<td>void ScreenShake(const Vector& in center, float amplitude, float frequency, float duration, float radius)</td>
			<td>Shakes the screen for players near a certain location</td>
		</tr>
		<tr>
			<td>void ScreenShakeAll(const Vector& in center, float amplitude, float frequency, float duration)</td>
			<td>Shakes the screen for all players</td>
		</tr>
		<tr>
			<td>void ScreenFade(CBaseEntity@ pEntity, const Vector& in color, float fadeTime, float fadeHold, int alpha, int flags)</td>
			<td>Shows a message to a given player.</td>
		</tr>
		<tr>
			<td>void ScreenFadeAll(const Vector& in color, float fadeTime, float fadeHold, int alpha, int flags)</td>
			<td>Shows a message to all players.</td>
		</tr>
		<tr>
			<td>void ConcussionEffect(CBaseEntity@ pEntity, float amplitude, float frequency, float fadeTime)</td>
			<td>Applies concussion effect to a given player.</td>
		</tr>
		<tr>
			<td>bool GetNextBestWeapon(CBasePlayer@ pPlayer, CBasePlayerItem@ pCurrentWeapon)</td>
			<td>Makes the given player select the next best weapon available, based on the current weapon.</td>
		</tr>
		<tr>
			<td>bool CheatsAllowed(CBasePlayer@ pPlayer, const string& in szCheatName, bool fMustBeAlive = true, bool fNoMessage = false) const</td>
			<td>Returns whether cheats are enabled for the given player.</td>
		</tr>
		<tr>
			<td>AdminLevel_t AdminLevel(CBasePlayer@ pPlayer) const</td>
			<td>Returns the admin level for a given player.</td>
		</tr>
		<tr>
			<td>string AdminLevelToString(const AdminLevel_t adminLevel) const</td>
			<td>Converts the admin level to a string. If the level is an invalid value, an empty string is returned</td>
		</tr>
		<tr>
			<td>AdminLevel_t StringToAdminLevel(const string& in szString) const</td>
			<td>Converts a string containing one of AdminLevelToString's return values to an admin level.Returns ADMIN_NO if the string cannot be converted to a suitable constant</td>
		</tr>
		<tr>
			<td>void ApplyMapCfgToPlayer(CBasePlayer@ pPlayer, bool fReEquip = false)</td>
			<td>Applies the map configuration on the given player.<br>Will stack if called multiple times, unless fReEquip is true, in which case the player is stripped of all weapons and ammo first.</td>
		</tr>
		<tr>
			<td>void RespawnPlayer(CBasePlayer@ pPlayer, bool fMoveLivingPlayers = true, bool fRespawnDeadPlayers = false)</td>
			<td>Relocates the given player to an active spawn point. If the player is dead and fRespawnDeadPlayers is true, the player is respawned.</td>
		</tr>
		<tr>
			<td>void RespawnAllPlayers(bool fMoveLivingPlayers = true, bool fRespawnDeadPlayers = false)</td>
			<td>Relocates all players to active spawn points. If a player is dead and fRespawnDeadPlayers is true, the player is respawned.</td>
		</tr>
		<tr>
			<td>bool SpawnPointFilterPasses(CBaseEntity@ pSpawnEnt, CBaseEntity@ pPlayer)</td>
			<td>Returns whether the given player passes the given spawn point's filter</td>
		</tr>
		<tr>
			<td>bool IsSpawnPointValid(CBaseEntity@ pSpawnEnt, CBaseEntity@ pPlayer)</td>
			<td>Returns whether the given spawn point is valid for the given player</td>
		</tr>
		<tr>
			<td>bool IsSpawnPointOccupied(CBaseEntity@ pSpawnEnt)</td>
			<td>Returns whether the given spawn point entity is occupied</td>
		</tr>
		<tr>
			<td>int SharedRandomLong(uint iRandomSeed, int iLow, int iHigh)</td>
			<td>Gets a random long whose value is the same on both the client and server.</td>
		</tr>
		<tr>
			<td>float SharedRandomFloat(uint iRandomSeed, float iLow, float iHigh)</td>
			<td>Gets a random float whose value is the same on both the client and server.</td>
		</tr>
		<tr>
			<td>int GetAmmoIndex(const string& in szAmmoName)</td>
			<td>Gets the index of the given ammo, or -1 if it is invalid</td>
		</tr>
		<tr>
			<td>CBasePlayer@ CreateBot(const string& in szName)</td>
			<td>Creates a bot with the given name.</td>
		</tr>
		<tr>
			<td> void BotDisconnect(CBasePlayer@ pBot)</td>
			<td>Disconnects the bot. This will call ClientDisconnect and removes the entity. Do not use the entity after this call.</td>
		</tr>
	</table>
	</div>
</body>
</html>
